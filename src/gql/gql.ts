/* eslint-disable */
import * as types from "./graphql";
import type { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  "\n  fragment PostTypeSeoFragment on PostTypeSEO {\n    title\n    readingTime\n    canonical\n    metaDesc\n    opengraphSiteName\n    opengraphAuthor\n    opengraphDescription\n    opengraphPublisher\n    opengraphTitle\n    opengraphType\n    opengraphUrl\n    opengraphPublishedTime\n    opengraphModifiedTime\n    opengraphImage {\n      sourceUrl\n    }\n    twitterDescription\n    twitterTitle\n    metaRobotsNofollow\n    metaRobotsNoindex\n  }\n": typeof types.PostTypeSeoFragmentFragmentDoc;
  '\n  query GetAllWords(\n    $after: String = ""\n    $first: Int = 100\n    $field: PostObjectsConnectionOrderbyEnum = TITLE\n    $order: OrderEnum = ASC\n    $stati: [PostStatusEnum] = PUBLISH\n  ) {\n    berlinerWords(\n      first: $first\n      after: $after\n      where: { orderby: { field: $field, order: $order }, stati: $stati }\n    ) {\n      edges {\n        node {\n          id\n          slug\n          title\n          wordGroup\n          dateGmt\n          modifiedGmt\n          berlinerWordId\n          wordProperties {\n            article\n            berlinerisch\n            berlinerischAudio {\n              audio {\n                node {\n                  mediaItemUrl\n                }\n              }\n              gender\n            }\n            learnMore\n            berolinismus\n            examples {\n              example\n              exampleExplanation\n              exampleAudio {\n                gender\n                audio {\n                  node {\n                    mediaItemUrl\n                  }\n                }\n              }\n            }\n            translations {\n              translation\n            }\n            alternativeWords {\n              alternativeWord\n            }\n            relatedWords {\n              nodes {\n                ... on BerlinerWord {\n                  id\n                  wordProperties {\n                    berlinerisch\n                  }\n                  slug\n                }\n              }\n            }\n            wikimediaFiles {\n              wikimediaFile\n              description\n              caption\n            }\n            images {\n              nodes {\n                sourceUrl\n                mediaDetails {\n                  height\n                  width\n                }\n                caption(format: RAW)\n                altText\n                description(format: RAW)\n              }\n            }\n          }\n          berlinerischWordTypes {\n            nodes {\n              name\n            }\n          }\n          seo {\n            ...PostTypeSeoFragment\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n': typeof types.GetAllWordsDocument;
  "\n  query GetPagesBySlugs($slugs: [String] = []) {\n    pages(where: { nameIn: $slugs }) {\n      nodes {\n        slug\n        title\n        content\n        seo {\n          ...PostTypeSeoFragment\n        }\n      }\n    }\n  }\n": typeof types.GetPagesBySlugsDocument;
};
const documents: Documents = {
  "\n  fragment PostTypeSeoFragment on PostTypeSEO {\n    title\n    readingTime\n    canonical\n    metaDesc\n    opengraphSiteName\n    opengraphAuthor\n    opengraphDescription\n    opengraphPublisher\n    opengraphTitle\n    opengraphType\n    opengraphUrl\n    opengraphPublishedTime\n    opengraphModifiedTime\n    opengraphImage {\n      sourceUrl\n    }\n    twitterDescription\n    twitterTitle\n    metaRobotsNofollow\n    metaRobotsNoindex\n  }\n":
    types.PostTypeSeoFragmentFragmentDoc,
  '\n  query GetAllWords(\n    $after: String = ""\n    $first: Int = 100\n    $field: PostObjectsConnectionOrderbyEnum = TITLE\n    $order: OrderEnum = ASC\n    $stati: [PostStatusEnum] = PUBLISH\n  ) {\n    berlinerWords(\n      first: $first\n      after: $after\n      where: { orderby: { field: $field, order: $order }, stati: $stati }\n    ) {\n      edges {\n        node {\n          id\n          slug\n          title\n          wordGroup\n          dateGmt\n          modifiedGmt\n          berlinerWordId\n          wordProperties {\n            article\n            berlinerisch\n            berlinerischAudio {\n              audio {\n                node {\n                  mediaItemUrl\n                }\n              }\n              gender\n            }\n            learnMore\n            berolinismus\n            examples {\n              example\n              exampleExplanation\n              exampleAudio {\n                gender\n                audio {\n                  node {\n                    mediaItemUrl\n                  }\n                }\n              }\n            }\n            translations {\n              translation\n            }\n            alternativeWords {\n              alternativeWord\n            }\n            relatedWords {\n              nodes {\n                ... on BerlinerWord {\n                  id\n                  wordProperties {\n                    berlinerisch\n                  }\n                  slug\n                }\n              }\n            }\n            wikimediaFiles {\n              wikimediaFile\n              description\n              caption\n            }\n            images {\n              nodes {\n                sourceUrl\n                mediaDetails {\n                  height\n                  width\n                }\n                caption(format: RAW)\n                altText\n                description(format: RAW)\n              }\n            }\n          }\n          berlinerischWordTypes {\n            nodes {\n              name\n            }\n          }\n          seo {\n            ...PostTypeSeoFragment\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n':
    types.GetAllWordsDocument,
  "\n  query GetPagesBySlugs($slugs: [String] = []) {\n    pages(where: { nameIn: $slugs }) {\n      nodes {\n        slug\n        title\n        content\n        seo {\n          ...PostTypeSeoFragment\n        }\n      }\n    }\n  }\n":
    types.GetPagesBySlugsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  fragment PostTypeSeoFragment on PostTypeSEO {\n    title\n    readingTime\n    canonical\n    metaDesc\n    opengraphSiteName\n    opengraphAuthor\n    opengraphDescription\n    opengraphPublisher\n    opengraphTitle\n    opengraphType\n    opengraphUrl\n    opengraphPublishedTime\n    opengraphModifiedTime\n    opengraphImage {\n      sourceUrl\n    }\n    twitterDescription\n    twitterTitle\n    metaRobotsNofollow\n    metaRobotsNoindex\n  }\n",
): (typeof documents)["\n  fragment PostTypeSeoFragment on PostTypeSEO {\n    title\n    readingTime\n    canonical\n    metaDesc\n    opengraphSiteName\n    opengraphAuthor\n    opengraphDescription\n    opengraphPublisher\n    opengraphTitle\n    opengraphType\n    opengraphUrl\n    opengraphPublishedTime\n    opengraphModifiedTime\n    opengraphImage {\n      sourceUrl\n    }\n    twitterDescription\n    twitterTitle\n    metaRobotsNofollow\n    metaRobotsNoindex\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetAllWords(\n    $after: String = ""\n    $first: Int = 100\n    $field: PostObjectsConnectionOrderbyEnum = TITLE\n    $order: OrderEnum = ASC\n    $stati: [PostStatusEnum] = PUBLISH\n  ) {\n    berlinerWords(\n      first: $first\n      after: $after\n      where: { orderby: { field: $field, order: $order }, stati: $stati }\n    ) {\n      edges {\n        node {\n          id\n          slug\n          title\n          wordGroup\n          dateGmt\n          modifiedGmt\n          berlinerWordId\n          wordProperties {\n            article\n            berlinerisch\n            berlinerischAudio {\n              audio {\n                node {\n                  mediaItemUrl\n                }\n              }\n              gender\n            }\n            learnMore\n            berolinismus\n            examples {\n              example\n              exampleExplanation\n              exampleAudio {\n                gender\n                audio {\n                  node {\n                    mediaItemUrl\n                  }\n                }\n              }\n            }\n            translations {\n              translation\n            }\n            alternativeWords {\n              alternativeWord\n            }\n            relatedWords {\n              nodes {\n                ... on BerlinerWord {\n                  id\n                  wordProperties {\n                    berlinerisch\n                  }\n                  slug\n                }\n              }\n            }\n            wikimediaFiles {\n              wikimediaFile\n              description\n              caption\n            }\n            images {\n              nodes {\n                sourceUrl\n                mediaDetails {\n                  height\n                  width\n                }\n                caption(format: RAW)\n                altText\n                description(format: RAW)\n              }\n            }\n          }\n          berlinerischWordTypes {\n            nodes {\n              name\n            }\n          }\n          seo {\n            ...PostTypeSeoFragment\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n',
): (typeof documents)['\n  query GetAllWords(\n    $after: String = ""\n    $first: Int = 100\n    $field: PostObjectsConnectionOrderbyEnum = TITLE\n    $order: OrderEnum = ASC\n    $stati: [PostStatusEnum] = PUBLISH\n  ) {\n    berlinerWords(\n      first: $first\n      after: $after\n      where: { orderby: { field: $field, order: $order }, stati: $stati }\n    ) {\n      edges {\n        node {\n          id\n          slug\n          title\n          wordGroup\n          dateGmt\n          modifiedGmt\n          berlinerWordId\n          wordProperties {\n            article\n            berlinerisch\n            berlinerischAudio {\n              audio {\n                node {\n                  mediaItemUrl\n                }\n              }\n              gender\n            }\n            learnMore\n            berolinismus\n            examples {\n              example\n              exampleExplanation\n              exampleAudio {\n                gender\n                audio {\n                  node {\n                    mediaItemUrl\n                  }\n                }\n              }\n            }\n            translations {\n              translation\n            }\n            alternativeWords {\n              alternativeWord\n            }\n            relatedWords {\n              nodes {\n                ... on BerlinerWord {\n                  id\n                  wordProperties {\n                    berlinerisch\n                  }\n                  slug\n                }\n              }\n            }\n            wikimediaFiles {\n              wikimediaFile\n              description\n              caption\n            }\n            images {\n              nodes {\n                sourceUrl\n                mediaDetails {\n                  height\n                  width\n                }\n                caption(format: RAW)\n                altText\n                description(format: RAW)\n              }\n            }\n          }\n          berlinerischWordTypes {\n            nodes {\n              name\n            }\n          }\n          seo {\n            ...PostTypeSeoFragment\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "\n  query GetPagesBySlugs($slugs: [String] = []) {\n    pages(where: { nameIn: $slugs }) {\n      nodes {\n        slug\n        title\n        content\n        seo {\n          ...PostTypeSeoFragment\n        }\n      }\n    }\n  }\n",
): (typeof documents)["\n  query GetPagesBySlugs($slugs: [String] = []) {\n    pages(where: { nameIn: $slugs }) {\n      nodes {\n        slug\n        title\n        content\n        seo {\n          ...PostTypeSeoFragment\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
