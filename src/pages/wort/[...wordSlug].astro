---
// Styles
import "@styles/objects/_word.scss";
import "@styles/components/_single-word.scss";
import "@styles/plugins/astro-breadcrumbs.scss";

// Types
import type { GetStaticPaths, InferGetStaticParamsType, InferGetStaticPropsType } from "astro";

import AudioPlayerList from "@components/AudioPlayerList.vue";
import BadgeTag from "@components/BadgeTag.vue";
import ImageGallery from "@components/ImageGallery.astro";
import RandomWordButton from "@components/RandomWordButton.vue";
import RelatedWords from "@components/RelatedWords.vue";
import ToolTip from "@components/ToolTip.vue";
import IsWordOfTheDay from "@components/word/IsWordOfTheDay.vue";
// import WordExamples from "@components/word/WordExamples.vue";
import WordExamples from "@components/word/WordExamples.astro";
import WordOptionDropdown from "@components/word/WordOptionDropdown.vue";
import Layout from "@layouts/Layout.astro";
// Imports
import { fetchAllWords } from "@services/api.ts";
import { formattedDate, removeFileExtension, routeToWord, seoData } from "@utils/helpers.ts";
import {
  capitalizeFirstLetter,
  coloredConsonantsAndVowels,
  countLetters,
  createWikimediaFileList,
  getWordType,
  similarSoundingWords,
  similarWords,
  translateNlpTags,
} from "@utils/wordHelper.ts";
import { Breadcrumbs } from "astro-breadcrumbs";
import german from "hyphenation.de";
import Hypher from "hypher";
import ChevronRight from "~icons/lucide/chevron-right";
import ExternalLink from "~icons/lucide/external-link";

import type { BerlinerWord } from "@/gql/graphql.ts";

export const getStaticPaths = (async () => {
  const allWords = await fetchAllWords();

  return allWords.map(({ node }) => {
    return {
      params: {
        wordSlug: node.slug,
      },
      props: {
        allWords: allWords.map((word) => word.node),
        word: node,
      },
    };
  });
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { wordSlug } = Astro.params as Params;
const { allWords, word } = Astro.props;

const wordProps: BerlinerWord["wordProperties"] = word.wordProperties;

const alternativeWords = wordProps?.alternativeWords?.map((word, index) => {
  return (
    word?.alternativeWord +
    (wordProps?.alternativeWords && index !== wordProps?.alternativeWords?.length - 1 ? ", " : "")
  );
});

// const wikimediaFiles = await createWikimediaFileList(wordProps?.wikimediaFiles!);
// console.log(wikimediaFiles);

let galleryWidths = [316, 457, 658, 429, 525];
let gallerySizes =
  "(max-width: 80rem) 525px, (max-width: 64rem) 429px, (max-width: 48rem) 658px, (max-width: 35.49rem) 457px, (max-width: 26.6rem) 316px";
const lightboxWidths = [425, 567, 768, 896];
const lightboxSizes =
  "(max-width: 26.6rem) 425px, (max-width: 35.49rem) 567px, (max-width: 48rem) 768px, (max-width: 64rem) 896px";

if (wordProps?.images && wordProps?.images?.nodes.length > 1) {
  galleryWidths = [503, 435, 307];
  gallerySizes =
    "(max-width: 70rem) 503px, (max-width: 64rem) 435px, (max-width: 48rem) 307px, (max-width: 35.5rem) 435px, (max-width: 27.2rem) 307px";
}

const hypher = new Hypher(german);

const wordTags = translateNlpTags(getWordType(word.wordProperties?.berlinerisch));

const schemaJson = () =>
  JSON.stringify({
    "@context": "https://schema.org",
    "@type": "DefinedTerm",
    alternateName: (wordProps?.alternativeWords ?? []).map((w) => w?.alternativeWord).join(", "),
    description: (wordProps?.translations ?? []).map((t) => t?.translation).join("; "),
    identifier: word.id,
    inDefinedTermSet: {
      "@type": "DefinedTermSet",
      name: "Berliner Schnauze Wörterbuch",
      url: `${Astro.url.origin}/wort`,
    },
    name: wordProps?.berlinerisch,
    sameAs: wordProps?.learnMore || undefined,
    url: removeFileExtension(Astro.url.href),
  });
---

<Layout content={seoData(word)} contentClasses="o-word">
  <Fragment slot="head">
    <script set:html={schemaJson()} type="application/ld+json" />
  </Fragment>
  <Breadcrumbs indexText="Start" linkTextFormat="capitalized" truncated={true}>
    <ChevronRight height="20" slot="separator" width="20" />
  </Breadcrumbs>

  <IsWordOfTheDay
    client:only="vue"
    iconSize={50}
    tooltipPlacement="top"
    word={wordProps?.berlinerisch}
    wordId={word.berlinerWordId}
  />
  <article class="c-single-word">
    <header class="c-single-word__header">
      <h1 class="c-single-word__word">
        {wordProps?.berlinerisch}

        {
          wordProps?.article && (
            <span class="c-single-word__word-article">, {wordProps.article}</span>
          )
        }
      </h1>
      {
        word.wordProperties?.berlinerischAudio && (
          <AudioPlayerList
            audio={word.wordProperties?.berlinerischAudio}
            client:only="vue"
            isType="berlinerisch"
          />
        )
      }

      {
        wordProps?.berolinismus && (
          <ToolTip client:only="vue">
            <BadgeTag> Berolinismus </BadgeTag>
            <Fragment slot="content">
              {word.wordProperties?.berlinerisch} gehört zu den Berlinismen.
              <br />
              <br />
              <strong>Berolinismus</strong>
              sind humorvolle Spitznamen und Eigenheiten, die bestimmte Orte und Gebäude in Berlin
              charakterisieren und das lokale Flair der Stadt prägen.
            </Fragment>
          </ToolTip>
        )
      }
      <WordOptionDropdown
        berlinerisch={word.wordProperties?.berlinerisch}
        client:only="vue"
        slug={word.slug}
      />
    </header>
    <main class="c-single-word__main">
      {wordProps?.infoText && <section set:html={wordProps?.infoText} />}
      <section>
        <h2>Etymologie</h2>

        {
          wordProps?.alternativeWords && (
            <div class="c-single-word__alternative-words-wrapper">
              <h3>Selbe Bedeutung wie:</h3>
              <p class="c-single-word__alternative-word">{alternativeWords}</p>
            </div>
          )
        }

        {
          wordProps?.translations && (
            <div class="c-single-word__translation-wrapper">
              <h3 class="c-single-word__sub-headline">Bedeutung:</h3>

              <ul class="c-single-word__translation">
                {wordProps?.translations?.map((translation) => {
                  return (
                    <li class="c-single-word__translation-item">{translation?.translation}</li>
                  );
                })}
              </ul>
            </div>
          )
        }
      </section>

      {
        wordProps?.examples && (
          <section class="c-single-word__examples-wrapper">
            <h2 class="c-single-word__sub-headline">Beispiele:</h2>
            <WordExamples examples={wordProps.examples} rootBemClass="c-single-word" />
          </section>
        )
      }

      <section>
        <h2>Orthographie</h2>

        <div class="c-single-word__syllables">
          <h3>Silben und Silbentrennung</h3>

          <h3>Silbentrennung:</h3>
          <p
            set:html={hypher
              .hyphenate(word.wordProperties?.berlinerisch)
              .join(" <span class='is-divider'>|</span> ")}
          />

          <h3>Anzahl der Silben:</h3>
          <p>{hypher.hyphenate(word.wordProperties?.berlinerisch).length}</p>
        </div>
      </section>

      <section>
        <h2>Quantitative Linguistik</h2>

        <div class="c-single-word__consonants-vowels">
          <h3>Konsonanten und Vokale</h3>
          <p
            class="c-single-word__consonants-vowels-word"
            set:html={coloredConsonantsAndVowels(word.wordProperties?.berlinerisch)}
          />

          <p>
            enthält {countLetters(word.wordProperties?.berlinerisch).vowels}
            <span class="is-vowel">Vokale</span> und {
              countLetters(word.wordProperties?.berlinerisch).consonants
            }
            <span class="is-consonant">Konsonanten</span>
          </p>
        </div>

        <div>
          <h3>Länge nach Buchstaben</h3>
          <p>
            "{word.wordProperties?.berlinerisch}" umfasst
            <strong>{word.wordProperties?.berlinerisch?.length}</strong> Buchstaben
          </p>
        </div>
      </section>

      {
        wordTags.length > 0 && (
          <section>
            <h2>Grammatik</h2>
            <h3>Wortart {Object.keys(wordTags[0]).length > 1 ? "pro Wort" : ""}</h3>
            {Object.keys(wordTags[0]).map((key) => {
              const isNomenPresent = wordTags[0][key].includes("Nomen");
              return (
                <div>
                  <h4>{isNomenPresent ? capitalizeFirstLetter(key) : key}</h4>
                  {wordTags[0][key].length === 1 ? (
                    <p>{wordTags[0][key][0]}</p>
                  ) : (
                    <ul>
                      {wordTags[0][key].map((tag) => (
                        <li>{tag}</li>
                      ))}
                    </ul>
                  )}
                </div>
              );
            })}
          </section>
        )
      }

      <!-- {
        word?.berlinerischWordTypes && word?.berlinerischWordTypes.nodes.length > 0 && (
          <div class="c-single-word__word-type-wrapper">
            <h2 class="c-single-word__sub-headline">Wortart:</h2>
            <p class="c-single-word__word-type">{word?.berlinerischWordTypes.nodes[0].name}</p>
          </div>
        )
      } -->

      {
        similarSoundingWords(allWords, word).find((word) => word.isSimilar) && (
          <section>
            <h2>Phonologie</h2>
            <h3>Ähnlich klingende Wörter</h3>
            {similarSoundingWords(allWords, word).some((result) => result.isSimilar) ? (
              <ul>
                {similarSoundingWords(allWords, word)
                  .filter((result) => result.isSimilar)
                  .map((result) => (
                    <li>
                      <a href={routeToWord(result.word?.slug)}>
                        {result.word?.wordProperties?.berlinerisch}
                      </a>
                    </li>
                  ))}
              </ul>
            ) : null}
          </section>
        )
      }

      {
        wordProps?.relatedWords?.nodes && wordProps?.relatedWords?.nodes.length > 0 && (
          <div class="c-single-word__related-words-wrapper">
            <h3>Verwandte Worte:</h3>
            <ul class="c-single-word__related-words-list">
              {wordProps.relatedWords.nodes
                .filter((word) => word?.wordProperties?.berlinerisch !== wordProps?.berlinerisch)
                .map((word): BerlinerWord[] => {
                  return (
                    <li class="c-single-word__related-word">
                      <a class="c-single-word__related-word-link" href={routeToWord(word?.slug)}>
                        {word?.wordProperties?.berlinerisch}
                      </a>
                    </li>
                  );
                })}
            </ul>
          </div>
        )
      }
    </main>

    {
      wordProps?.images && (
        <section class="c-single-word__gallery-wrap">
          <h2>Bilder:</h2>
          <ImageGallery
            images={wordProps?.images}
            lightboxSizes={lightboxSizes}
            lightboxWidths={lightboxWidths}
            loading="eager"
            sizes={gallerySizes}
            widths={galleryWidths}
          />
        </section>
      )
    }

    {
      wordProps?.learnMore && (
        <a
          class="c-single-word__learn-more-link"
          href={wordProps?.learnMore}
          target="_blank"
          title="mehr zu diesen Wort auf Wikipedia"
        >
          Erfahre mehr über dieses Wort
          <span class="c-single-word__learn-more-link-icon">
            <ExternalLink height="10" width="10" />
          </span>
        </a>
      )
    }

    <footer class="c-single-word__footer">
      {
        word?.dateGmt && (
          <p class="c-single-word__created">Wort erstellt am: {formattedDate(word.dateGmt)}</p>
        )
      }
      {
        word?.modifiedGmt && (
          <p class="c-single-word__modified">Bearbeitet am: {formattedDate(word.modifiedGmt)}</p>
        )
      }
    </footer>
  </article>

  <RelatedWords words={allWords}>
    <li>
      <RandomWordButton class:list="c-related-words__word is-random" words={allWords} />
    </li>
  </RelatedWords>
</Layout>
