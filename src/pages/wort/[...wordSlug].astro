---
// Styles
import "@styles/objects/_word.scss";
import "@styles/components/_single-word.scss";
import "@styles/plugins/astro-breadcrumbs.scss";

// Imports
import { getAllWords } from "@services/api.ts";
import Layout from "@layouts/Layout.astro";
import Info from "~icons/lucide/info";
import ExternalLink from "~icons/lucide/external-link";
import ChevronRight from "~icons/lucide/chevron-right";
import WordExamples from "@components/word/WordExamples.vue";
import IsWordOfTheDay from "@components/word/IsWordOfTheDay.vue";
import RelatedWords from "@components/RelatedWords.vue";
import RandomWordButton from "@components/RandomWordButton.vue";
import { routeToWord, seoData } from "@utils/helpers.ts";
import { Breadcrumbs } from "astro-breadcrumbs";
import { Picture } from "astro:assets";
import { fetchWikimediaAPI } from "@services/wikimediaApi.ts";
import WordOptionDropdown from "@components/word/WordOptionDropdown.vue";
import ImageGallery from "@components/ImageGallery.astro";

// Types
import type { InferGetStaticParamsType, InferGetStaticPropsType } from "astro";
import type { BerlinerWord } from "@ts_types/generated/graphql.ts";

export const getStaticPaths = async () => {
  const allWords = await getAllWords();

  return allWords.map(({ node }) => {
    return {
      params: {
        wordSlug: node.slug,
      },
      props: {
        word: node as BerlinerWord,
        allWords: allWords.map((word) => word.node),
      },
    };
  });
};

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { wordSlug } = Astro.params as Params;
const { word, allWords } = Astro.props as Props;

const wordProps: BerlinerWord["wordProperties"] = word.wordProperties;
// console.log(wordProps);

const formattedDate = (date: string, locale = "de-DE") => {
  if (!date) return;
  const dateToFormat = new Date(date);

  return dateToFormat.toLocaleString(locale, { year: "numeric", month: "long", day: "numeric" });
};

const alternativeWords = wordProps?.alternativeWords?.map((word, index) => {
  return (
    word?.alternativeWord +
    (wordProps?.alternativeWords && index !== wordProps?.alternativeWords?.length - 1 ? ", " : "")
  );
});

/**
 * TODO: Fix RelatedWords (allways returns null)
 */
// console.log(wordProps?.relatedWords?.nodes);

/**
 * Create a list of all wikimedia files
 */
const createWikimediaFileList = async () => {
  if (!wordProps?.wikimediaFiles) return;

  let files = [];
  for (const file of wordProps?.wikimediaFiles!) {
    const img = await fetchWikimediaAPI(file?.wikimediaFile!);
    files.push({ image: img, description: file?.description, caption: file?.caption });
  }
  return files;
};

const wikimediaFiles = await createWikimediaFileList();
// console.log(wikimediaFiles);

let galleryWidths = [316, 457, 658, 429, 525];
let gallerySizes =
  "(max-width: 80rem) 525px, (max-width: 64rem) 429px, (max-width: 48rem) 658px, (max-width: 35.49rem) 457px, (max-width: 26.6rem) 316px";
const lightboxWidths = [425, 567, 768, 896];
const lightboxSizes =
  "(max-width: 26.6rem) 425px, (max-width: 35.49rem) 567px, (max-width: 48rem) 768px, (max-width: 64rem) 896px";

if (wordProps?.images && wordProps?.images?.nodes.length > 1) {
  galleryWidths = [503, 435, 307];
  gallerySizes =
    "(max-width: 70rem) 503px, (max-width: 64rem) 435px, (max-width: 48rem) 307px, (max-width: 35.5rem) 435px, (max-width: 27.2rem) 307px";
}
---

<Layout content={seoData(word)} contentClasses="o-word">
  <Breadcrumbs indexText="start" truncated={true}>
    <ChevronRight slot="separator" width="20" height="20" />
  </Breadcrumbs>

  <article class="c-single-word">
    <header class="c-single-word__header">
      <IsWordOfTheDay
        wordId={word.berlinerWordId}
        word={wordProps?.berlinerisch}
        client:only="vue"
      />

      <h1 class="c-single-word__word">
        {wordProps?.berlinerisch}

        {
          wordProps?.article && (
            <span class="c-single-word__word-article">, {wordProps.article}</span>
          )
        }
      </h1>
      <WordOptionDropdown word={word} client:only="vue" />
    </header>
    <main class="c-single-word__main">
      {
        wordProps?.alternativeWords && (
          <div class="c-single-word__alternative-words-wrapper">
            <h2>Selbe Bedeutung wie:</h2>
            <p class="c-single-word__alternative-word">{alternativeWords}</p>
          </div>
        )
      }

      {
        wordProps?.learnMore && (
          <div class="c-single-word__learn-more-wrapper">
            <Info />
            <a href={wordProps?.learnMore} target="_blank" class="c-single-word__learn-more-link">
              Erfahre mehr Ã¼ber dieses Wort
              <span class="c-single-word__learn-more-link-icon">
                <ExternalLink width="10" height="10" />
              </span>
            </a>
          </div>
        )
      }

      {
        word?.berlinerischWordTypes && word?.berlinerischWordTypes.nodes.length > 0 && (
          <div class="c-single-word__word-type-wrapper">
            <h2 class="c-single-word__sub-headline">Wortart:</h2>
            <p class="c-single-word__word-type">{word?.berlinerischWordTypes.nodes[0].name}</p>
          </div>
        )
      }

      <div class="c-single-word__translation-wrapper">
        {wordProps?.translations && <h2 class="c-single-word__sub-headline">Bedeutung:</h2>}

        <ul class="c-single-word__translation">
          {
            wordProps?.translations?.map((translation) => {
              return <li class="c-single-word__translation-item">{translation?.translation}</li>;
            })
          }
        </ul>
      </div>

      {
        wordProps?.examples && (
          <div class="c-single-word__examples-wrapper">
            <h2 class="c-single-word__sub-headline">Beispiele:</h2>
            <WordExamples
              examples={wordProps.examples}
              rootBemClass="c-single-word"
              client:only="vue"
            />
          </div>
        )
      }

      {
        wordProps?.relatedWords?.nodes && wordProps?.relatedWords?.nodes.length > 0 && (
          <div class="c-single-word__related-words-wrapper">
            <h3>Verwandte Worte:</h3>
            <ul class="c-single-word__related-words-list">
              {wordProps.relatedWords.nodes.map((word): BerlinerWord[] => {
                return (
                  <li class="c-single-word__related-word">
                    <a href={routeToWord(word?.slug!)} class="c-single-word__related-word-link">
                      {word?.wordProperties?.berlinerisch}
                    </a>
                  </li>
                );
              })}
            </ul>
          </div>
        )
      }
    </main>

    {
      wordProps?.images && (
        <section class="c-single-word__gallery-wrap">
          <h2>Bilder:</h2>
          <ImageGallery
            images={wordProps?.images}
            widths={galleryWidths}
            sizes={gallerySizes}
            lightboxWidths={lightboxWidths}
            lightboxSizes={lightboxSizes}
            loading="eager"
          />
        </section>
      )
    }

    <footer class="c-single-word__footer">
      <p class="c-single-word__created">
        Wort erstellt am: {formattedDate(word.dateGmt!)}
      </p>
      <p class="c-single-word__modified">
        Bearbeitet am: {formattedDate(word.modifiedGmt!)}
      </p>
    </footer>
  </article>

  <RelatedWords words={allWords}>
    <RandomWordButton words={allWords} class:list="c-related-words__word is-random" />
  </RelatedWords>
</Layout>
