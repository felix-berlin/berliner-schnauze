schema {
  query: RootQuery
  mutation: RootMutation
}

"""
acf/code-highlighting block
"""
type AcfCodeHighlightingBlock implements Block {
  attributes: AcfCodeHighlightingBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type AcfCodeHighlightingBlockAttributes {
  align: String
  anchor: String
  className: String
  data: BlockAttributesObject
  lock: BlockAttributesObject
  mode: String
  name: String
}

"""
Connection between the WordProperties_Fields type and the ContentNode type
"""
type AcfContentNodeConnection implements Connection & ContentNodeConnection {
  """
  Edges for the AcfContentNodeConnection connection
  """
  edges: [AcfContentNodeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ContentNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: AcfContentNodeConnectionPageInfo!
}

"""
An edge in a connection
"""
type AcfContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ContentNode!
}

"""
Pagination metadata specific to &quot;AcfContentNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of AcfContentNodeConnection Nodes.
"""
type AcfContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
A Field Group managed by ACF
"""
interface AcfFieldGroup {
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"""
Fields associated with an ACF Field Group
"""
interface AcfFieldGroupFields {
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"""
acf/github-raw-data block
"""
type AcfGithubRawDataBlock implements Block {
  attributes: AcfGithubRawDataBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type AcfGithubRawDataBlockAttributes {
  align: String
  anchor: String
  className: String
  data: BlockAttributesObject
  lock: BlockAttributesObject
  mode: String
  name: String
}

"""
ACF Link field
"""
type AcfLink {
  """
  The target of the link (_blank, etc)
  """
  target: String
  """
  The title of the link
  """
  title: String
  """
  The url of the link
  """
  url: String
}

"""
Connection between the WordProperties_Fields type and the MediaItem type
"""
type AcfMediaItemConnection implements Connection & MediaItemConnection {
  """
  Edges for the AcfMediaItemConnection connection
  """
  edges: [AcfMediaItemConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [MediaItem!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: AcfMediaItemConnectionPageInfo!
}

"""
Connection between the WordPropertiesBerlinerischAudio_Fields type and the MediaItem type
"""
type AcfMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: MediaItem!
}

"""
Pagination metadata specific to &quot;AcfMediaItemConnection&quot; collections. Provides cursors and flags for navigating through sets of AcfMediaItemConnection Nodes.
"""
type AcfMediaItemConnectionPageInfo implements MediaItemConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Options Page registered by ACF
"""
interface AcfOptionsPage implements Node {
  """
  The globally unique ID for the object
  """
  id: ID!
  menuTitle: String
  pageTitle: String
  parentId: String
}

"""
Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from.
"""
type Avatar {
  """
  TEST: URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo).
  """
  default: String
  """
  HTML attributes to insert in the IMG element. Is not sanitized.
  """
  extraAttr: String
  """
  Whether to always show the default image, never the Gravatar.
  """
  forceDefault: Boolean
  """
  Whether the avatar was successfully found.
  """
  foundAvatar: Boolean
  """
  Height of the avatar image.
  """
  height: Int
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order.
  """
  rating: String
  """
  Type of url scheme to use. Typically HTTP vs. HTTPS.
  """
  scheme: String
  """
  The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image.
  """
  size: Int
  """
  URL for the gravatar image source.
  """
  url: String
  """
  Width of the avatar image.
  """
  width: Int
}

"""
Content rating filter for user avatars. Determines the maximum maturity level of avatars to display, following standard content rating classifications (G, PG, R, X).
"""
enum AvatarRatingEnum {
  """
  Indicates a G level avatar rating level.
  """
  G
  """
  Indicates a PG level avatar rating level.
  """
  PG
  """
  Indicates an R level avatar rating level.
  """
  R
  """
  Indicates an X level avatar rating level.
  """
  X
}

"""
Berlinerische WÃ¶rter
"""
type BerlinerWord implements ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & MenuItemLinkable & Node & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable & WithAcfWordProperties {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection
  """
  The id field matches the WP_Post-&gt;ID field.
  """
  berlinerWordId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  """
  Connection between the BerlinerWord type and the berlinerischWordType type
  """
  berlinerischWordTypes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: BerlinerWordToBerlinerischWordTypeConnectionWhereArgs
  ): BerlinerWordToBerlinerischWordTypeConnection
  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  children(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection
  """
  Connection between the ContentNode type and the ContentType type
  """
  contentType: ContentNodeToContentTypeConnectionEdge
  """
  The name of the Content Type the node belongs to
  """
  contentTypeName: String!
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  Post publishing date.
  """
  date: String
  """
  The publishing date set in GMT.
  """
  dateGmt: String
  """
  The desired slug of the post
  """
  desiredSlug: String
  """
  If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  """
  The RSS enclosure for the object
  """
  enclosure: String
  """
  Connection between the ContentNode type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String
  """
  Whether the berlinerisch object is password protected.
  """
  hasPassword: Boolean
  """
  The globally unique identifier of the berlinerisch object.
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is a node in the preview state
  """
  isPreview: Boolean
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The user that most recently edited the node
  """
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  """
  The permalink of the post
  """
  link: String
  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String
  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String
  """
  The parent of the node. The parent object can be of various types
  """
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  """
  Database id of the parent node
  """
  parentDatabaseId: Int
  """
  The globally unique identifier of the parent node.
  """
  parentId: ID
  """
  The password for the berlinerisch object.
  """
  password: String
  """
  Connection between the BerlinerWord type and the berlinerWord type
  """
  preview: BerlinerWordToPreviewConnectionEdge
  """
  The database id of the preview node
  """
  previewRevisionDatabaseId: Int
  """
  Whether the object is a node in the preview state
  """
  previewRevisionId: ID
  """
  The Yoast SEO data of the ContentNode
  """
  seo: PostTypeSEO
  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String
  """
  The current status of the object
  """
  status: String
  """
  The template assigned to a node of content
  """
  template: ContentTemplate
  """
  Connection between the BerlinerWord type and the TermNode type
  """
  terms(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: BerlinerWordToTermNodeConnectionWhereArgs
  ): BerlinerWordToTermNodeConnection
  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  The unique resource identifier path
  """
  uri: String
  """
  Example field added to the Post Type
  """
  wordGroup: String
  """
  Fields of the WordProperties ACF Field Group
  """
  wordProperties: WordProperties
}

"""
Set relationships between the berlinerWord to berlinerischWordTypes
"""
input BerlinerWordBerlinerischWordTypesInput {
  """
  If true, this will append the berlinerischWordType to existing related berlinerischWordTypes. If false, this will replace existing relationships. Default true.
  """
  append: Boolean
  """
  The input list of items to set.
  """
  nodes: [BerlinerWordBerlinerischWordTypesNodeInput]
}

"""
List of berlinerischWordTypes to connect the berlinerWord to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists.
"""
input BerlinerWordBerlinerischWordTypesNodeInput {
  """
  The description of the berlinerischWordType. This field is used to set a description of the berlinerischWordType if a new one is created during the mutation.
  """
  description: String
  """
  The ID of the berlinerischWordType. If present, this will be used to connect to the berlinerWord. If no existing berlinerischWordType exists with this ID, no connection will be made.
  """
  id: ID
  """
  The name of the berlinerischWordType. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field.
  """
  name: String
  """
  The slug of the berlinerischWordType. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""
A paginated collection of berlinerWord Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of berlinerWord Nodes
"""
interface BerlinerWordConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected berlinerWord Nodes
  """
  edges: [BerlinerWordConnectionEdge!]!
  """
  A list of connected berlinerWord Nodes
  """
  nodes: [BerlinerWord!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: BerlinerWordConnectionPageInfo!
}

"""
Represents a connection to a berlinerWord. Contains both the berlinerWord Node and metadata about the relationship.
"""
interface BerlinerWordConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected berlinerWord Node
  """
  node: BerlinerWord!
}

"""
Pagination metadata specific to &quot;BerlinerWordConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;BerlinerWordConnectionEdge&quot; Nodes.
"""
interface BerlinerWordConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Identifier types for retrieving a specific BerlinerWord. Specifies which unique attribute is used to find an exact BerlinerWord.
"""
enum BerlinerWordIdType {
  """
  Identify a resource by the Database ID.
  """
  DATABASE_ID
  """
  Identify a resource by the (hashed) Global ID.
  """
  ID
  """
  Identify a resource by the URI.
  """
  URI
}

"""
Connection between the BerlinerWord type and the berlinerischWordType type
"""
type BerlinerWordToBerlinerischWordTypeConnection implements BerlinerischWordTypeConnection & Connection {
  """
  Edges for the BerlinerWordToBerlinerischWordTypeConnection connection
  """
  edges: [BerlinerWordToBerlinerischWordTypeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [BerlinerischWordType!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: BerlinerWordToBerlinerischWordTypeConnectionPageInfo!
}

"""
An edge in a connection
"""
type BerlinerWordToBerlinerischWordTypeConnectionEdge implements BerlinerischWordTypeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The Yoast SEO Primary berlinerisch_word_type
  """
  isPrimary: Boolean
  """
  The item at the end of the edge
  """
  node: BerlinerischWordType!
}

"""
Pagination metadata specific to &quot;BerlinerWordToBerlinerischWordTypeConnection&quot; collections. Provides cursors and flags for navigating through sets of BerlinerWordToBerlinerischWordTypeConnection Nodes.
"""
type BerlinerWordToBerlinerischWordTypeConnectionPageInfo implements BerlinerischWordTypeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the BerlinerWordToBerlinerischWordTypeConnection connection
"""
input BerlinerWordToBerlinerischWordTypeConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String
  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int
  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean
  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String
  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]
  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]
  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean
  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean
  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]
  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]
  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String
  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]
  """
  Direction the connection should be ordered in
  """
  order: OrderEnum
  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum
  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean
  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int
  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String
  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]
  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomyId: [ID]
  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the BerlinerWord type and the berlinerWord type
"""
type BerlinerWordToPreviewConnectionEdge implements BerlinerWordConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: BerlinerWord!
}

"""
Connection between the BerlinerWord type and the TermNode type
"""
type BerlinerWordToTermNodeConnection implements Connection & TermNodeConnection {
  """
  Edges for the BerlinerWordToTermNodeConnection connection
  """
  edges: [BerlinerWordToTermNodeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [TermNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: BerlinerWordToTermNodeConnectionPageInfo!
}

"""
An edge in a connection
"""
type BerlinerWordToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: TermNode!
}

"""
Pagination metadata specific to &quot;BerlinerWordToTermNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of BerlinerWordToTermNodeConnection Nodes.
"""
type BerlinerWordToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the BerlinerWordToTermNodeConnection connection
"""
input BerlinerWordToTermNodeConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String
  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int
  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean
  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String
  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]
  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]
  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean
  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean
  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]
  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]
  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String
  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]
  """
  Direction the connection should be ordered in
  """
  order: OrderEnum
  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum
  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean
  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int
  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String
  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]
  """
  The Taxonomy to filter terms by
  """
  taxonomies: [TaxonomyEnum]
  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomyId: [ID]
  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
The berlinerischWordType type
"""
type BerlinerischWordType implements DatabaseIdentifier & HierarchicalNode & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
  """
  The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): BerlinerischWordTypeToAncestorsBerlinerischWordTypeConnection
  """
  Connection between the BerlinerischWordType type and the berlinerWord type
  """
  berlinerWords(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: BerlinerischWordTypeToBerlinerWordConnectionWhereArgs
  ): BerlinerischWordTypeToBerlinerWordConnection
  """
  The id field matches the WP_Post-&gt;ID field.
  """
  berlinerischWordTypeId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  """
  Connection between the berlinerischWordType type and its children berlinerischWordTypes.
  """
  children(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: BerlinerischWordTypeToBerlinerischWordTypeConnectionWhereArgs
  ): BerlinerischWordTypeToBerlinerischWordTypeConnection
  """
  Connection between the BerlinerischWordType type and the ContentNode type
  """
  contentNodes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: BerlinerischWordTypeToContentNodeConnectionWhereArgs
  ): BerlinerischWordTypeToContentNodeConnection
  """
  The number of objects connected to the object
  """
  count: Int
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  The description of the object
  """
  description: String
  """
  Connection between the TermNode type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  """
  Connection between the TermNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The link to the term
  """
  link: String
  """
  The human friendly name of the object.
  """
  name: String
  """
  Connection between the berlinerischWordType type and its parent berlinerischWordType.
  """
  parent: BerlinerischWordTypeToParentBerlinerischWordTypeConnectionEdge
  """
  Database id of the parent node
  """
  parentDatabaseId: Int
  """
  The globally unique identifier of the parent node.
  """
  parentId: ID
  """
  The Yoast SEO data of the Wortarten taxonomy.
  """
  seo: TaxonomySEO
  """
  An alphanumeric identifier for the object unique to its type.
  """
  slug: String
  """
  Connection between the BerlinerischWordType type and the Taxonomy type
  """
  taxonomy: BerlinerischWordTypeToTaxonomyConnectionEdge
  """
  The name of the taxonomy that the object is associated with
  """
  taxonomyName: String
  """
  The ID of the term group that this term object belongs to
  """
  termGroupId: Int
  """
  The taxonomy ID that the object is associated with
  """
  termTaxonomyId: Int
  """
  The unique resource identifier path
  """
  uri: String
}

"""
A paginated collection of berlinerischWordType Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of berlinerischWordType Nodes
"""
interface BerlinerischWordTypeConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected berlinerischWordType Nodes
  """
  edges: [BerlinerischWordTypeConnectionEdge!]!
  """
  A list of connected berlinerischWordType Nodes
  """
  nodes: [BerlinerischWordType!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: BerlinerischWordTypeConnectionPageInfo!
}

"""
Represents a connection to a berlinerischWordType. Contains both the berlinerischWordType Node and metadata about the relationship.
"""
interface BerlinerischWordTypeConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected berlinerischWordType Node
  """
  node: BerlinerischWordType!
}

"""
Pagination metadata specific to &quot;BerlinerischWordTypeConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;BerlinerischWordTypeConnectionEdge&quot; Nodes.
"""
interface BerlinerischWordTypeConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Identifier types for retrieving a specific BerlinerischWordType. Determines which unique property (global ID, database ID, slug, etc.) is used to locate the BerlinerischWordType.
"""
enum BerlinerischWordTypeIdType {
  """
  The Database ID for the node
  """
  DATABASE_ID
  """
  The hashed Global ID
  """
  ID
  """
  The name of the node
  """
  NAME
  """
  Url friendly name of the node
  """
  SLUG
  """
  The URI for the node
  """
  URI
}

"""
Connection between the BerlinerischWordType type and the berlinerischWordType type
"""
type BerlinerischWordTypeToAncestorsBerlinerischWordTypeConnection implements BerlinerischWordTypeConnection & Connection {
  """
  Edges for the BerlinerischWordTypeToAncestorsBerlinerischWordTypeConnection connection
  """
  edges: [BerlinerischWordTypeToAncestorsBerlinerischWordTypeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [BerlinerischWordType!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: BerlinerischWordTypeToAncestorsBerlinerischWordTypeConnectionPageInfo!
}

"""
An edge in a connection
"""
type BerlinerischWordTypeToAncestorsBerlinerischWordTypeConnectionEdge implements BerlinerischWordTypeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: BerlinerischWordType!
}

"""
Pagination metadata specific to &quot;BerlinerischWordTypeToAncestorsBerlinerischWordTypeConnection&quot; collections. Provides cursors and flags for navigating through sets of BerlinerischWordTypeToAncestorsBerlinerischWordTypeConnection Nodes.
"""
type BerlinerischWordTypeToAncestorsBerlinerischWordTypeConnectionPageInfo implements BerlinerischWordTypeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the BerlinerischWordType type and the berlinerWord type
"""
type BerlinerischWordTypeToBerlinerWordConnection implements BerlinerWordConnection & Connection {
  """
  Edges for the BerlinerischWordTypeToBerlinerWordConnection connection
  """
  edges: [BerlinerischWordTypeToBerlinerWordConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [BerlinerWord!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: BerlinerischWordTypeToBerlinerWordConnectionPageInfo!
}

"""
An edge in a connection
"""
type BerlinerischWordTypeToBerlinerWordConnectionEdge implements BerlinerWordConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: BerlinerWord!
}

"""
Pagination metadata specific to &quot;BerlinerischWordTypeToBerlinerWordConnection&quot; collections. Provides cursors and flags for navigating through sets of BerlinerischWordTypeToBerlinerWordConnection Nodes.
"""
type BerlinerischWordTypeToBerlinerWordConnectionPageInfo implements BerlinerWordConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the BerlinerischWordTypeToBerlinerWordConnection connection
"""
input BerlinerischWordTypeToBerlinerWordConnectionWhereArgs {
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the BerlinerischWordType type and the berlinerischWordType type
"""
type BerlinerischWordTypeToBerlinerischWordTypeConnection implements BerlinerischWordTypeConnection & Connection {
  """
  Edges for the BerlinerischWordTypeToBerlinerischWordTypeConnection connection
  """
  edges: [BerlinerischWordTypeToBerlinerischWordTypeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [BerlinerischWordType!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: BerlinerischWordTypeToBerlinerischWordTypeConnectionPageInfo!
}

"""
An edge in a connection
"""
type BerlinerischWordTypeToBerlinerischWordTypeConnectionEdge implements BerlinerischWordTypeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: BerlinerischWordType!
}

"""
Pagination metadata specific to &quot;BerlinerischWordTypeToBerlinerischWordTypeConnection&quot; collections. Provides cursors and flags for navigating through sets of BerlinerischWordTypeToBerlinerischWordTypeConnection Nodes.
"""
type BerlinerischWordTypeToBerlinerischWordTypeConnectionPageInfo implements BerlinerischWordTypeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the BerlinerischWordTypeToBerlinerischWordTypeConnection connection
"""
input BerlinerischWordTypeToBerlinerischWordTypeConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String
  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int
  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean
  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String
  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]
  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]
  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean
  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean
  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]
  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]
  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String
  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]
  """
  Direction the connection should be ordered in
  """
  order: OrderEnum
  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum
  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean
  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int
  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String
  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]
  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomyId: [ID]
  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the BerlinerischWordType type and the ContentNode type
"""
type BerlinerischWordTypeToContentNodeConnection implements Connection & ContentNodeConnection {
  """
  Edges for the BerlinerischWordTypeToContentNodeConnection connection
  """
  edges: [BerlinerischWordTypeToContentNodeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ContentNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: BerlinerischWordTypeToContentNodeConnectionPageInfo!
}

"""
An edge in a connection
"""
type BerlinerischWordTypeToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ContentNode!
}

"""
Pagination metadata specific to &quot;BerlinerischWordTypeToContentNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of BerlinerischWordTypeToContentNodeConnection Nodes.
"""
type BerlinerischWordTypeToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the BerlinerischWordTypeToContentNodeConnection connection
"""
input BerlinerischWordTypeToContentNodeConnectionWhereArgs {
  """
  The Types of content to filter
  """
  contentTypes: [ContentTypesOfBerlinerischWordTypeEnum]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the BerlinerischWordType type and the berlinerischWordType type
"""
type BerlinerischWordTypeToParentBerlinerischWordTypeConnectionEdge implements BerlinerischWordTypeConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: BerlinerischWordType!
}

"""
Connection between the BerlinerischWordType type and the Taxonomy type
"""
type BerlinerischWordTypeToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: Taxonomy!
}

"""
Gutenberg block interface
"""
interface Block {
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

scalar BlockAttributesArray

scalar BlockAttributesObject

"""
Gutenberg post interface
"""
interface BlockEditorContentNode implements Node {
  """
  Gutenberg blocks
  """
  blocks: [Block!]
  """
  Gutenberg blocks as json string
  """
  blocksJSON: String
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  Previewed gutenberg blocks
  """
  previewBlocks: [Block!]
  """
  Previewed Gutenberg blocks as json string
  """
  previewBlocksJSON: String
}

"""
A paginated collection of BlockEditorContentNode Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of BlockEditorContentNode Nodes
"""
interface BlockEditorContentNodeConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected BlockEditorContentNode Nodes
  """
  edges: [BlockEditorContentNodeConnectionEdge!]!
  """
  A list of connected BlockEditorContentNode Nodes
  """
  nodes: [BlockEditorContentNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: BlockEditorContentNodeConnectionPageInfo!
}

"""
Represents a connection to a BlockEditorContentNode. Contains both the BlockEditorContentNode Node and metadata about the relationship.
"""
interface BlockEditorContentNodeConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected BlockEditorContentNode Node
  """
  node: BlockEditorContentNode!
}

"""
Pagination metadata specific to &quot;BlockEditorContentNodeConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;BlockEditorContentNodeConnectionEdge&quot; Nodes.
"""
interface BlockEditorContentNodeConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the BlockEditorContentNodeConnection connection
"""
input BlockEditorContentNodeConnectionWhereArgs {
  """
  The Types of content to filter
  """
  contentTypes: [ContentTypeEnum]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
The BlockEditorPreview type
"""
type BlockEditorPreview implements ContentNode & DatabaseIdentifier & Node & NodeWithAuthor & NodeWithContentEditor & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  """
  The ancestors of the content node.
  """
  ancestors(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): BlockEditorPreviewToBlockEditorPreviewConnection
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have ancestors"
    )
  """
  Connection between the NodeWithAuthor type and the User type
  """
  author: NodeWithAuthorToUserConnectionEdge
  """
  The database identifier of the author of the node
  """
  authorDatabaseId: Int
  """
  The globally unique identifier of the author of the node
  """
  authorId: ID
  """
  The id field matches the WP_Post-&gt;ID field.
  """
  blockEditorPreviewId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  blocks: [Block!]
  blocksJSON: String
  """
  The content of the post.
  """
  content(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  Connection between the ContentNode type and the ContentType type
  """
  contentType: ContentNodeToContentTypeConnectionEdge
  """
  The name of the Content Type the node belongs to
  """
  contentTypeName: String!
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  Post publishing date.
  """
  date: String
  """
  The publishing date set in GMT.
  """
  dateGmt: String
  """
  The desired slug of the post
  """
  desiredSlug: String
  """
  If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  """
  The RSS enclosure for the object
  """
  enclosure: String
  """
  Connection between the ContentNode type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String
  """
  Whether the wgg_preview object is password protected.
  """
  hasPassword: Boolean
  """
  The globally unique identifier of the wgg_preview object.
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is a node in the preview state
  """
  isPreview: Boolean
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The user that most recently edited the node
  """
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  lastUpdateTime: String
  """
  The permalink of the post
  """
  link: String
  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String
  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String
  """
  The parent of the content node.
  """
  parent: BlockEditorPreviewToParentConnectionEdge
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have a parent"
    )
  """
  The password for the wgg_preview object.
  """
  password: String
  """
  Connection between the BlockEditorPreview type and the BlockEditorPreview type
  """
  preview: BlockEditorPreviewToPreviewConnectionEdge
    @deprecated(
      reason: "The &quot;BlockEditorPreview&quot; Type is not publicly queryable and does not support previews. This field will be removed in the future."
    )
  """
  The database id of the preview node
  """
  previewRevisionDatabaseId: Int
  """
  Whether the object is a node in the preview state
  """
  previewRevisionId: ID
  previewed: BlockEditorContentNode
  previewedDatabaseId: Int
  previewedParentDatabaseId: Int
  """
  The Yoast SEO data of the ContentNode
  """
  seo: PostTypeSEO
  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String
  """
  The current status of the object
  """
  status: String
  """
  The template assigned to the node
  """
  template: ContentTemplate
  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  The unique resource identifier path
  """
  uri: String
}

"""
A paginated collection of BlockEditorPreview Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of BlockEditorPreview Nodes
"""
interface BlockEditorPreviewConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected BlockEditorPreview Nodes
  """
  edges: [BlockEditorPreviewConnectionEdge!]!
  """
  A list of connected BlockEditorPreview Nodes
  """
  nodes: [BlockEditorPreview!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: BlockEditorPreviewConnectionPageInfo!
}

"""
Represents a connection to a BlockEditorPreview. Contains both the BlockEditorPreview Node and metadata about the relationship.
"""
interface BlockEditorPreviewConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected BlockEditorPreview Node
  """
  node: BlockEditorPreview!
}

"""
Pagination metadata specific to &quot;BlockEditorPreviewConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;BlockEditorPreviewConnectionEdge&quot; Nodes.
"""
interface BlockEditorPreviewConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Identifier types for retrieving a specific BlockEditorPreview. Specifies which unique attribute is used to find an exact BlockEditorPreview.
"""
enum BlockEditorPreviewIdType {
  """
  Identify a resource by the Database ID.
  """
  DATABASE_ID
  """
  Identify a resource by the (hashed) Global ID.
  """
  ID
  """
  Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier.
  """
  SLUG
  """
  Identify a resource by the URI.
  """
  URI
}

"""
Connection between the BlockEditorPreview type and the BlockEditorPreview type
"""
type BlockEditorPreviewToBlockEditorPreviewConnection implements BlockEditorPreviewConnection & Connection {
  """
  Edges for the BlockEditorPreviewToBlockEditorPreviewConnection connection
  """
  edges: [BlockEditorPreviewToBlockEditorPreviewConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [BlockEditorPreview!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: BlockEditorPreviewToBlockEditorPreviewConnectionPageInfo!
}

"""
An edge in a connection
"""
type BlockEditorPreviewToBlockEditorPreviewConnectionEdge implements BlockEditorPreviewConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have ancestors"
    )
  """
  The item at the end of the edge
  """
  node: BlockEditorPreview!
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have ancestors"
    )
}

"""
Pagination metadata specific to &quot;BlockEditorPreviewToBlockEditorPreviewConnection&quot; collections. Provides cursors and flags for navigating through sets of BlockEditorPreviewToBlockEditorPreviewConnection Nodes.
"""
type BlockEditorPreviewToBlockEditorPreviewConnectionPageInfo implements BlockEditorPreviewConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the BlockEditorPreview type and the BlockEditorPreview type
"""
type BlockEditorPreviewToParentConnectionEdge implements BlockEditorPreviewConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: BlockEditorPreview!
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have a parent"
    )
}

"""
Connection between the BlockEditorPreview type and the BlockEditorPreview type
"""
type BlockEditorPreviewToPreviewConnectionEdge implements BlockEditorPreviewConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: BlockEditorPreview!
    @deprecated(
      reason: "The &quot;BlockEditorPreview&quot; Type is not publicly queryable and does not support previews. This field will be removed in the future."
    )
}

"""
A taxonomy term that classifies content. Categories support hierarchy and can be used to create a nested structure.
"""
type Category implements DatabaseIdentifier & HierarchicalNode & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
  """
  The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): CategoryToAncestorsCategoryConnection
  """
  The id field matches the WP_Post-&gt;ID field.
  """
  categoryId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  """
  Connection between the category type and its children categories.
  """
  children(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: CategoryToCategoryConnectionWhereArgs
  ): CategoryToCategoryConnection
  """
  Connection between the Category type and the ContentNode type
  """
  contentNodes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: CategoryToContentNodeConnectionWhereArgs
  ): CategoryToContentNodeConnection
  """
  The number of objects connected to the object
  """
  count: Int
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  The description of the object
  """
  description: String
  """
  Connection between the TermNode type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  """
  Connection between the TermNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The link to the term
  """
  link: String
  """
  The human friendly name of the object.
  """
  name: String
  """
  Connection between the category type and its parent category.
  """
  parent: CategoryToParentCategoryConnectionEdge
  """
  Database id of the parent node
  """
  parentDatabaseId: Int
  """
  The globally unique identifier of the parent node.
  """
  parentId: ID
  """
  Connection between the Category type and the post type
  """
  posts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: CategoryToPostConnectionWhereArgs
  ): CategoryToPostConnection
  """
  The Yoast SEO data of the Kategorien taxonomy.
  """
  seo: TaxonomySEO
  """
  An alphanumeric identifier for the object unique to its type.
  """
  slug: String
  """
  Connection between the Category type and the Taxonomy type
  """
  taxonomy: CategoryToTaxonomyConnectionEdge
  """
  The name of the taxonomy that the object is associated with
  """
  taxonomyName: String
  """
  The ID of the term group that this term object belongs to
  """
  termGroupId: Int
  """
  The taxonomy ID that the object is associated with
  """
  termTaxonomyId: Int
  """
  The unique resource identifier path
  """
  uri: String
}

"""
A paginated collection of category Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of category Nodes
"""
interface CategoryConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected category Nodes
  """
  edges: [CategoryConnectionEdge!]!
  """
  A list of connected category Nodes
  """
  nodes: [Category!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: CategoryConnectionPageInfo!
}

"""
Represents a connection to a category. Contains both the category Node and metadata about the relationship.
"""
interface CategoryConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected category Node
  """
  node: Category!
}

"""
Pagination metadata specific to &quot;CategoryConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;CategoryConnectionEdge&quot; Nodes.
"""
interface CategoryConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Identifier types for retrieving a specific Category. Determines which unique property (global ID, database ID, slug, etc.) is used to locate the Category.
"""
enum CategoryIdType {
  """
  The Database ID for the node
  """
  DATABASE_ID
  """
  The hashed Global ID
  """
  ID
  """
  The name of the node
  """
  NAME
  """
  Url friendly name of the node
  """
  SLUG
  """
  The URI for the node
  """
  URI
}

"""
Connection between the Category type and the category type
"""
type CategoryToAncestorsCategoryConnection implements CategoryConnection & Connection {
  """
  Edges for the CategoryToAncestorsCategoryConnection connection
  """
  edges: [CategoryToAncestorsCategoryConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Category!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: CategoryToAncestorsCategoryConnectionPageInfo!
}

"""
An edge in a connection
"""
type CategoryToAncestorsCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Category!
}

"""
Pagination metadata specific to &quot;CategoryToAncestorsCategoryConnection&quot; collections. Provides cursors and flags for navigating through sets of CategoryToAncestorsCategoryConnection Nodes.
"""
type CategoryToAncestorsCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the Category type and the category type
"""
type CategoryToCategoryConnection implements CategoryConnection & Connection {
  """
  Edges for the CategoryToCategoryConnection connection
  """
  edges: [CategoryToCategoryConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Category!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: CategoryToCategoryConnectionPageInfo!
}

"""
An edge in a connection
"""
type CategoryToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Category!
}

"""
Pagination metadata specific to &quot;CategoryToCategoryConnection&quot; collections. Provides cursors and flags for navigating through sets of CategoryToCategoryConnection Nodes.
"""
type CategoryToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the CategoryToCategoryConnection connection
"""
input CategoryToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String
  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int
  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean
  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String
  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]
  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]
  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean
  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean
  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]
  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]
  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String
  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]
  """
  Direction the connection should be ordered in
  """
  order: OrderEnum
  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum
  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean
  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int
  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String
  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]
  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomyId: [ID]
  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the Category type and the ContentNode type
"""
type CategoryToContentNodeConnection implements Connection & ContentNodeConnection {
  """
  Edges for the CategoryToContentNodeConnection connection
  """
  edges: [CategoryToContentNodeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ContentNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: CategoryToContentNodeConnectionPageInfo!
}

"""
An edge in a connection
"""
type CategoryToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ContentNode!
}

"""
Pagination metadata specific to &quot;CategoryToContentNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of CategoryToContentNodeConnection Nodes.
"""
type CategoryToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the CategoryToContentNodeConnection connection
"""
input CategoryToContentNodeConnectionWhereArgs {
  """
  The Types of content to filter
  """
  contentTypes: [ContentTypesOfCategoryEnum]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the Category type and the category type
"""
type CategoryToParentCategoryConnectionEdge implements CategoryConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: Category!
}

"""
Connection between the Category type and the post type
"""
type CategoryToPostConnection implements Connection & PostConnection {
  """
  Edges for the CategoryToPostConnection connection
  """
  edges: [CategoryToPostConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Post!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: CategoryToPostConnectionPageInfo!
}

"""
An edge in a connection
"""
type CategoryToPostConnectionEdge implements Edge & PostConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Post!
}

"""
Pagination metadata specific to &quot;CategoryToPostConnection&quot; collections. Provides cursors and flags for navigating through sets of CategoryToPostConnection Nodes.
"""
type CategoryToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the CategoryToPostConnection connection
"""
input CategoryToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int
  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]
  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String
  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]
  """
  Category ID
  """
  categoryId: Int
  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]
  """
  Use Category Slug
  """
  categoryName: String
  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Tag Slug
  """
  tag: String
  """
  Use Tag ID
  """
  tagId: String
  """
  Array of tag IDs, used to display objects from one tag OR another
  """
  tagIn: [ID]
  """
  Array of tag IDs, used to display objects from one tag OR another
  """
  tagNotIn: [ID]
  """
  Array of tag slugs, used to display objects from one tag AND another
  """
  tagSlugAnd: [String]
  """
  Array of tag slugs, used to include objects in ANY specified tags
  """
  tagSlugIn: [String]
  """
  Title of the object
  """
  title: String
}

"""
Connection between the Category type and the Taxonomy type
"""
type CategoryToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: Taxonomy!
}

"""
A response or reaction to content submitted by users. Comments are typically associated with a specific content entry.
"""
type Comment implements DatabaseIdentifier & Node & UniformResourceIdentifiable {
  """
  User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL.
  """
  agent: String
  """
  The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL.
  """
  approved: Boolean @deprecated(reason: "Deprecated in favor of the `status` field")
  """
  The author of the comment
  """
  author: CommentToCommenterConnectionEdge
  """
  IP address for the author at the time of commenting. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL.
  """
  authorIp: String
    @deprecated(reason: "Use the ipAddress field on the edge between the comment and author")
  """
  ID for the comment, unique among comments.
  """
  commentId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  """
  Connection between the Comment type and the ContentNode type
  """
  commentedOn: CommentToContentNodeConnectionEdge
  """
  Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL.
  """
  content(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL.
  """
  date: String
  """
  Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL.
  """
  dateGmt: String
  """
  The globally unique identifier for the comment object
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL.
  """
  karma: Int
  """
  The permalink of the comment
  """
  link: String
  """
  Connection between the Comment type and the Comment type
  """
  parent(
    """
    Arguments for filtering the connection
    """
    where: CommentToParentCommentConnectionWhereArgs
  ): CommentToParentCommentConnectionEdge
  """
  The database id of the parent comment node or null if it is the root comment
  """
  parentDatabaseId: Int
  """
  The globally unique identifier of the parent comment node.
  """
  parentId: ID
  """
  Connection between the Comment type and the Comment type
  """
  replies(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: CommentToCommentConnectionWhereArgs
  ): CommentToCommentConnection
  """
  The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL.
  """
  status: CommentStatusEnum
  """
  Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL.
  """
  type: String
  """
  The unique resource identifier path
  """
  uri: String
}

"""
A Comment Author object
"""
type CommentAuthor implements Commenter & DatabaseIdentifier & Node {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar(
    """
    Whether to always show the default image, never the Gravatar. Default false
    """
    forceDefault: Boolean
    """
    The rating level of the avatar.
    """
    rating: AvatarRatingEnum
    """
    The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels.
    """
    size: Int = 96
  ): Avatar
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  The email for the comment author
  """
  email: String
  """
  The globally unique identifier for the comment author object
  """
  id: ID!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  The name for the comment author.
  """
  name: String
  """
  The url the comment author.
  """
  url: String
}

"""
A paginated collection of Comment Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of Comment Nodes
"""
interface CommentConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected Comment Nodes
  """
  edges: [CommentConnectionEdge!]!
  """
  A list of connected Comment Nodes
  """
  nodes: [Comment!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: CommentConnectionPageInfo!
}

"""
Represents a connection to a Comment. Contains both the Comment Node and metadata about the relationship.
"""
interface CommentConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected Comment Node
  """
  node: Comment!
}

"""
Pagination metadata specific to &quot;CommentConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;CommentConnectionEdge&quot; Nodes.
"""
interface CommentConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Identifier types for retrieving a specific comment. Specifies which unique attribute is used to find a particular comment.
"""
enum CommentNodeIdTypeEnum {
  """
  Identify a resource by the Database ID.
  """
  DATABASE_ID
  """
  Identify a resource by the (hashed) Global ID.
  """
  ID
}

"""
Moderation state for user comments. Determines whether comments are publicly visible, pending approval, or marked as spam.
"""
enum CommentStatusEnum {
  """
  Comments with the Freigegeben status
  """
  APPROVE
  """
  Comments with the Nicht freigegeben status
  """
  HOLD
  """
  Comments with the Spam status
  """
  SPAM
  """
  Comments with the Papierkorb status
  """
  TRASH
}

"""
Connection between the Comment type and the Comment type
"""
type CommentToCommentConnection implements CommentConnection & Connection {
  """
  Edges for the CommentToCommentConnection connection
  """
  edges: [CommentToCommentConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Comment!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: CommentToCommentConnectionPageInfo!
}

"""
An edge in a connection
"""
type CommentToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Comment!
}

"""
Pagination metadata specific to &quot;CommentToCommentConnection&quot; collections. Provides cursors and flags for navigating through sets of CommentToCommentConnection Nodes.
"""
type CommentToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the CommentToCommentConnection connection
"""
input CommentToCommentConnectionWhereArgs {
  """
  Comment author email address.
  """
  authorEmail: String
  """
  Array of author IDs to include comments for.
  """
  authorIn: [ID]
  """
  Array of author IDs to exclude comments for.
  """
  authorNotIn: [ID]
  """
  Comment author URL.
  """
  authorUrl: String
  """
  Array of comment IDs to include.
  """
  commentIn: [ID]
  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]
  """
  Include comments of a given type.
  """
  commentType: String
  """
  Include comments from a given array of comment types.
  """
  commentTypeIn: [String]
  """
  Exclude comments from a given array of comment types.
  """
  commentTypeNotIn: String
  """
  Content object author ID to limit results by.
  """
  contentAuthor: [ID]
  """
  Array of author IDs to retrieve comments for.
  """
  contentAuthorIn: [ID]
  """
  Array of author IDs *not* to retrieve comments for.
  """
  contentAuthorNotIn: [ID]
  """
  Limit results to those affiliated with a given content object ID.
  """
  contentId: ID
  """
  Array of content object IDs to include affiliated comments for.
  """
  contentIdIn: [ID]
  """
  Array of content object IDs to exclude affiliated comments for.
  """
  contentIdNotIn: [ID]
  """
  Content object name (i.e. slug ) to retrieve affiliated comments for.
  """
  contentName: String
  """
  Content Object parent ID to retrieve affiliated comments for.
  """
  contentParent: Int
  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]
  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]
  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]
  """
  Karma score to retrieve matching comments for.
  """
  karma: Int
  """
  The cardinality of the order of the connection
  """
  order: OrderEnum
  """
  Field to order the comments by.
  """
  orderby: CommentsConnectionOrderbyEnum
  """
  Parent ID of comment to retrieve children of.
  """
  parent: Int
  """
  Array of parent IDs of comments to retrieve children for.
  """
  parentIn: [ID]
  """
  Array of parent IDs of comments *not* to retrieve children for.
  """
  parentNotIn: [ID]
  """
  Search term(s) to retrieve matching comments for.
  """
  search: String
  """
  One or more Comment Statuses to limit results by
  """
  statusIn: [CommentStatusEnum]
  """
  Include comments for a specific user ID.
  """
  userId: ID
}

"""
Connection between the Comment type and the Commenter type
"""
type CommentToCommenterConnectionEdge implements CommenterConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The email address representing the author for this particular comment
  """
  email: String
  """
  IP address of the author at the time of making this comment. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL.
  """
  ipAddress: String
  """
  The display name of the comment author for this particular comment
  """
  name: String
  """
  The node of the connection, without the edges
  """
  node: Commenter!
  """
  The url entered for the comment author on this particular comment
  """
  url: String
}

"""
Connection between the Comment type and the ContentNode type
"""
type CommentToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: ContentNode!
}

"""
Connection between the Comment type and the Comment type
"""
type CommentToParentCommentConnectionEdge implements CommentConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: Comment!
}

"""
Arguments for filtering the CommentToParentCommentConnection connection
"""
input CommentToParentCommentConnectionWhereArgs {
  """
  Comment author email address.
  """
  authorEmail: String
  """
  Array of author IDs to include comments for.
  """
  authorIn: [ID]
  """
  Array of author IDs to exclude comments for.
  """
  authorNotIn: [ID]
  """
  Comment author URL.
  """
  authorUrl: String
  """
  Array of comment IDs to include.
  """
  commentIn: [ID]
  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]
  """
  Include comments of a given type.
  """
  commentType: String
  """
  Include comments from a given array of comment types.
  """
  commentTypeIn: [String]
  """
  Exclude comments from a given array of comment types.
  """
  commentTypeNotIn: String
  """
  Content object author ID to limit results by.
  """
  contentAuthor: [ID]
  """
  Array of author IDs to retrieve comments for.
  """
  contentAuthorIn: [ID]
  """
  Array of author IDs *not* to retrieve comments for.
  """
  contentAuthorNotIn: [ID]
  """
  Limit results to those affiliated with a given content object ID.
  """
  contentId: ID
  """
  Array of content object IDs to include affiliated comments for.
  """
  contentIdIn: [ID]
  """
  Array of content object IDs to exclude affiliated comments for.
  """
  contentIdNotIn: [ID]
  """
  Content object name (i.e. slug ) to retrieve affiliated comments for.
  """
  contentName: String
  """
  Content Object parent ID to retrieve affiliated comments for.
  """
  contentParent: Int
  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]
  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]
  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]
  """
  Karma score to retrieve matching comments for.
  """
  karma: Int
  """
  The cardinality of the order of the connection
  """
  order: OrderEnum
  """
  Field to order the comments by.
  """
  orderby: CommentsConnectionOrderbyEnum
  """
  Parent ID of comment to retrieve children of.
  """
  parent: Int
  """
  Array of parent IDs of comments to retrieve children for.
  """
  parentIn: [ID]
  """
  Array of parent IDs of comments *not* to retrieve children for.
  """
  parentNotIn: [ID]
  """
  Search term(s) to retrieve matching comments for.
  """
  search: String
  """
  One or more Comment Statuses to limit results by
  """
  statusIn: [CommentStatusEnum]
  """
  Include comments for a specific user ID.
  """
  userId: ID
}

"""
A user or guest who has submitted a comment. Provides identification and contact information for the comment author.
"""
interface Commenter implements DatabaseIdentifier & Node {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar: Avatar
  """
  Identifies the primary key from the database.
  """
  databaseId: Int!
  """
  The email address of the author of a comment.
  """
  email: String
  """
  The globally unique identifier for the comment author.
  """
  id: ID!
  """
  Whether the author information is considered restricted. (not fully public)
  """
  isRestricted: Boolean
  """
  The name of the author of a comment.
  """
  name: String
  """
  The url of the author of a comment.
  """
  url: String
}

"""
Represents a connection to a Commenter. Contains both the Commenter Node and metadata about the relationship.
"""
interface CommenterConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected Commenter Node
  """
  node: Commenter!
}

"""
Sorting attributes for comment collections. Specifies which comment property determines the order of results.
"""
enum CommentsConnectionOrderbyEnum {
  """
  Order by browser user agent of the commenter.
  """
  COMMENT_AGENT
  """
  Order by approval status of the comment.
  """
  COMMENT_APPROVED
  """
  Order by name of the comment author.
  """
  COMMENT_AUTHOR
  """
  Order by e-mail of the comment author.
  """
  COMMENT_AUTHOR_EMAIL
  """
  Order by IP address of the comment author.
  """
  COMMENT_AUTHOR_IP
  """
  Order by URL address of the comment author.
  """
  COMMENT_AUTHOR_URL
  """
  Order by the comment contents.
  """
  COMMENT_CONTENT
  """
  Chronological ordering by comment submission date.
  """
  COMMENT_DATE
  """
  Chronological ordering by comment date in UTC/GMT time.
  """
  COMMENT_DATE_GMT
  """
  Ordering by internal ID (typically reflects creation order).
  """
  COMMENT_ID
  """
  Preserve custom order of IDs as specified in the query.
  """
  COMMENT_IN
  """
  Order by the comment karma score.
  """
  COMMENT_KARMA
  """
  Ordering by parent comment relationship (threaded discussions).
  """
  COMMENT_PARENT
  """
  Ordering by associated content item ID.
  """
  COMMENT_POST_ID
  """
  Ordering by comment classification (standard comments, pingbacks, etc.).
  """
  COMMENT_TYPE
  """
  Ordering by the user account ID associated with the comment as the comment author.
  """
  USER_ID
}

type CompanyInformations implements AcfOptionsPage & Node {
  """
  The globally unique ID for the object
  """
  id: ID!
  menuTitle: String
  pageTitle: String
  parentId: String
}

"""
A paginated relationship between objects. Supports cursor-based pagination with edges containing relationship metadata and nodes containing the related objects.
"""
interface Connection {
  """
  A list of edges (relational context) between connected nodes
  """
  edges: [Edge!]!
  """
  A list of connected nodes
  """
  nodes: [Node!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PageInfo!
}

"""
contact-form-7/contact-form-selector block
"""
type ContactForm7ContactFormSelectorBlock implements Block {
  attributes: ContactForm7ContactFormSelectorBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type ContactForm7ContactFormSelectorBlockAttributes {
  className: String
  hash: String
  htmlClass: String
  htmlId: String
  htmlName: String
  htmlTitle: String
  id: Int
  lock: BlockAttributesObject
  title: String
}

"""
Base interface for content objects like posts, pages, and media items. Provides common fields available across these content types.
"""
interface ContentNode implements Node & UniformResourceIdentifiable {
  """
  Connection between the ContentNode type and the ContentType type
  """
  contentType: ContentNodeToContentTypeConnectionEdge
  """
  The name of the Content Type the node belongs to
  """
  contentTypeName: String!
  """
  The ID of the node in the database.
  """
  databaseId: Int!
  """
  Post publishing date.
  """
  date: String
  """
  The publishing date set in GMT.
  """
  dateGmt: String
  """
  The desired slug of the post
  """
  desiredSlug: String
  """
  If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  """
  The RSS enclosure for the object
  """
  enclosure: String
  """
  Connection between the ContentNode type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is a node in the preview state
  """
  isPreview: Boolean
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The user that most recently edited the node
  """
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  """
  The permalink of the post
  """
  link: String
  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String
  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String
  """
  The database id of the preview node
  """
  previewRevisionDatabaseId: Int
  """
  Whether the object is a node in the preview state
  """
  previewRevisionId: ID
  """
  The Yoast SEO data of the ContentNode
  """
  seo: PostTypeSEO
  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String
  """
  The current status of the object
  """
  status: String
  """
  The template assigned to a node of content
  """
  template: ContentTemplate
  """
  The unique resource identifier path
  """
  uri: String
}

"""
A paginated collection of ContentNode Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of ContentNode Nodes
"""
interface ContentNodeConnection implements Connection {
  """
  A list of edges (relational context) between ContentType and connected ContentNode Nodes
  """
  edges: [ContentNodeConnectionEdge!]!
  """
  A list of connected ContentNode Nodes
  """
  nodes: [ContentNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: ContentNodeConnectionPageInfo!
}

"""
Represents a connection to a ContentNode. Contains both the ContentNode Node and metadata about the relationship.
"""
interface ContentNodeConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected ContentNode Node
  """
  node: ContentNode!
}

"""
Pagination metadata specific to &quot;ContentNodeConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;ContentNodeConnectionEdge&quot; Nodes.
"""
interface ContentNodeConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Identifier types for retrieving specific content. Determines which property (global ID, database ID, URI) is used to locate content objects.
"""
enum ContentNodeIdTypeEnum {
  """
  Identify a resource by the Database ID.
  """
  DATABASE_ID
  """
  Identify a resource by the (hashed) Global ID.
  """
  ID
  """
  Identify a resource by the URI.
  """
  URI
}

"""
Connection between the ContentNode type and the ContentType type
"""
type ContentNodeToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: ContentType!
}

"""
Connection between the ContentNode type and the User type
"""
type ContentNodeToEditLastConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: User!
}

"""
Connection between the ContentNode type and the User type
"""
type ContentNodeToEditLockConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The timestamp for when the node was last edited
  """
  lockTimestamp: String
  """
  The node of the connection, without the edges
  """
  node: User!
}

"""
Connection between the ContentNode type and the EnqueuedScript type
"""
type ContentNodeToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
  """
  Edges for the ContentNodeToEnqueuedScriptConnection connection
  """
  edges: [ContentNodeToEnqueuedScriptConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [EnqueuedScript!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: ContentNodeToEnqueuedScriptConnectionPageInfo!
}

"""
An edge in a connection
"""
type ContentNodeToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: EnqueuedScript!
}

"""
Pagination metadata specific to &quot;ContentNodeToEnqueuedScriptConnection&quot; collections. Provides cursors and flags for navigating through sets of ContentNodeToEnqueuedScriptConnection Nodes.
"""
type ContentNodeToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the ContentNode type and the EnqueuedStylesheet type
"""
type ContentNodeToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
  """
  Edges for the ContentNodeToEnqueuedStylesheetConnection connection
  """
  edges: [ContentNodeToEnqueuedStylesheetConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [EnqueuedStylesheet!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: ContentNodeToEnqueuedStylesheetConnectionPageInfo!
}

"""
An edge in a connection
"""
type ContentNodeToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: EnqueuedStylesheet!
}

"""
Pagination metadata specific to &quot;ContentNodeToEnqueuedStylesheetConnection&quot; collections. Provides cursors and flags for navigating through sets of ContentNodeToEnqueuedStylesheetConnection Nodes.
"""
type ContentNodeToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
A layout pattern that can help inform how content might be structured and displayed. Templates can define specialized layouts for different types of content.
"""
interface ContentTemplate {
  """
  The name of the template
  """
  templateName: String
}

"""
An Post Type object
"""
type ContentType implements Node & UniformResourceIdentifiable {
  """
  Whether this content type should can be exported.
  """
  canExport: Boolean
  """
  Connection between the ContentType type and the Taxonomy type
  """
  connectedTaxonomies(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentTypeToTaxonomyConnection
  """
  Connection between the ContentType type and the ContentNode type
  """
  contentNodes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: ContentTypeToContentNodeConnectionWhereArgs
  ): ContentTypeToContentNodeConnection
  """
  Whether content of this type should be deleted when the author of it is deleted from the system.
  """
  deleteWithUser: Boolean
  """
  Description of the content type.
  """
  description: String
  """
  Whether to exclude nodes of this content type from front end search results.
  """
  excludeFromSearch: Boolean
  """
  The plural name of the content type within the GraphQL Schema.
  """
  graphqlPluralName: String
  """
  The singular name of the content type within the GraphQL Schema.
  """
  graphqlSingleName: String
  """
  Whether this content type should have archives. Content archives are generated by type and by date.
  """
  hasArchive: Boolean
  """
  Whether the content type is hierarchical, for example pages.
  """
  hierarchical: Boolean
  """
  The globally unique identifier of the post-type object.
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether this page is set to the static front page.
  """
  isFrontPage: Boolean!
  """
  Whether this page is set to the blog posts page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  Display name of the content type.
  """
  label: String
  """
  Details about the content type labels.
  """
  labels: PostTypeLabelDetails
  """
  The name of the icon file to display as a menu icon.
  """
  menuIcon: String
  """
  The position of this post type in the menu. Only applies if show_in_menu is true.
  """
  menuPosition: Int
  """
  The internal name of the post type. This should not be used for display purposes.
  """
  name: String
  """
  Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention.
  """
  public: Boolean
  """
  Whether queries can be performed on the front end for the content type as part of parse_request().
  """
  publiclyQueryable: Boolean
  """
  Name of content type to display in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String
  """
  The REST Controller class assigned to handling this content type.
  """
  restControllerClass: String
  """
  Makes this content type available via the admin bar.
  """
  showInAdminBar: Boolean
  """
  Whether to add the content type to the GraphQL Schema.
  """
  showInGraphql: Boolean
  """
  Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that.
  """
  showInMenu: Boolean
  """
  Makes this content type available for selection in navigation menus.
  """
  showInNavMenus: Boolean
  """
  Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean
  """
  Whether to generate and allow a UI for managing this content type in the admin.
  """
  showUi: Boolean
  """
  The unique resource identifier path
  """
  uri: String
}

"""
A paginated collection of ContentType Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of ContentType Nodes
"""
interface ContentTypeConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected ContentType Nodes
  """
  edges: [ContentTypeConnectionEdge!]!
  """
  A list of connected ContentType Nodes
  """
  nodes: [ContentType!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: ContentTypeConnectionPageInfo!
}

"""
Represents a connection to a ContentType. Contains both the ContentType Node and metadata about the relationship.
"""
interface ContentTypeConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected ContentType Node
  """
  node: ContentType!
}

"""
Pagination metadata specific to &quot;ContentTypeConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;ContentTypeConnectionEdge&quot; Nodes.
"""
interface ContentTypeConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Available content entity types that can be queried or filtered. Identifies the primary content structures available in the system.
"""
enum ContentTypeEnum {
  """
  The Type of Content object
  """
  ATTACHMENT
  """
  The Type of Content object
  """
  BERLINERISCH
  """
  The Type of Content object
  """
  PAGE
  """
  The Type of Content object
  """
  POST
  """
  The Type of Content object
  """
  WGG_PREVIEW
  """
  The Type of Content object
  """
  WP_BLOCK
}

"""
Identifier types for retrieving a specific content type definition. Determines whether to look up content types by ID or name.
"""
enum ContentTypeIdTypeEnum {
  """
  The globally unique ID
  """
  ID
  """
  The name of the content type.
  """
  NAME
}

"""
Connection between the ContentType type and the ContentNode type
"""
type ContentTypeToContentNodeConnection implements Connection & ContentNodeConnection {
  """
  Edges for the ContentTypeToContentNodeConnection connection
  """
  edges: [ContentTypeToContentNodeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ContentNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: ContentTypeToContentNodeConnectionPageInfo!
}

"""
An edge in a connection
"""
type ContentTypeToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ContentNode!
}

"""
Pagination metadata specific to &quot;ContentTypeToContentNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of ContentTypeToContentNodeConnection Nodes.
"""
type ContentTypeToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the ContentTypeToContentNodeConnection connection
"""
input ContentTypeToContentNodeConnectionWhereArgs {
  """
  The Types of content to filter
  """
  contentTypes: [ContentTypeEnum]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the ContentType type and the Taxonomy type
"""
type ContentTypeToTaxonomyConnection implements Connection & TaxonomyConnection {
  """
  Edges for the ContentTypeToTaxonomyConnection connection
  """
  edges: [ContentTypeToTaxonomyConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Taxonomy!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: ContentTypeToTaxonomyConnectionPageInfo!
}

"""
An edge in a connection
"""
type ContentTypeToTaxonomyConnectionEdge implements Edge & TaxonomyConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Taxonomy!
}

"""
Pagination metadata specific to &quot;ContentTypeToTaxonomyConnection&quot; collections. Provides cursors and flags for navigating through sets of ContentTypeToTaxonomyConnection Nodes.
"""
type ContentTypeToTaxonomyConnectionPageInfo implements PageInfo & TaxonomyConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Allowed Content Types of the BerlinerischWordType taxonomy.
"""
enum ContentTypesOfBerlinerischWordTypeEnum {
  """
  The Type of Content object
  """
  BERLINERISCH
}

"""
Allowed Content Types of the Category taxonomy.
"""
enum ContentTypesOfCategoryEnum {
  """
  The Type of Content object
  """
  POST
}

"""
Allowed Content Types of the PostFormat taxonomy.
"""
enum ContentTypesOfPostFormatEnum {
  """
  The Type of Content object
  """
  POST
}

"""
Allowed Content Types of the Tag taxonomy.
"""
enum ContentTypesOfTagEnum {
  """
  The Type of Content object
  """
  POST
}

"""
core/archives block
"""
type CoreArchivesBlock implements Block {
  attributes: CoreArchivesBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreArchivesBlockAttributes {
  align: String
  className: String
  displayAsDropdown: Boolean!
  fontFamily: String
  fontSize: String
  lock: BlockAttributesObject
  showLabel: Boolean!
  showPostCounts: Boolean!
  style: BlockAttributesObject
  type: String!
}

"""
core/audio block
"""
type CoreAudioBlock implements Block {
  attributes: CoreAudioBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreAudioBlockAttributes {
  align: String
  anchor: String
  autoplay: Boolean
  caption: String
  className: String
  id: Float
  lock: BlockAttributesObject
  loop: Boolean
  preload: String
  src: String
  style: BlockAttributesObject
}

union CoreAudioBlockAttributesUnion =
  | CoreAudioBlockAttributes
  | CoreAudioBlockDeprecatedV1Attributes

type CoreAudioBlockDeprecatedV1Attributes {
  align: String
  anchor: String
  autoplay: Boolean
  caption: String
  className: String
  id: Float
  lock: BlockAttributesObject
  loop: Boolean
  preload: String
  src: String
  style: BlockAttributesObject
}

"""
core/avatar block
"""
type CoreAvatarBlock implements Block {
  attributes: CoreAvatarBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreAvatarBlockAttributes {
  align: String
  borderColor: String
  className: String
  isLink: Boolean!
  linkTarget: String!
  lock: BlockAttributesObject
  size: Float!
  style: BlockAttributesObject
  userId: Float
}

"""
core/block block
"""
type CoreBlock implements Block {
  attributes: CoreBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  reusableBlock: Node!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreBlockAttributes {
  lock: BlockAttributesObject
  ref: Float
}

"""
core/button block
"""
type CoreButtonBlock implements Block {
  attributes: CoreButtonBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreButtonBlockAttributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  linkTarget: String
  lock: BlockAttributesObject
  placeholder: String
  rel: String
  style: BlockAttributesObject
  tagName: String!
  text: String
  textAlign: String
  textColor: String
  title: String
  type: String!
  url: String
  width: Float
}

union CoreButtonBlockAttributesUnion =
  | CoreButtonBlockAttributes
  | CoreButtonBlockDeprecatedV1Attributes
  | CoreButtonBlockDeprecatedV2Attributes
  | CoreButtonBlockDeprecatedV3Attributes
  | CoreButtonBlockDeprecatedV4Attributes
  | CoreButtonBlockDeprecatedV5Attributes
  | CoreButtonBlockDeprecatedV6Attributes
  | CoreButtonBlockDeprecatedV7Attributes
  | CoreButtonBlockDeprecatedV8Attributes
  | CoreButtonBlockDeprecatedV9Attributes
  | CoreButtonBlockDeprecatedV10Attributes
  | CoreButtonBlockDeprecatedV11Attributes

type CoreButtonBlockDeprecatedV1Attributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  linkTarget: String
  lock: BlockAttributesObject
  placeholder: String
  rel: String
  style: BlockAttributesObject
  tagName: String!
  text: String
  textAlign: String
  textColor: String
  title: String
  type: String!
  url: String
  width: Float
}

type CoreButtonBlockDeprecatedV2Attributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  linkTarget: String
  lock: BlockAttributesObject
  placeholder: String
  rel: String
  style: BlockAttributesObject
  tagName: String!
  text: String
  textAlign: String
  textColor: String
  title: String
  type: String!
  url: String
  width: Float
}

type CoreButtonBlockDeprecatedV3Attributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  linkTarget: String
  lock: BlockAttributesObject
  placeholder: String
  rel: String
  style: BlockAttributesObject
  tagName: String!
  text: String
  textAlign: String
  textColor: String
  title: String
  type: String!
  url: String
  width: Float
}

type CoreButtonBlockDeprecatedV4Attributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  linkTarget: String
  lock: BlockAttributesObject
  placeholder: String
  rel: String
  style: BlockAttributesObject
  tagName: String!
  text: String
  textAlign: String
  textColor: String
  title: String
  type: String!
  url: String
  width: Float
}

type CoreButtonBlockDeprecatedV5Attributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  linkTarget: String
  lock: BlockAttributesObject
  placeholder: String
  rel: String
  style: BlockAttributesObject
  tagName: String!
  text: String
  textAlign: String
  textColor: String
  title: String
  type: String!
  url: String
  width: Float
}

type CoreButtonBlockDeprecatedV6Attributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  linkTarget: String
  lock: BlockAttributesObject
  placeholder: String
  rel: String
  style: BlockAttributesObject
  tagName: String!
  text: String
  textAlign: String
  textColor: String
  title: String
  type: String!
  url: String
  width: Float
}

type CoreButtonBlockDeprecatedV7Attributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  linkTarget: String
  lock: BlockAttributesObject
  placeholder: String
  rel: String
  style: BlockAttributesObject
  tagName: String!
  text: String
  textAlign: String
  textColor: String
  title: String
  type: String!
  url: String
  width: Float
}

type CoreButtonBlockDeprecatedV8Attributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  linkTarget: String
  lock: BlockAttributesObject
  placeholder: String
  rel: String
  style: BlockAttributesObject
  tagName: String!
  text: String
  textAlign: String
  textColor: String
  title: String
  type: String!
  url: String
  width: Float
}

type CoreButtonBlockDeprecatedV9Attributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  linkTarget: String
  lock: BlockAttributesObject
  placeholder: String
  rel: String
  style: BlockAttributesObject
  tagName: String!
  text: String
  textAlign: String
  textColor: String
  title: String
  type: String!
  url: String
  width: Float
}

type CoreButtonBlockDeprecatedV10Attributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  linkTarget: String
  lock: BlockAttributesObject
  placeholder: String
  rel: String
  style: BlockAttributesObject
  tagName: String!
  text: String
  textAlign: String
  textColor: String
  title: String
  type: String!
  url: String
  width: Float
}

type CoreButtonBlockDeprecatedV11Attributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  linkTarget: String
  lock: BlockAttributesObject
  placeholder: String
  rel: String
  style: BlockAttributesObject
  tagName: String!
  text: String
  textAlign: String
  textColor: String
  title: String
  type: String!
  url: String
  width: Float
}

"""
core/buttons block
"""
type CoreButtonsBlock implements Block {
  attributes: CoreButtonsBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreButtonsBlockAttributes {
  align: String
  anchor: String
  className: String
  fontFamily: String
  fontSize: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  style: BlockAttributesObject
}

union CoreButtonsBlockAttributesUnion =
  | CoreButtonsBlockAttributes
  | CoreButtonsBlockDeprecatedV1Attributes
  | CoreButtonsBlockDeprecatedV2Attributes

type CoreButtonsBlockDeprecatedV1Attributes {
  align: String
  anchor: String
  className: String
  fontFamily: String
  fontSize: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  style: BlockAttributesObject
}

type CoreButtonsBlockDeprecatedV2Attributes {
  align: String
  anchor: String
  className: String
  fontFamily: String
  fontSize: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  style: BlockAttributesObject
}

"""
core/calendar block
"""
type CoreCalendarBlock implements Block {
  attributes: CoreCalendarBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCalendarBlockAttributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  lock: BlockAttributesObject
  month: Int
  style: BlockAttributesObject
  textColor: String
  year: Int
}

"""
core/categories block
"""
type CoreCategoriesBlock implements Block {
  attributes: CoreCategoriesBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCategoriesBlockAttributes {
  align: String
  className: String
  displayAsDropdown: Boolean!
  fontFamily: String
  fontSize: String
  lock: BlockAttributesObject
  showEmpty: Boolean!
  showHierarchy: Boolean!
  showOnlyTopLevel: Boolean!
  showPostCounts: Boolean!
  style: BlockAttributesObject
}

"""
core/code block
"""
type CoreCodeBlock implements Block {
  attributes: CoreCodeBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCodeBlockAttributes {
  align: String
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  content: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

"""
core/column block
"""
type CoreColumnBlock implements Block {
  attributes: CoreColumnBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreColumnBlockAttributes {
  allowedBlocks: BlockAttributesArray
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
  verticalAlignment: String
  width: String
}

union CoreColumnBlockAttributesUnion =
  | CoreColumnBlockAttributes
  | CoreColumnBlockDeprecatedV1Attributes

type CoreColumnBlockDeprecatedV1Attributes {
  allowedBlocks: BlockAttributesArray
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
  verticalAlignment: String
  width: String
}

"""
core/columns block
"""
type CoreColumnsBlock implements Block {
  attributes: CoreColumnsBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreColumnsBlockAttributes {
  align: String
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  isStackedOnMobile: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
  verticalAlignment: String
}

union CoreColumnsBlockAttributesUnion =
  | CoreColumnsBlockAttributes
  | CoreColumnsBlockDeprecatedV1Attributes
  | CoreColumnsBlockDeprecatedV2Attributes
  | CoreColumnsBlockDeprecatedV3Attributes

type CoreColumnsBlockDeprecatedV1Attributes {
  align: String
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  isStackedOnMobile: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
  verticalAlignment: String
}

type CoreColumnsBlockDeprecatedV2Attributes {
  align: String
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  isStackedOnMobile: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
  verticalAlignment: String
}

type CoreColumnsBlockDeprecatedV3Attributes {
  align: String
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  isStackedOnMobile: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
  verticalAlignment: String
}

"""
core/comment-author-name block
"""
type CoreCommentAuthorNameBlock implements Block {
  attributes: CoreCommentAuthorNameBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCommentAuthorNameBlockAttributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  isLink: Boolean!
  linkTarget: String!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

union CoreCommentAuthorNameBlockAttributesUnion =
  | CoreCommentAuthorNameBlockAttributes
  | CoreCommentAuthorNameBlockDeprecatedV1Attributes

type CoreCommentAuthorNameBlockDeprecatedV1Attributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  isLink: Boolean!
  linkTarget: String!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/comment-content block
"""
type CoreCommentContentBlock implements Block {
  attributes: CoreCommentContentBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCommentContentBlockAttributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/comment-date block
"""
type CoreCommentDateBlock implements Block {
  attributes: CoreCommentDateBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCommentDateBlockAttributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  format: String
  gradient: String
  isLink: Boolean!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

union CoreCommentDateBlockAttributesUnion =
  | CoreCommentDateBlockAttributes
  | CoreCommentDateBlockDeprecatedV1Attributes

type CoreCommentDateBlockDeprecatedV1Attributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  format: String
  gradient: String
  isLink: Boolean!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

"""
core/comment-edit-link block
"""
type CoreCommentEditLinkBlock implements Block {
  attributes: CoreCommentEditLinkBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCommentEditLinkBlockAttributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  linkTarget: String!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/comment-reply-link block
"""
type CoreCommentReplyLinkBlock implements Block {
  attributes: CoreCommentReplyLinkBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCommentReplyLinkBlockAttributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/comment-template block
"""
type CoreCommentTemplateBlock implements Block {
  attributes: CoreCommentTemplateBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCommentTemplateBlockAttributes {
  align: String
  className: String
  fontFamily: String
  fontSize: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
}

"""
core/comments block
"""
type CoreCommentsBlock implements Block {
  attributes: CoreCommentsBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCommentsBlockAttributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  legacy: Boolean!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  tagName: String!
  textColor: String
}

union CoreCommentsBlockAttributesUnion =
  | CoreCommentsBlockAttributes
  | CoreCommentsBlockDeprecatedV1Attributes

type CoreCommentsBlockDeprecatedV1Attributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  legacy: Boolean!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  tagName: String!
  textColor: String
}

"""
core/comments-pagination block
"""
type CoreCommentsPaginationBlock implements Block {
  attributes: CoreCommentsPaginationBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCommentsPaginationBlockAttributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  paginationArrow: String!
  style: BlockAttributesObject
  textColor: String
}

"""
core/comments-pagination-next block
"""
type CoreCommentsPaginationNextBlock implements Block {
  attributes: CoreCommentsPaginationNextBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCommentsPaginationNextBlockAttributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  label: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

"""
core/comments-pagination-numbers block
"""
type CoreCommentsPaginationNumbersBlock implements Block {
  attributes: CoreCommentsPaginationNumbersBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCommentsPaginationNumbersBlockAttributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

"""
core/comments-pagination-previous block
"""
type CoreCommentsPaginationPreviousBlock implements Block {
  attributes: CoreCommentsPaginationPreviousBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCommentsPaginationPreviousBlockAttributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  label: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

"""
core/comments-title block
"""
type CoreCommentsTitleBlock implements Block {
  attributes: CoreCommentsTitleBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCommentsTitleBlockAttributes {
  align: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  level: Float!
  lock: BlockAttributesObject
  showCommentsCount: Boolean!
  showPostTitle: Boolean!
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

union CoreCommentsTitleBlockAttributesUnion =
  | CoreCommentsTitleBlockAttributes
  | CoreCommentsTitleBlockDeprecatedV1Attributes

type CoreCommentsTitleBlockDeprecatedV1Attributes {
  align: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  level: Float!
  lock: BlockAttributesObject
  showCommentsCount: Boolean!
  showPostTitle: Boolean!
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/cover block
"""
type CoreCoverBlock implements Block {
  attributes: CoreCoverBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreCoverBlockAttributes {
  align: String
  allowedBlocks: BlockAttributesArray
  alt: String!
  anchor: String
  backgroundColor: String
  backgroundType: String!
  borderColor: String
  className: String
  contentPosition: String
  customGradient: String
  customOverlayColor: String
  dimRatio: Float!
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  hasParallax: Boolean!
  id: Float
  isDark: Boolean!
  isRepeated: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  minHeight: Float
  minHeightUnit: String
  overlayColor: String
  style: BlockAttributesObject
  tagName: String!
  textColor: String
  url: String
  useFeaturedImage: Boolean!
}

union CoreCoverBlockAttributesUnion =
  | CoreCoverBlockAttributes
  | CoreCoverBlockDeprecatedV1Attributes
  | CoreCoverBlockDeprecatedV2Attributes
  | CoreCoverBlockDeprecatedV3Attributes
  | CoreCoverBlockDeprecatedV4Attributes
  | CoreCoverBlockDeprecatedV5Attributes
  | CoreCoverBlockDeprecatedV6Attributes
  | CoreCoverBlockDeprecatedV7Attributes
  | CoreCoverBlockDeprecatedV8Attributes
  | CoreCoverBlockDeprecatedV9Attributes
  | CoreCoverBlockDeprecatedV10Attributes
  | CoreCoverBlockDeprecatedV11Attributes

type CoreCoverBlockDeprecatedV1Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  alt: String!
  anchor: String
  backgroundColor: String
  backgroundType: String!
  borderColor: String
  className: String
  contentPosition: String
  customGradient: String
  customOverlayColor: String
  dimRatio: Float!
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  hasParallax: Boolean!
  id: Float
  isDark: Boolean!
  isRepeated: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  minHeight: Float
  minHeightUnit: String
  overlayColor: String
  style: BlockAttributesObject
  tagName: String!
  textColor: String
  url: String
  useFeaturedImage: Boolean!
}

type CoreCoverBlockDeprecatedV2Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  alt: String!
  anchor: String
  backgroundColor: String
  backgroundType: String!
  borderColor: String
  className: String
  contentPosition: String
  customGradient: String
  customOverlayColor: String
  dimRatio: Float!
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  hasParallax: Boolean!
  id: Float
  isDark: Boolean!
  isRepeated: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  minHeight: Float
  minHeightUnit: String
  overlayColor: String
  style: BlockAttributesObject
  tagName: String!
  textColor: String
  url: String
  useFeaturedImage: Boolean!
}

type CoreCoverBlockDeprecatedV3Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  alt: String!
  anchor: String
  backgroundColor: String
  backgroundType: String!
  borderColor: String
  className: String
  contentPosition: String
  customGradient: String
  customOverlayColor: String
  dimRatio: Float!
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  hasParallax: Boolean!
  id: Float
  isDark: Boolean!
  isRepeated: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  minHeight: Float
  minHeightUnit: String
  overlayColor: String
  style: BlockAttributesObject
  tagName: String!
  textColor: String
  url: String
  useFeaturedImage: Boolean!
}

type CoreCoverBlockDeprecatedV4Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  alt: String!
  anchor: String
  backgroundColor: String
  backgroundType: String!
  borderColor: String
  className: String
  contentPosition: String
  customGradient: String
  customOverlayColor: String
  dimRatio: Float!
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  hasParallax: Boolean!
  id: Float
  isDark: Boolean!
  isRepeated: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  minHeight: Float
  minHeightUnit: String
  overlayColor: String
  style: BlockAttributesObject
  tagName: String!
  textColor: String
  url: String
  useFeaturedImage: Boolean!
}

type CoreCoverBlockDeprecatedV5Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  alt: String!
  anchor: String
  backgroundColor: String
  backgroundType: String!
  borderColor: String
  className: String
  contentPosition: String
  customGradient: String
  customOverlayColor: String
  dimRatio: Float!
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  hasParallax: Boolean!
  id: Float
  isDark: Boolean!
  isRepeated: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  minHeight: Float
  minHeightUnit: String
  overlayColor: String
  style: BlockAttributesObject
  tagName: String!
  textColor: String
  url: String
  useFeaturedImage: Boolean!
}

type CoreCoverBlockDeprecatedV6Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  alt: String!
  anchor: String
  backgroundColor: String
  backgroundType: String!
  borderColor: String
  className: String
  contentPosition: String
  customGradient: String
  customOverlayColor: String
  dimRatio: Float!
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  hasParallax: Boolean!
  id: Float
  isDark: Boolean!
  isRepeated: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  minHeight: Float
  minHeightUnit: String
  overlayColor: String
  style: BlockAttributesObject
  tagName: String!
  textColor: String
  url: String
  useFeaturedImage: Boolean!
}

type CoreCoverBlockDeprecatedV7Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  alt: String!
  anchor: String
  backgroundColor: String
  backgroundType: String!
  borderColor: String
  className: String
  contentPosition: String
  customGradient: String
  customOverlayColor: String
  dimRatio: Float!
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  hasParallax: Boolean!
  id: Float
  isDark: Boolean!
  isRepeated: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  minHeight: Float
  minHeightUnit: String
  overlayColor: String
  style: BlockAttributesObject
  tagName: String!
  textColor: String
  url: String
  useFeaturedImage: Boolean!
}

type CoreCoverBlockDeprecatedV8Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  alt: String!
  anchor: String
  backgroundColor: String
  backgroundType: String!
  borderColor: String
  className: String
  contentPosition: String
  customGradient: String
  customOverlayColor: String
  dimRatio: Float!
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  hasParallax: Boolean!
  id: Float
  isDark: Boolean!
  isRepeated: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  minHeight: Float
  minHeightUnit: String
  overlayColor: String
  style: BlockAttributesObject
  tagName: String!
  textColor: String
  url: String
  useFeaturedImage: Boolean!
}

type CoreCoverBlockDeprecatedV9Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  alt: String!
  anchor: String
  backgroundColor: String
  backgroundType: String!
  borderColor: String
  className: String
  contentPosition: String
  customGradient: String
  customOverlayColor: String
  dimRatio: Float!
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  hasParallax: Boolean!
  id: Float
  isDark: Boolean!
  isRepeated: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  minHeight: Float
  minHeightUnit: String
  overlayColor: String
  style: BlockAttributesObject
  tagName: String!
  textColor: String
  url: String
  useFeaturedImage: Boolean!
}

type CoreCoverBlockDeprecatedV10Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  alt: String!
  anchor: String
  backgroundColor: String
  backgroundType: String!
  borderColor: String
  className: String
  contentPosition: String
  customGradient: String
  customOverlayColor: String
  dimRatio: Float!
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  hasParallax: Boolean!
  id: Float
  isDark: Boolean!
  isRepeated: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  minHeight: Float
  minHeightUnit: String
  overlayColor: String
  style: BlockAttributesObject
  tagName: String!
  textColor: String
  url: String
  useFeaturedImage: Boolean!
}

type CoreCoverBlockDeprecatedV11Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  alt: String!
  anchor: String
  backgroundColor: String
  backgroundType: String!
  borderColor: String
  className: String
  contentPosition: String
  customGradient: String
  customOverlayColor: String
  dimRatio: Float!
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  hasParallax: Boolean!
  id: Float
  isDark: Boolean!
  isRepeated: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  minHeight: Float
  minHeightUnit: String
  overlayColor: String
  style: BlockAttributesObject
  tagName: String!
  textColor: String
  url: String
  useFeaturedImage: Boolean!
}

"""
core/details block
"""
type CoreDetailsBlock implements Block {
  attributes: CoreDetailsBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreDetailsBlockAttributes {
  align: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  showContent: Boolean!
  style: BlockAttributesObject
  summary: String
  textColor: String
}

"""
core/embed block
"""
type CoreEmbedBlock implements Block {
  attributes: CoreEmbedBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreEmbedBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  lock: BlockAttributesObject
  previewable: Boolean!
  providerNameSlug: String
  responsive: Boolean!
  style: BlockAttributesObject
  type: String
  url: String
}

union CoreEmbedBlockAttributesUnion =
  | CoreEmbedBlockAttributes
  | CoreEmbedBlockDeprecatedV1Attributes
  | CoreEmbedBlockDeprecatedV2Attributes

type CoreEmbedBlockDeprecatedV1Attributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  lock: BlockAttributesObject
  previewable: Boolean!
  providerNameSlug: String
  responsive: Boolean!
  style: BlockAttributesObject
  type: String
  url: String
}

type CoreEmbedBlockDeprecatedV2Attributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  lock: BlockAttributesObject
  previewable: Boolean!
  providerNameSlug: String
  responsive: Boolean!
  style: BlockAttributesObject
  type: String
  url: String
}

"""
core/file block
"""
type CoreFileBlock implements Block {
  attributes: CoreFileBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreFileBlockAttributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  displayPreview: Boolean
  downloadButtonText: String
  fileId: String
  fileName: String
  gradient: String
  href: String
  id: Float
  lock: BlockAttributesObject
  previewHeight: Float!
  showDownloadButton: Boolean!
  style: BlockAttributesObject
  textColor: String
  textLinkHref: String
  textLinkTarget: String
}

union CoreFileBlockAttributesUnion =
  | CoreFileBlockAttributes
  | CoreFileBlockDeprecatedV1Attributes
  | CoreFileBlockDeprecatedV2Attributes
  | CoreFileBlockDeprecatedV3Attributes

type CoreFileBlockDeprecatedV1Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  displayPreview: Boolean
  downloadButtonText: String
  fileId: String
  fileName: String
  gradient: String
  href: String
  id: Float
  lock: BlockAttributesObject
  previewHeight: Float!
  showDownloadButton: Boolean!
  style: BlockAttributesObject
  textColor: String
  textLinkHref: String
  textLinkTarget: String
}

type CoreFileBlockDeprecatedV2Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  displayPreview: Boolean
  downloadButtonText: String
  fileId: String
  fileName: String
  gradient: String
  href: String
  id: Float
  lock: BlockAttributesObject
  previewHeight: Float!
  showDownloadButton: Boolean!
  style: BlockAttributesObject
  textColor: String
  textLinkHref: String
  textLinkTarget: String
}

type CoreFileBlockDeprecatedV3Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  displayPreview: Boolean
  downloadButtonText: String
  fileId: String
  fileName: String
  gradient: String
  href: String
  id: Float
  lock: BlockAttributesObject
  previewHeight: Float!
  showDownloadButton: Boolean!
  style: BlockAttributesObject
  textColor: String
  textLinkHref: String
  textLinkTarget: String
}

"""
core/footnotes block
"""
type CoreFootnotesBlock implements Block {
  attributes: CoreFootnotesBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreFootnotesBlockAttributes {
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

"""
core/freeform block
"""
type CoreFreeformBlock implements Block {
  attributes: CoreFreeformBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreFreeformBlockAttributes {
  content: String
  lock: BlockAttributesObject
}

"""
core/gallery block
"""
type CoreGalleryBlock implements Block {
  attributes: CoreGalleryBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreGalleryBlockAttributes {
  align: String
  allowResize: Boolean!
  anchor: String
  backgroundColor: String
  caption: String
  className: String
  columns: Float
  fixedHeight: Boolean!
  gradient: String
  ids: [Float]!
  imageCrop: Boolean!
  images: [CoreGalleryBlockAttributesImages]!
  layout: BlockAttributesObject
  linkTarget: String
  linkTo: String
  lock: BlockAttributesObject
  shortCodeTransforms: [BlockAttributesObject]!
  sizeSlug: String!
  style: BlockAttributesObject
  textColor: String
}

type CoreGalleryBlockAttributesImages {
  alt: String!
  caption: String
  fullUrl: String
  id: String
  link: String
  url: String
}

union CoreGalleryBlockAttributesUnion =
  | CoreGalleryBlockAttributes
  | CoreGalleryBlockDeprecatedV1Attributes
  | CoreGalleryBlockDeprecatedV2Attributes
  | CoreGalleryBlockDeprecatedV3Attributes
  | CoreGalleryBlockDeprecatedV4Attributes
  | CoreGalleryBlockDeprecatedV5Attributes
  | CoreGalleryBlockDeprecatedV6Attributes
  | CoreGalleryBlockDeprecatedV7Attributes

type CoreGalleryBlockDeprecatedV1Attributes {
  align: String
  allowResize: Boolean!
  anchor: String
  backgroundColor: String
  caption: String
  className: String
  columns: Float
  fixedHeight: Boolean!
  gradient: String
  ids: [Float]!
  imageCrop: Boolean!
  images: [CoreGalleryBlockDeprecatedV1AttributesImages]!
  layout: BlockAttributesObject
  linkTarget: String
  linkTo: String
  lock: BlockAttributesObject
  shortCodeTransforms: [BlockAttributesObject]!
  sizeSlug: String!
  style: BlockAttributesObject
  textColor: String
}

type CoreGalleryBlockDeprecatedV1AttributesImages {
  alt: String!
  caption: String
  fullUrl: String
  id: String
  link: String
  url: String
}

type CoreGalleryBlockDeprecatedV2Attributes {
  align: String
  allowResize: Boolean!
  anchor: String
  backgroundColor: String
  caption: String
  className: String
  columns: Float
  fixedHeight: Boolean!
  gradient: String
  ids: [Float]!
  imageCrop: Boolean!
  images: [CoreGalleryBlockDeprecatedV2AttributesImages]!
  layout: BlockAttributesObject
  linkTarget: String
  linkTo: String
  lock: BlockAttributesObject
  shortCodeTransforms: [BlockAttributesObject]!
  sizeSlug: String!
  style: BlockAttributesObject
  textColor: String
}

type CoreGalleryBlockDeprecatedV2AttributesImages {
  alt: String!
  caption: String
  fullUrl: String
  id: String
  link: String
  url: String
}

type CoreGalleryBlockDeprecatedV3Attributes {
  align: String
  allowResize: Boolean!
  anchor: String
  backgroundColor: String
  caption: String
  className: String
  columns: Float
  fixedHeight: Boolean!
  gradient: String
  ids: [Float]!
  imageCrop: Boolean!
  images: [CoreGalleryBlockDeprecatedV3AttributesImages]!
  layout: BlockAttributesObject
  linkTarget: String
  linkTo: String
  lock: BlockAttributesObject
  shortCodeTransforms: [BlockAttributesObject]!
  sizeSlug: String!
  style: BlockAttributesObject
  textColor: String
}

type CoreGalleryBlockDeprecatedV3AttributesImages {
  alt: String!
  caption: String
  fullUrl: String
  id: String
  link: String
  url: String
}

type CoreGalleryBlockDeprecatedV4Attributes {
  align: String
  allowResize: Boolean!
  anchor: String
  backgroundColor: String
  caption: String
  className: String
  columns: Float
  fixedHeight: Boolean!
  gradient: String
  ids: [Float]!
  imageCrop: Boolean!
  images: [CoreGalleryBlockDeprecatedV4AttributesImages]!
  layout: BlockAttributesObject
  linkTarget: String
  linkTo: String
  lock: BlockAttributesObject
  shortCodeTransforms: [BlockAttributesObject]!
  sizeSlug: String!
  style: BlockAttributesObject
  textColor: String
}

type CoreGalleryBlockDeprecatedV4AttributesImages {
  alt: String!
  caption: String
  fullUrl: String
  id: String
  link: String
  url: String
}

type CoreGalleryBlockDeprecatedV5Attributes {
  align: String
  allowResize: Boolean!
  anchor: String
  backgroundColor: String
  caption: String
  className: String
  columns: Float
  fixedHeight: Boolean!
  gradient: String
  ids: [Float]!
  imageCrop: Boolean!
  images: [CoreGalleryBlockDeprecatedV5AttributesImages]!
  layout: BlockAttributesObject
  linkTarget: String
  linkTo: String
  lock: BlockAttributesObject
  shortCodeTransforms: [BlockAttributesObject]!
  sizeSlug: String!
  style: BlockAttributesObject
  textColor: String
}

type CoreGalleryBlockDeprecatedV5AttributesImages {
  alt: String!
  caption: String
  fullUrl: String
  id: String
  link: String
  url: String
}

type CoreGalleryBlockDeprecatedV6Attributes {
  align: String
  allowResize: Boolean!
  anchor: String
  backgroundColor: String
  caption: String
  className: String
  columns: Float
  fixedHeight: Boolean!
  gradient: String
  ids: [Float]!
  imageCrop: Boolean!
  images: [CoreGalleryBlockDeprecatedV6AttributesImages]!
  layout: BlockAttributesObject
  linkTarget: String
  linkTo: String
  lock: BlockAttributesObject
  shortCodeTransforms: [BlockAttributesObject]!
  sizeSlug: String!
  style: BlockAttributesObject
  textColor: String
}

type CoreGalleryBlockDeprecatedV6AttributesImages {
  alt: String!
  caption: String
  fullUrl: String
  id: String
  link: String
  url: String
}

type CoreGalleryBlockDeprecatedV7Attributes {
  align: String
  allowResize: Boolean!
  anchor: String
  backgroundColor: String
  caption: String
  className: String
  columns: Float
  fixedHeight: Boolean!
  gradient: String
  ids: [Float]!
  imageCrop: Boolean!
  images: [CoreGalleryBlockDeprecatedV7AttributesImages]!
  layout: BlockAttributesObject
  linkTarget: String
  linkTo: String
  lock: BlockAttributesObject
  shortCodeTransforms: [BlockAttributesObject]!
  sizeSlug: String!
  style: BlockAttributesObject
  textColor: String
}

type CoreGalleryBlockDeprecatedV7AttributesImages {
  alt: String!
  caption: String
  fullUrl: String
  id: String
  link: String
  url: String
}

"""
core/group block
"""
type CoreGroupBlock implements Block {
  attributes: CoreGroupBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreGroupBlockAttributes {
  align: String
  allowedBlocks: BlockAttributesArray
  anchor: String
  ariaLabel: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  metadata: BlockAttributesObject
  settings: BlockAttributesObject
  style: BlockAttributesObject
  tagName: String!
  textColor: String
}

union CoreGroupBlockAttributesUnion =
  | CoreGroupBlockAttributes
  | CoreGroupBlockDeprecatedV1Attributes
  | CoreGroupBlockDeprecatedV2Attributes
  | CoreGroupBlockDeprecatedV3Attributes
  | CoreGroupBlockDeprecatedV4Attributes
  | CoreGroupBlockDeprecatedV5Attributes

type CoreGroupBlockDeprecatedV1Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  anchor: String
  ariaLabel: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  metadata: BlockAttributesObject
  settings: BlockAttributesObject
  style: BlockAttributesObject
  tagName: String!
  textColor: String
}

type CoreGroupBlockDeprecatedV2Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  anchor: String
  ariaLabel: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  metadata: BlockAttributesObject
  settings: BlockAttributesObject
  style: BlockAttributesObject
  tagName: String!
  textColor: String
}

type CoreGroupBlockDeprecatedV3Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  anchor: String
  ariaLabel: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  metadata: BlockAttributesObject
  settings: BlockAttributesObject
  style: BlockAttributesObject
  tagName: String!
  textColor: String
}

type CoreGroupBlockDeprecatedV4Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  anchor: String
  ariaLabel: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  metadata: BlockAttributesObject
  settings: BlockAttributesObject
  style: BlockAttributesObject
  tagName: String!
  textColor: String
}

type CoreGroupBlockDeprecatedV5Attributes {
  align: String
  allowedBlocks: BlockAttributesArray
  anchor: String
  ariaLabel: String
  backgroundColor: String
  borderColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  metadata: BlockAttributesObject
  settings: BlockAttributesObject
  style: BlockAttributesObject
  tagName: String!
  textColor: String
}

"""
core/heading block
"""
type CoreHeadingBlock implements Block {
  attributes: CoreHeadingBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreHeadingBlockAttributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  content: String!
  fontFamily: String
  fontSize: String
  gradient: String
  level: Float!
  lock: BlockAttributesObject
  placeholder: String
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

union CoreHeadingBlockAttributesUnion =
  | CoreHeadingBlockAttributes
  | CoreHeadingBlockDeprecatedV1Attributes
  | CoreHeadingBlockDeprecatedV2Attributes
  | CoreHeadingBlockDeprecatedV3Attributes
  | CoreHeadingBlockDeprecatedV4Attributes
  | CoreHeadingBlockDeprecatedV5Attributes

type CoreHeadingBlockDeprecatedV1Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  content: String!
  fontFamily: String
  fontSize: String
  gradient: String
  level: Float!
  lock: BlockAttributesObject
  placeholder: String
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

type CoreHeadingBlockDeprecatedV2Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  content: String!
  fontFamily: String
  fontSize: String
  gradient: String
  level: Float!
  lock: BlockAttributesObject
  placeholder: String
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

type CoreHeadingBlockDeprecatedV3Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  content: String!
  fontFamily: String
  fontSize: String
  gradient: String
  level: Float!
  lock: BlockAttributesObject
  placeholder: String
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

type CoreHeadingBlockDeprecatedV4Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  content: String!
  fontFamily: String
  fontSize: String
  gradient: String
  level: Float!
  lock: BlockAttributesObject
  placeholder: String
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

type CoreHeadingBlockDeprecatedV5Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  content: String!
  fontFamily: String
  fontSize: String
  gradient: String
  level: Float!
  lock: BlockAttributesObject
  placeholder: String
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/home-link block
"""
type CoreHomeLinkBlock implements Block {
  attributes: CoreHomeLinkBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreHomeLinkBlockAttributes {
  className: String
  fontFamily: String
  fontSize: String
  label: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
}

"""
core/html block
"""
type CoreHtmlBlock implements Block {
  attributes: CoreHtmlBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreHtmlBlockAttributes {
  content: String
  lock: BlockAttributesObject
}

"""
core/image block
"""
type CoreImageBlock implements Block {
  attributes: CoreImageBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Connection between the CoreImageBlock type and the MediaItem type
  """
  mediaItem: CoreImageBlockToMediaItemConnectionEdge
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreImageBlockAttributes {
  align: String
  alt: String!
  anchor: String
  aspectRatio: String
  borderColor: String
  caption: String
  className: String
  height: String
  href: String
  id: Float
  lightbox: BlockAttributesObject
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  rel: String
  scale: String
  sizeSlug: String
  style: BlockAttributesObject
  title: String
  url: String
  width: String
}

union CoreImageBlockAttributesUnion =
  | CoreImageBlockAttributes
  | CoreImageBlockDeprecatedV1Attributes
  | CoreImageBlockDeprecatedV2Attributes
  | CoreImageBlockDeprecatedV3Attributes
  | CoreImageBlockDeprecatedV4Attributes
  | CoreImageBlockDeprecatedV5Attributes
  | CoreImageBlockDeprecatedV6Attributes
  | CoreImageBlockDeprecatedV7Attributes
  | CoreImageBlockDeprecatedV8Attributes

type CoreImageBlockDeprecatedV1Attributes {
  align: String
  alt: String!
  anchor: String
  aspectRatio: String
  borderColor: String
  caption: String
  className: String
  height: String
  href: String
  id: Float
  lightbox: BlockAttributesObject
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  rel: String
  scale: String
  sizeSlug: String
  style: BlockAttributesObject
  title: String
  url: String
  width: String
}

type CoreImageBlockDeprecatedV2Attributes {
  align: String
  alt: String!
  anchor: String
  aspectRatio: String
  borderColor: String
  caption: String
  className: String
  height: String
  href: String
  id: Float
  lightbox: BlockAttributesObject
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  rel: String
  scale: String
  sizeSlug: String
  style: BlockAttributesObject
  title: String
  url: String
  width: String
}

type CoreImageBlockDeprecatedV3Attributes {
  align: String
  alt: String!
  anchor: String
  aspectRatio: String
  borderColor: String
  caption: String
  className: String
  height: String
  href: String
  id: Float
  lightbox: BlockAttributesObject
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  rel: String
  scale: String
  sizeSlug: String
  style: BlockAttributesObject
  title: String
  url: String
  width: String
}

type CoreImageBlockDeprecatedV4Attributes {
  align: String
  alt: String!
  anchor: String
  aspectRatio: String
  borderColor: String
  caption: String
  className: String
  height: String
  href: String
  id: Float
  lightbox: BlockAttributesObject
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  rel: String
  scale: String
  sizeSlug: String
  style: BlockAttributesObject
  title: String
  url: String
  width: String
}

type CoreImageBlockDeprecatedV5Attributes {
  align: String
  alt: String!
  anchor: String
  aspectRatio: String
  borderColor: String
  caption: String
  className: String
  height: String
  href: String
  id: Float
  lightbox: BlockAttributesObject
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  rel: String
  scale: String
  sizeSlug: String
  style: BlockAttributesObject
  title: String
  url: String
  width: String
}

type CoreImageBlockDeprecatedV6Attributes {
  align: String
  alt: String!
  anchor: String
  aspectRatio: String
  borderColor: String
  caption: String
  className: String
  height: String
  href: String
  id: Float
  lightbox: BlockAttributesObject
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  rel: String
  scale: String
  sizeSlug: String
  style: BlockAttributesObject
  title: String
  url: String
  width: String
}

type CoreImageBlockDeprecatedV7Attributes {
  align: String
  alt: String!
  anchor: String
  aspectRatio: String
  borderColor: String
  caption: String
  className: String
  height: String
  href: String
  id: Float
  lightbox: BlockAttributesObject
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  rel: String
  scale: String
  sizeSlug: String
  style: BlockAttributesObject
  title: String
  url: String
  width: String
}

type CoreImageBlockDeprecatedV8Attributes {
  align: String
  alt: String!
  anchor: String
  aspectRatio: String
  borderColor: String
  caption: String
  className: String
  height: String
  href: String
  id: Float
  lightbox: BlockAttributesObject
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  rel: String
  scale: String
  sizeSlug: String
  style: BlockAttributesObject
  title: String
  url: String
  width: String
}

"""
Connection between the CoreImageBlock type and the MediaItem type
"""
type CoreImageBlockToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: MediaItem!
}

"""
core/latest-comments block
"""
type CoreLatestCommentsBlock implements Block {
  attributes: CoreLatestCommentsBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreLatestCommentsBlockAttributes {
  align: String
  className: String
  commentsToShow: Float!
  displayAvatar: Boolean!
  displayDate: Boolean!
  displayExcerpt: Boolean!
  fontFamily: String
  fontSize: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
}

"""
core/latest-posts block
"""
type CoreLatestPostsBlock implements Block {
  attributes: CoreLatestPostsBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreLatestPostsBlockAttributes {
  addLinkToFeaturedImage: Boolean!
  align: String
  backgroundColor: String
  categories: [BlockAttributesObject]
  className: String
  columns: Float!
  displayAuthor: Boolean!
  displayFeaturedImage: Boolean!
  displayPostContent: Boolean!
  displayPostContentRadio: String!
  displayPostDate: Boolean!
  excerptLength: Float!
  featuredImageAlign: String
  featuredImageSizeHeight: Float
  featuredImageSizeSlug: String!
  featuredImageSizeWidth: Float
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  order: String!
  orderBy: String!
  postLayout: String!
  postsToShow: Float!
  selectedAuthor: Float
  style: BlockAttributesObject
  textColor: String
}

union CoreLatestPostsBlockAttributesUnion =
  | CoreLatestPostsBlockAttributes
  | CoreLatestPostsBlockDeprecatedV1Attributes

type CoreLatestPostsBlockDeprecatedV1Attributes {
  addLinkToFeaturedImage: Boolean!
  align: String
  backgroundColor: String
  categories: [BlockAttributesObject]
  className: String
  columns: Float!
  displayAuthor: Boolean!
  displayFeaturedImage: Boolean!
  displayPostContent: Boolean!
  displayPostContentRadio: String!
  displayPostDate: Boolean!
  excerptLength: Float!
  featuredImageAlign: String
  featuredImageSizeHeight: Float
  featuredImageSizeSlug: String!
  featuredImageSizeWidth: Float
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  order: String!
  orderBy: String!
  postLayout: String!
  postsToShow: Float!
  selectedAuthor: Float
  style: BlockAttributesObject
  textColor: String
}

"""
core/legacy-widget block
"""
type CoreLegacyWidgetBlock implements Block {
  attributes: CoreLegacyWidgetBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreLegacyWidgetBlockAttributes {
  className: String
  id: String
  idBase: String
  instance: BlockAttributesObject
  lock: BlockAttributesObject
}

"""
core/list block
"""
type CoreListBlock implements Block {
  attributes: CoreListBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreListBlockAttributes {
  anchor: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  ordered: Boolean!
  placeholder: String
  reversed: Boolean
  start: Float
  style: BlockAttributesObject
  textColor: String
  type: String
  values: String!
}

union CoreListBlockAttributesUnion =
  | CoreListBlockAttributes
  | CoreListBlockDeprecatedV1Attributes
  | CoreListBlockDeprecatedV2Attributes
  | CoreListBlockDeprecatedV3Attributes

type CoreListBlockDeprecatedV1Attributes {
  anchor: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  ordered: Boolean!
  placeholder: String
  reversed: Boolean
  start: Float
  style: BlockAttributesObject
  textColor: String
  type: String
  values: String!
}

type CoreListBlockDeprecatedV2Attributes {
  anchor: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  ordered: Boolean!
  placeholder: String
  reversed: Boolean
  start: Float
  style: BlockAttributesObject
  textColor: String
  type: String
  values: String!
}

type CoreListBlockDeprecatedV3Attributes {
  anchor: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  ordered: Boolean!
  placeholder: String
  reversed: Boolean
  start: Float
  style: BlockAttributesObject
  textColor: String
  type: String
  values: String!
}

"""
core/list-item block
"""
type CoreListItemBlock implements Block {
  attributes: CoreListItemBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreListItemBlockAttributes {
  className: String
  content: String!
  fontFamily: String
  fontSize: String
  lock: BlockAttributesObject
  placeholder: String
  style: BlockAttributesObject
}

"""
core/loginout block
"""
type CoreLoginoutBlock implements Block {
  attributes: CoreLoginoutBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreLoginoutBlockAttributes {
  className: String
  displayLoginAsForm: Boolean!
  fontFamily: String
  fontSize: String
  lock: BlockAttributesObject
  redirectToCurrent: Boolean!
  style: BlockAttributesObject
}

"""
core/media-text block
"""
type CoreMediaTextBlock implements Block {
  attributes: CoreMediaTextBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreMediaTextBlockAttributes {
  align: String!
  allowedBlocks: BlockAttributesArray
  anchor: String
  backgroundColor: String
  className: String
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  href: String
  imageFill: Boolean
  isStackedOnMobile: Boolean!
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  mediaAlt: String!
  mediaId: Float
  mediaLink: String
  mediaPosition: String!
  mediaSizeSlug: String
  mediaType: String
  mediaUrl: String
  mediaWidth: Float!
  rel: String
  style: BlockAttributesObject
  textColor: String
  verticalAlignment: String
}

union CoreMediaTextBlockAttributesUnion =
  | CoreMediaTextBlockAttributes
  | CoreMediaTextBlockDeprecatedV1Attributes
  | CoreMediaTextBlockDeprecatedV2Attributes
  | CoreMediaTextBlockDeprecatedV3Attributes
  | CoreMediaTextBlockDeprecatedV4Attributes
  | CoreMediaTextBlockDeprecatedV5Attributes
  | CoreMediaTextBlockDeprecatedV6Attributes

type CoreMediaTextBlockDeprecatedV1Attributes {
  align: String!
  allowedBlocks: BlockAttributesArray
  anchor: String
  backgroundColor: String
  className: String
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  href: String
  imageFill: Boolean
  isStackedOnMobile: Boolean!
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  mediaAlt: String!
  mediaId: Float
  mediaLink: String
  mediaPosition: String!
  mediaSizeSlug: String
  mediaType: String
  mediaUrl: String
  mediaWidth: Float!
  rel: String
  style: BlockAttributesObject
  textColor: String
  verticalAlignment: String
}

type CoreMediaTextBlockDeprecatedV2Attributes {
  align: String!
  allowedBlocks: BlockAttributesArray
  anchor: String
  backgroundColor: String
  className: String
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  href: String
  imageFill: Boolean
  isStackedOnMobile: Boolean!
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  mediaAlt: String!
  mediaId: Float
  mediaLink: String
  mediaPosition: String!
  mediaSizeSlug: String
  mediaType: String
  mediaUrl: String
  mediaWidth: Float!
  rel: String
  style: BlockAttributesObject
  textColor: String
  verticalAlignment: String
}

type CoreMediaTextBlockDeprecatedV3Attributes {
  align: String!
  allowedBlocks: BlockAttributesArray
  anchor: String
  backgroundColor: String
  className: String
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  href: String
  imageFill: Boolean
  isStackedOnMobile: Boolean!
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  mediaAlt: String!
  mediaId: Float
  mediaLink: String
  mediaPosition: String!
  mediaSizeSlug: String
  mediaType: String
  mediaUrl: String
  mediaWidth: Float!
  rel: String
  style: BlockAttributesObject
  textColor: String
  verticalAlignment: String
}

type CoreMediaTextBlockDeprecatedV4Attributes {
  align: String!
  allowedBlocks: BlockAttributesArray
  anchor: String
  backgroundColor: String
  className: String
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  href: String
  imageFill: Boolean
  isStackedOnMobile: Boolean!
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  mediaAlt: String!
  mediaId: Float
  mediaLink: String
  mediaPosition: String!
  mediaSizeSlug: String
  mediaType: String
  mediaUrl: String
  mediaWidth: Float!
  rel: String
  style: BlockAttributesObject
  textColor: String
  verticalAlignment: String
}

type CoreMediaTextBlockDeprecatedV5Attributes {
  align: String!
  allowedBlocks: BlockAttributesArray
  anchor: String
  backgroundColor: String
  className: String
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  href: String
  imageFill: Boolean
  isStackedOnMobile: Boolean!
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  mediaAlt: String!
  mediaId: Float
  mediaLink: String
  mediaPosition: String!
  mediaSizeSlug: String
  mediaType: String
  mediaUrl: String
  mediaWidth: Float!
  rel: String
  style: BlockAttributesObject
  textColor: String
  verticalAlignment: String
}

type CoreMediaTextBlockDeprecatedV6Attributes {
  align: String!
  allowedBlocks: BlockAttributesArray
  anchor: String
  backgroundColor: String
  className: String
  focalPoint: BlockAttributesObject
  fontFamily: String
  fontSize: String
  gradient: String
  href: String
  imageFill: Boolean
  isStackedOnMobile: Boolean!
  linkClass: String
  linkDestination: String
  linkTarget: String
  lock: BlockAttributesObject
  mediaAlt: String!
  mediaId: Float
  mediaLink: String
  mediaPosition: String!
  mediaSizeSlug: String
  mediaType: String
  mediaUrl: String
  mediaWidth: Float!
  rel: String
  style: BlockAttributesObject
  textColor: String
  verticalAlignment: String
}

"""
core/missing block
"""
type CoreMissingBlock implements Block {
  attributes: CoreMissingBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreMissingBlockAttributes {
  lock: BlockAttributesObject
  originalContent: String
  originalName: String
  originalUndelimitedContent: String
}

"""
core/more block
"""
type CoreMoreBlock implements Block {
  attributes: CoreMoreBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreMoreBlockAttributes {
  customText: String
  lock: BlockAttributesObject
  noTeaser: Boolean!
}

"""
core/navigation block
"""
type CoreNavigationBlock implements Block {
  attributes: CoreNavigationBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreNavigationBlockAttributes {
  align: String
  ariaLabel: String
  backgroundColor: String
  className: String
  customBackgroundColor: String
  customOverlayBackgroundColor: String
  customOverlayTextColor: String
  customTextColor: String
  fontFamily: String
  fontSize: String
  hasIcon: Boolean!
  icon: String!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  maxNestingLevel: Float!
  openSubmenusOnClick: Boolean!
  overlayBackgroundColor: String
  overlayMenu: String!
  overlayTextColor: String
  ref: Float
  rgbBackgroundColor: String
  rgbTextColor: String
  showSubmenuIcon: Boolean!
  style: BlockAttributesObject
  textColor: String
  unstableLocation: String
}

union CoreNavigationBlockAttributesUnion =
  | CoreNavigationBlockAttributes
  | CoreNavigationBlockDeprecatedV1Attributes
  | CoreNavigationBlockDeprecatedV2Attributes
  | CoreNavigationBlockDeprecatedV3Attributes
  | CoreNavigationBlockDeprecatedV4Attributes
  | CoreNavigationBlockDeprecatedV5Attributes
  | CoreNavigationBlockDeprecatedV6Attributes

type CoreNavigationBlockDeprecatedV1Attributes {
  align: String
  ariaLabel: String
  backgroundColor: String
  className: String
  customBackgroundColor: String
  customOverlayBackgroundColor: String
  customOverlayTextColor: String
  customTextColor: String
  fontFamily: String
  fontSize: String
  hasIcon: Boolean!
  icon: String!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  maxNestingLevel: Float!
  openSubmenusOnClick: Boolean!
  overlayBackgroundColor: String
  overlayMenu: String!
  overlayTextColor: String
  ref: Float
  rgbBackgroundColor: String
  rgbTextColor: String
  showSubmenuIcon: Boolean!
  style: BlockAttributesObject
  textColor: String
  unstableLocation: String
}

type CoreNavigationBlockDeprecatedV2Attributes {
  align: String
  ariaLabel: String
  backgroundColor: String
  className: String
  customBackgroundColor: String
  customOverlayBackgroundColor: String
  customOverlayTextColor: String
  customTextColor: String
  fontFamily: String
  fontSize: String
  hasIcon: Boolean!
  icon: String!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  maxNestingLevel: Float!
  openSubmenusOnClick: Boolean!
  overlayBackgroundColor: String
  overlayMenu: String!
  overlayTextColor: String
  ref: Float
  rgbBackgroundColor: String
  rgbTextColor: String
  showSubmenuIcon: Boolean!
  style: BlockAttributesObject
  textColor: String
  unstableLocation: String
}

type CoreNavigationBlockDeprecatedV3Attributes {
  align: String
  ariaLabel: String
  backgroundColor: String
  className: String
  customBackgroundColor: String
  customOverlayBackgroundColor: String
  customOverlayTextColor: String
  customTextColor: String
  fontFamily: String
  fontSize: String
  hasIcon: Boolean!
  icon: String!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  maxNestingLevel: Float!
  openSubmenusOnClick: Boolean!
  overlayBackgroundColor: String
  overlayMenu: String!
  overlayTextColor: String
  ref: Float
  rgbBackgroundColor: String
  rgbTextColor: String
  showSubmenuIcon: Boolean!
  style: BlockAttributesObject
  textColor: String
  unstableLocation: String
}

type CoreNavigationBlockDeprecatedV4Attributes {
  align: String
  ariaLabel: String
  backgroundColor: String
  className: String
  customBackgroundColor: String
  customOverlayBackgroundColor: String
  customOverlayTextColor: String
  customTextColor: String
  fontFamily: String
  fontSize: String
  hasIcon: Boolean!
  icon: String!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  maxNestingLevel: Float!
  openSubmenusOnClick: Boolean!
  overlayBackgroundColor: String
  overlayMenu: String!
  overlayTextColor: String
  ref: Float
  rgbBackgroundColor: String
  rgbTextColor: String
  showSubmenuIcon: Boolean!
  style: BlockAttributesObject
  textColor: String
  unstableLocation: String
}

type CoreNavigationBlockDeprecatedV5Attributes {
  align: String
  ariaLabel: String
  backgroundColor: String
  className: String
  customBackgroundColor: String
  customOverlayBackgroundColor: String
  customOverlayTextColor: String
  customTextColor: String
  fontFamily: String
  fontSize: String
  hasIcon: Boolean!
  icon: String!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  maxNestingLevel: Float!
  openSubmenusOnClick: Boolean!
  overlayBackgroundColor: String
  overlayMenu: String!
  overlayTextColor: String
  ref: Float
  rgbBackgroundColor: String
  rgbTextColor: String
  showSubmenuIcon: Boolean!
  style: BlockAttributesObject
  textColor: String
  unstableLocation: String
}

type CoreNavigationBlockDeprecatedV6Attributes {
  align: String
  ariaLabel: String
  backgroundColor: String
  className: String
  customBackgroundColor: String
  customOverlayBackgroundColor: String
  customOverlayTextColor: String
  customTextColor: String
  fontFamily: String
  fontSize: String
  hasIcon: Boolean!
  icon: String!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  maxNestingLevel: Float!
  openSubmenusOnClick: Boolean!
  overlayBackgroundColor: String
  overlayMenu: String!
  overlayTextColor: String
  ref: Float
  rgbBackgroundColor: String
  rgbTextColor: String
  showSubmenuIcon: Boolean!
  style: BlockAttributesObject
  textColor: String
  unstableLocation: String
}

"""
core/navigation-link block
"""
type CoreNavigationLinkBlock implements Block {
  attributes: CoreNavigationLinkBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreNavigationLinkBlockAttributes {
  className: String
  description: String
  fontFamily: String
  fontSize: String
  id: Float
  isTopLevelLink: Boolean
  kind: String
  label: String
  lock: BlockAttributesObject
  opensInNewTab: Boolean!
  rel: String
  style: BlockAttributesObject
  title: String
  type: String
  url: String
}

union CoreNavigationLinkBlockAttributesUnion =
  | CoreNavigationLinkBlockAttributes
  | CoreNavigationLinkBlockDeprecatedV1Attributes

type CoreNavigationLinkBlockDeprecatedV1Attributes {
  className: String
  description: String
  fontFamily: String
  fontSize: String
  id: Float
  isTopLevelLink: Boolean
  kind: String
  label: String
  lock: BlockAttributesObject
  opensInNewTab: Boolean!
  rel: String
  style: BlockAttributesObject
  title: String
  type: String
  url: String
}

"""
core/navigation-submenu block
"""
type CoreNavigationSubmenuBlock implements Block {
  attributes: CoreNavigationSubmenuBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreNavigationSubmenuBlockAttributes {
  className: String
  description: String
  id: Float
  isTopLevelItem: Boolean
  kind: String
  label: String
  lock: BlockAttributesObject
  opensInNewTab: Boolean!
  rel: String
  title: String
  type: String
  url: String
}

"""
core/nextpage block
"""
type CoreNextpageBlock implements Block {
  attributes: CoreNextpageBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreNextpageBlockAttributes {
  lock: BlockAttributesObject
}

"""
core/page-list block
"""
type CorePageListBlock implements Block {
  attributes: CorePageListBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePageListBlockAttributes {
  className: String
  fontFamily: String
  fontSize: String
  isNested: Boolean!
  lock: BlockAttributesObject
  parentPageID: Int!
  style: BlockAttributesObject
}

"""
core/page-list-item block
"""
type CorePageListItemBlock implements Block {
  attributes: CorePageListItemBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePageListItemBlockAttributes {
  className: String
  hasChildren: Boolean
  id: Float
  label: String
  link: String
  lock: BlockAttributesObject
  title: String
}

"""
core/paragraph block
"""
type CoreParagraphBlock implements Block {
  attributes: CoreParagraphBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreParagraphBlockAttributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  content: String!
  direction: String
  dropCap: Boolean!
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  placeholder: String
  style: BlockAttributesObject
  textColor: String
}

union CoreParagraphBlockAttributesUnion =
  | CoreParagraphBlockAttributes
  | CoreParagraphBlockDeprecatedV1Attributes
  | CoreParagraphBlockDeprecatedV2Attributes
  | CoreParagraphBlockDeprecatedV3Attributes
  | CoreParagraphBlockDeprecatedV4Attributes
  | CoreParagraphBlockDeprecatedV5Attributes
  | CoreParagraphBlockDeprecatedV6Attributes

type CoreParagraphBlockDeprecatedV1Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  content: String!
  direction: String
  dropCap: Boolean!
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  placeholder: String
  style: BlockAttributesObject
  textColor: String
}

type CoreParagraphBlockDeprecatedV2Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  content: String!
  direction: String
  dropCap: Boolean!
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  placeholder: String
  style: BlockAttributesObject
  textColor: String
}

type CoreParagraphBlockDeprecatedV3Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  content: String!
  direction: String
  dropCap: Boolean!
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  placeholder: String
  style: BlockAttributesObject
  textColor: String
}

type CoreParagraphBlockDeprecatedV4Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  content: String!
  direction: String
  dropCap: Boolean!
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  placeholder: String
  style: BlockAttributesObject
  textColor: String
}

type CoreParagraphBlockDeprecatedV5Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  content: String!
  direction: String
  dropCap: Boolean!
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  placeholder: String
  style: BlockAttributesObject
  textColor: String
}

type CoreParagraphBlockDeprecatedV6Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  content: String!
  direction: String
  dropCap: Boolean!
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  placeholder: String
  style: BlockAttributesObject
  textColor: String
}

"""
core/pattern block
"""
type CorePatternBlock implements Block {
  attributes: CorePatternBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePatternBlockAttributes {
  className: String
  lock: BlockAttributesObject
  slug: String
}

"""
core/post-author-biography block
"""
type CorePostAuthorBiographyBlock implements Block {
  attributes: CorePostAuthorBiographyBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePostAuthorBiographyBlockAttributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/post-author block
"""
type CorePostAuthorBlock implements Block {
  attributes: CorePostAuthorBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePostAuthorBlockAttributes {
  avatarSize: Float!
  backgroundColor: String
  byline: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  isLink: Boolean!
  linkTarget: String!
  lock: BlockAttributesObject
  showAvatar: Boolean!
  showBio: Boolean
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/post-author-name block
"""
type CorePostAuthorNameBlock implements Block {
  attributes: CorePostAuthorNameBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePostAuthorNameBlockAttributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  isLink: Boolean!
  linkTarget: String!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/post-comments-form block
"""
type CorePostCommentsFormBlock implements Block {
  attributes: CorePostCommentsFormBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePostCommentsFormBlockAttributes {
  backgroundColor: String
  className: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/post-content block
"""
type CorePostContentBlock implements Block {
  attributes: CorePostContentBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePostContentBlockAttributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

"""
core/post-date block
"""
type CorePostDateBlock implements Block {
  attributes: CorePostDateBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePostDateBlockAttributes {
  backgroundColor: String
  className: String
  displayType: String!
  fontFamily: String
  fontSize: String
  format: String
  gradient: String
  isLink: Boolean!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

union CorePostDateBlockAttributesUnion =
  | CorePostDateBlockAttributes
  | CorePostDateBlockDeprecatedV1Attributes

type CorePostDateBlockDeprecatedV1Attributes {
  backgroundColor: String
  className: String
  displayType: String!
  fontFamily: String
  fontSize: String
  format: String
  gradient: String
  isLink: Boolean!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/post-excerpt block
"""
type CorePostExcerptBlock implements Block {
  attributes: CorePostExcerptBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePostExcerptBlockAttributes {
  backgroundColor: String
  className: String
  excerptLength: Float!
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  moreText: String
  showMoreOnNewLine: Boolean!
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/post-featured-image block
"""
type CorePostFeaturedImageBlock implements Block {
  attributes: CorePostFeaturedImageBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePostFeaturedImageBlockAttributes {
  align: String
  aspectRatio: String
  borderColor: String
  className: String
  customGradient: String
  customOverlayColor: String
  dimRatio: Float!
  gradient: String
  height: String
  isLink: Boolean!
  linkTarget: String!
  lock: BlockAttributesObject
  overlayColor: String
  rel: String!
  scale: String!
  sizeSlug: String
  style: BlockAttributesObject
  width: String
}

"""
core/post-navigation-link block
"""
type CorePostNavigationLinkBlock implements Block {
  attributes: CorePostNavigationLinkBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePostNavigationLinkBlockAttributes {
  arrow: String!
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  label: String
  linkLabel: Boolean!
  lock: BlockAttributesObject
  showTitle: Boolean!
  style: BlockAttributesObject
  textAlign: String
  textColor: String
  type: String!
}

"""
core/post-template block
"""
type CorePostTemplateBlock implements Block {
  attributes: CorePostTemplateBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePostTemplateBlockAttributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

"""
core/post-terms block
"""
type CorePostTermsBlock implements Block {
  attributes: CorePostTermsBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePostTermsBlockAttributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  prefix: String!
  separator: String!
  style: BlockAttributesObject
  suffix: String!
  term: String
  textAlign: String
  textColor: String
}

"""
core/post-title block
"""
type CorePostTitleBlock implements Block {
  attributes: CorePostTitleBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePostTitleBlockAttributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  isLink: Boolean!
  level: Float!
  linkTarget: String!
  lock: BlockAttributesObject
  rel: String!
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

union CorePostTitleBlockAttributesUnion =
  | CorePostTitleBlockAttributes
  | CorePostTitleBlockDeprecatedV1Attributes

type CorePostTitleBlockDeprecatedV1Attributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  isLink: Boolean!
  level: Float!
  linkTarget: String!
  lock: BlockAttributesObject
  rel: String!
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/preformatted block
"""
type CorePreformattedBlock implements Block {
  attributes: CorePreformattedBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePreformattedBlockAttributes {
  anchor: String
  backgroundColor: String
  className: String
  content: String!
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

"""
core/pullquote block
"""
type CorePullquoteBlock implements Block {
  attributes: CorePullquoteBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CorePullquoteBlockAttributes {
  align: String
  anchor: String
  backgroundColor: String
  borderColor: String
  citation: String!
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
  value: String
}

union CorePullquoteBlockAttributesUnion =
  | CorePullquoteBlockAttributes
  | CorePullquoteBlockDeprecatedV1Attributes
  | CorePullquoteBlockDeprecatedV2Attributes
  | CorePullquoteBlockDeprecatedV3Attributes
  | CorePullquoteBlockDeprecatedV4Attributes
  | CorePullquoteBlockDeprecatedV5Attributes
  | CorePullquoteBlockDeprecatedV6Attributes

type CorePullquoteBlockDeprecatedV1Attributes {
  align: String
  anchor: String
  backgroundColor: String
  borderColor: String
  citation: String!
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
  value: String
}

type CorePullquoteBlockDeprecatedV2Attributes {
  align: String
  anchor: String
  backgroundColor: String
  borderColor: String
  citation: String!
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
  value: String
}

type CorePullquoteBlockDeprecatedV3Attributes {
  align: String
  anchor: String
  backgroundColor: String
  borderColor: String
  citation: String!
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
  value: String
}

type CorePullquoteBlockDeprecatedV4Attributes {
  align: String
  anchor: String
  backgroundColor: String
  borderColor: String
  citation: String!
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
  value: String
}

type CorePullquoteBlockDeprecatedV5Attributes {
  align: String
  anchor: String
  backgroundColor: String
  borderColor: String
  citation: String!
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
  value: String
}

type CorePullquoteBlockDeprecatedV6Attributes {
  align: String
  anchor: String
  backgroundColor: String
  borderColor: String
  citation: String!
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
  value: String
}

"""
core/query block
"""
type CoreQueryBlock implements Block {
  attributes: CoreQueryBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreQueryBlockAttributes {
  align: String
  className: String
  enhancedPagination: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  namespace: String
  query: BlockAttributesObject!
  queryId: Float
  tagName: String!
}

union CoreQueryBlockAttributesUnion =
  | CoreQueryBlockAttributes
  | CoreQueryBlockDeprecatedV1Attributes
  | CoreQueryBlockDeprecatedV2Attributes
  | CoreQueryBlockDeprecatedV3Attributes
  | CoreQueryBlockDeprecatedV4Attributes
  | CoreQueryBlockDeprecatedV5Attributes

type CoreQueryBlockDeprecatedV1Attributes {
  align: String
  className: String
  enhancedPagination: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  namespace: String
  query: BlockAttributesObject!
  queryId: Float
  tagName: String!
}

type CoreQueryBlockDeprecatedV2Attributes {
  align: String
  className: String
  enhancedPagination: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  namespace: String
  query: BlockAttributesObject!
  queryId: Float
  tagName: String!
}

type CoreQueryBlockDeprecatedV3Attributes {
  align: String
  className: String
  enhancedPagination: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  namespace: String
  query: BlockAttributesObject!
  queryId: Float
  tagName: String!
}

type CoreQueryBlockDeprecatedV4Attributes {
  align: String
  className: String
  enhancedPagination: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  namespace: String
  query: BlockAttributesObject!
  queryId: Float
  tagName: String!
}

type CoreQueryBlockDeprecatedV5Attributes {
  align: String
  className: String
  enhancedPagination: Boolean!
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  namespace: String
  query: BlockAttributesObject!
  queryId: Float
  tagName: String!
}

"""
core/query-no-results block
"""
type CoreQueryNoResultsBlock implements Block {
  attributes: CoreQueryNoResultsBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreQueryNoResultsBlockAttributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

"""
core/query-pagination block
"""
type CoreQueryPaginationBlock implements Block {
  attributes: CoreQueryPaginationBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreQueryPaginationBlockAttributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  paginationArrow: String!
  showLabel: Boolean!
  style: BlockAttributesObject
  textColor: String
}

union CoreQueryPaginationBlockAttributesUnion =
  | CoreQueryPaginationBlockAttributes
  | CoreQueryPaginationBlockDeprecatedV1Attributes

type CoreQueryPaginationBlockDeprecatedV1Attributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  paginationArrow: String!
  showLabel: Boolean!
  style: BlockAttributesObject
  textColor: String
}

"""
core/query-pagination-next block
"""
type CoreQueryPaginationNextBlock implements Block {
  attributes: CoreQueryPaginationNextBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreQueryPaginationNextBlockAttributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  label: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

"""
core/query-pagination-numbers block
"""
type CoreQueryPaginationNumbersBlock implements Block {
  attributes: CoreQueryPaginationNumbersBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreQueryPaginationNumbersBlockAttributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  midSize: Float!
  style: BlockAttributesObject
  textColor: String
}

"""
core/query-pagination-previous block
"""
type CoreQueryPaginationPreviousBlock implements Block {
  attributes: CoreQueryPaginationPreviousBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreQueryPaginationPreviousBlockAttributes {
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  label: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

"""
core/query-title block
"""
type CoreQueryTitleBlock implements Block {
  attributes: CoreQueryTitleBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreQueryTitleBlockAttributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  level: Float!
  lock: BlockAttributesObject
  showPrefix: Boolean!
  showSearchTerm: Boolean!
  style: BlockAttributesObject
  textAlign: String
  textColor: String
  type: String
}

union CoreQueryTitleBlockAttributesUnion =
  | CoreQueryTitleBlockAttributes
  | CoreQueryTitleBlockDeprecatedV1Attributes

type CoreQueryTitleBlockDeprecatedV1Attributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  level: Float!
  lock: BlockAttributesObject
  showPrefix: Boolean!
  showSearchTerm: Boolean!
  style: BlockAttributesObject
  textAlign: String
  textColor: String
  type: String
}

"""
core/quote block
"""
type CoreQuoteBlock implements Block {
  attributes: CoreQuoteBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreQuoteBlockAttributes {
  align: String
  anchor: String
  backgroundColor: String
  citation: String!
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
  value: String!
}

union CoreQuoteBlockAttributesUnion =
  | CoreQuoteBlockAttributes
  | CoreQuoteBlockDeprecatedV1Attributes
  | CoreQuoteBlockDeprecatedV2Attributes
  | CoreQuoteBlockDeprecatedV3Attributes
  | CoreQuoteBlockDeprecatedV4Attributes

type CoreQuoteBlockDeprecatedV1Attributes {
  align: String
  anchor: String
  backgroundColor: String
  citation: String!
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
  value: String!
}

type CoreQuoteBlockDeprecatedV2Attributes {
  align: String
  anchor: String
  backgroundColor: String
  citation: String!
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
  value: String!
}

type CoreQuoteBlockDeprecatedV3Attributes {
  align: String
  anchor: String
  backgroundColor: String
  citation: String!
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
  value: String!
}

type CoreQuoteBlockDeprecatedV4Attributes {
  align: String
  anchor: String
  backgroundColor: String
  citation: String!
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
  value: String!
}

"""
core/read-more block
"""
type CoreReadMoreBlock implements Block {
  attributes: CoreReadMoreBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreReadMoreBlockAttributes {
  backgroundColor: String
  borderColor: String
  className: String
  content: String
  fontFamily: String
  fontSize: String
  gradient: String
  linkTarget: String!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

"""
core/rss block
"""
type CoreRssBlock implements Block {
  attributes: CoreRssBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreRssBlockAttributes {
  align: String
  blockLayout: String!
  className: String
  columns: Float!
  displayAuthor: Boolean!
  displayDate: Boolean!
  displayExcerpt: Boolean!
  excerptLength: Float!
  feedURL: String!
  itemsToShow: Float!
  lock: BlockAttributesObject
}

"""
core/search block
"""
type CoreSearchBlock implements Block {
  attributes: CoreSearchBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreSearchBlockAttributes {
  align: String
  backgroundColor: String
  borderColor: String
  buttonBehavior: String!
  buttonPosition: String!
  buttonText: String
  buttonUseIcon: Boolean!
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  isSearchFieldHidden: Boolean!
  label: String
  lock: BlockAttributesObject
  placeholder: String!
  query: BlockAttributesObject!
  showLabel: Boolean!
  style: BlockAttributesObject
  textColor: String
  width: Float
  widthUnit: String
}

"""
core/separator block
"""
type CoreSeparatorBlock implements Block {
  attributes: CoreSeparatorBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreSeparatorBlockAttributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  gradient: String
  lock: BlockAttributesObject
  opacity: String!
  style: BlockAttributesObject
  textColor: String
}

union CoreSeparatorBlockAttributesUnion =
  | CoreSeparatorBlockAttributes
  | CoreSeparatorBlockDeprecatedV1Attributes

type CoreSeparatorBlockDeprecatedV1Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  gradient: String
  lock: BlockAttributesObject
  opacity: String!
  style: BlockAttributesObject
  textColor: String
}

"""
core/shortcode block
"""
type CoreShortcodeBlock implements Block {
  attributes: CoreShortcodeBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreShortcodeBlockAttributes {
  lock: BlockAttributesObject
  text: String
}

"""
core/site-logo block
"""
type CoreSiteLogoBlock implements Block {
  attributes: CoreSiteLogoBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreSiteLogoBlockAttributes {
  align: String
  className: String
  isLink: Boolean!
  linkTarget: String!
  lock: BlockAttributesObject
  shouldSyncIcon: Boolean
  style: BlockAttributesObject
  width: Float
}

"""
core/site-tagline block
"""
type CoreSiteTaglineBlock implements Block {
  attributes: CoreSiteTaglineBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreSiteTaglineBlockAttributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

union CoreSiteTaglineBlockAttributesUnion =
  | CoreSiteTaglineBlockAttributes
  | CoreSiteTaglineBlockDeprecatedV1Attributes

type CoreSiteTaglineBlockDeprecatedV1Attributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/site-title block
"""
type CoreSiteTitleBlock implements Block {
  attributes: CoreSiteTitleBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreSiteTitleBlockAttributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  isLink: Boolean!
  level: Float!
  linkTarget: String!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

union CoreSiteTitleBlockAttributesUnion =
  | CoreSiteTitleBlockAttributes
  | CoreSiteTitleBlockDeprecatedV1Attributes

type CoreSiteTitleBlockDeprecatedV1Attributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  gradient: String
  isLink: Boolean!
  level: Float!
  linkTarget: String!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/social-link block
"""
type CoreSocialLinkBlock implements Block {
  attributes: CoreSocialLinkBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreSocialLinkBlockAttributes {
  className: String
  label: String
  lock: BlockAttributesObject
  rel: String
  service: String
  url: String
}

"""
core/social-links block
"""
type CoreSocialLinksBlock implements Block {
  attributes: CoreSocialLinksBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreSocialLinksBlockAttributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  customIconBackgroundColor: String
  customIconColor: String
  gradient: String
  iconBackgroundColor: String
  iconBackgroundColorValue: String
  iconColor: String
  iconColorValue: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  openInNewTab: Boolean!
  showLabels: Boolean!
  size: String
  style: BlockAttributesObject
  textColor: String
}

union CoreSocialLinksBlockAttributesUnion =
  | CoreSocialLinksBlockAttributes
  | CoreSocialLinksBlockDeprecatedV1Attributes

type CoreSocialLinksBlockDeprecatedV1Attributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  customIconBackgroundColor: String
  customIconColor: String
  gradient: String
  iconBackgroundColor: String
  iconBackgroundColorValue: String
  iconColor: String
  iconColorValue: String
  layout: BlockAttributesObject
  lock: BlockAttributesObject
  openInNewTab: Boolean!
  showLabels: Boolean!
  size: String
  style: BlockAttributesObject
  textColor: String
}

"""
core/spacer block
"""
type CoreSpacerBlock implements Block {
  attributes: CoreSpacerBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreSpacerBlockAttributes {
  anchor: String
  className: String
  height: String!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  width: String
}

union CoreSpacerBlockAttributesUnion =
  | CoreSpacerBlockAttributes
  | CoreSpacerBlockDeprecatedV1Attributes

type CoreSpacerBlockDeprecatedV1Attributes {
  anchor: String
  className: String
  height: String!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  width: String
}

"""
core/table block
"""
type CoreTableBlock implements Block {
  attributes: CoreTableBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreTableBlockAttributes {
  align: String
  anchor: String
  backgroundColor: String
  body: [CoreTableBlockAttributesBody]!
  borderColor: String
  caption: String!
  className: String
  fontFamily: String
  fontSize: String
  foot: [CoreTableBlockAttributesFoot]!
  gradient: String
  hasFixedLayout: Boolean!
  head: [CoreTableBlockAttributesHead]!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

type CoreTableBlockAttributesBody {
  cells: [CoreTableBlockAttributesBodyCells]!
}

type CoreTableBlockAttributesBodyCells {
  align: String
  colspan: String
  content: String
  rowspan: String
  scope: String
  tag: String!
}

type CoreTableBlockAttributesFoot {
  cells: [CoreTableBlockAttributesFootCells]!
}

type CoreTableBlockAttributesFootCells {
  align: String
  colspan: String
  content: String
  rowspan: String
  scope: String
  tag: String!
}

type CoreTableBlockAttributesHead {
  cells: [CoreTableBlockAttributesHeadCells]!
}

type CoreTableBlockAttributesHeadCells {
  align: String
  colspan: String
  content: String
  rowspan: String
  scope: String
  tag: String!
}

union CoreTableBlockAttributesUnion =
  | CoreTableBlockAttributes
  | CoreTableBlockDeprecatedV1Attributes
  | CoreTableBlockDeprecatedV2Attributes
  | CoreTableBlockDeprecatedV3Attributes

type CoreTableBlockDeprecatedV1Attributes {
  align: String
  anchor: String
  backgroundColor: String
  body: [CoreTableBlockDeprecatedV1AttributesBody]!
  borderColor: String
  caption: String!
  className: String
  fontFamily: String
  fontSize: String
  foot: [CoreTableBlockDeprecatedV1AttributesFoot]!
  gradient: String
  hasFixedLayout: Boolean!
  head: [CoreTableBlockDeprecatedV1AttributesHead]!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

type CoreTableBlockDeprecatedV1AttributesBody {
  cells: [CoreTableBlockDeprecatedV1AttributesBodyCells]!
}

type CoreTableBlockDeprecatedV1AttributesBodyCells {
  align: String
  colspan: String
  content: String
  rowspan: String
  scope: String
  tag: String!
}

type CoreTableBlockDeprecatedV1AttributesFoot {
  cells: [CoreTableBlockDeprecatedV1AttributesFootCells]!
}

type CoreTableBlockDeprecatedV1AttributesFootCells {
  align: String
  colspan: String
  content: String
  rowspan: String
  scope: String
  tag: String!
}

type CoreTableBlockDeprecatedV1AttributesHead {
  cells: [CoreTableBlockDeprecatedV1AttributesHeadCells]!
}

type CoreTableBlockDeprecatedV1AttributesHeadCells {
  align: String
  colspan: String
  content: String
  rowspan: String
  scope: String
  tag: String!
}

type CoreTableBlockDeprecatedV2Attributes {
  align: String
  anchor: String
  backgroundColor: String
  body: [CoreTableBlockDeprecatedV2AttributesBody]!
  borderColor: String
  caption: String!
  className: String
  fontFamily: String
  fontSize: String
  foot: [CoreTableBlockDeprecatedV2AttributesFoot]!
  gradient: String
  hasFixedLayout: Boolean!
  head: [CoreTableBlockDeprecatedV2AttributesHead]!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

type CoreTableBlockDeprecatedV2AttributesBody {
  cells: [CoreTableBlockDeprecatedV2AttributesBodyCells]!
}

type CoreTableBlockDeprecatedV2AttributesBodyCells {
  align: String
  colspan: String
  content: String
  rowspan: String
  scope: String
  tag: String!
}

type CoreTableBlockDeprecatedV2AttributesFoot {
  cells: [CoreTableBlockDeprecatedV2AttributesFootCells]!
}

type CoreTableBlockDeprecatedV2AttributesFootCells {
  align: String
  colspan: String
  content: String
  rowspan: String
  scope: String
  tag: String!
}

type CoreTableBlockDeprecatedV2AttributesHead {
  cells: [CoreTableBlockDeprecatedV2AttributesHeadCells]!
}

type CoreTableBlockDeprecatedV2AttributesHeadCells {
  align: String
  colspan: String
  content: String
  rowspan: String
  scope: String
  tag: String!
}

type CoreTableBlockDeprecatedV3Attributes {
  align: String
  anchor: String
  backgroundColor: String
  body: [CoreTableBlockDeprecatedV3AttributesBody]!
  borderColor: String
  caption: String!
  className: String
  fontFamily: String
  fontSize: String
  foot: [CoreTableBlockDeprecatedV3AttributesFoot]!
  gradient: String
  hasFixedLayout: Boolean!
  head: [CoreTableBlockDeprecatedV3AttributesHead]!
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textColor: String
}

type CoreTableBlockDeprecatedV3AttributesBody {
  cells: [CoreTableBlockDeprecatedV3AttributesBodyCells]!
}

type CoreTableBlockDeprecatedV3AttributesBodyCells {
  align: String
  colspan: String
  content: String
  rowspan: String
  scope: String
  tag: String!
}

type CoreTableBlockDeprecatedV3AttributesFoot {
  cells: [CoreTableBlockDeprecatedV3AttributesFootCells]!
}

type CoreTableBlockDeprecatedV3AttributesFootCells {
  align: String
  colspan: String
  content: String
  rowspan: String
  scope: String
  tag: String!
}

type CoreTableBlockDeprecatedV3AttributesHead {
  cells: [CoreTableBlockDeprecatedV3AttributesHeadCells]!
}

type CoreTableBlockDeprecatedV3AttributesHeadCells {
  align: String
  colspan: String
  content: String
  rowspan: String
  scope: String
  tag: String!
}

"""
core/tag-cloud block
"""
type CoreTagCloudBlock implements Block {
  attributes: CoreTagCloudBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreTagCloudBlockAttributes {
  align: String
  className: String
  fontFamily: String
  largestFontSize: String!
  lock: BlockAttributesObject
  numberOfTags: Float!
  showTagCounts: Boolean!
  smallestFontSize: String!
  style: BlockAttributesObject
  taxonomy: String!
}

"""
core/template-part block
"""
type CoreTemplatePartBlock implements Block {
  attributes: CoreTemplatePartBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreTemplatePartBlockAttributes {
  align: String
  area: String
  className: String
  lock: BlockAttributesObject
  slug: String
  tagName: String
  theme: String
}

"""
core/term-description block
"""
type CoreTermDescriptionBlock implements Block {
  attributes: CoreTermDescriptionBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreTermDescriptionBlockAttributes {
  align: String
  backgroundColor: String
  className: String
  fontFamily: String
  fontSize: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/text-columns block
"""
type CoreTextColumnsBlock implements Block {
  attributes: CoreTextColumnsBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreTextColumnsBlockAttributes {
  className: String
  columns: Float!
  content: [CoreTextColumnsBlockAttributesContent]!
  lock: BlockAttributesObject
  width: String
}

type CoreTextColumnsBlockAttributesContent {
  children: String
}

"""
core/verse block
"""
type CoreVerseBlock implements Block {
  attributes: CoreVerseBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreVerseBlockAttributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  content: String!
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

union CoreVerseBlockAttributesUnion =
  | CoreVerseBlockAttributes
  | CoreVerseBlockDeprecatedV1Attributes
  | CoreVerseBlockDeprecatedV2Attributes

type CoreVerseBlockDeprecatedV1Attributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  content: String!
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

type CoreVerseBlockDeprecatedV2Attributes {
  anchor: String
  backgroundColor: String
  borderColor: String
  className: String
  content: String!
  fontFamily: String
  fontSize: String
  gradient: String
  lock: BlockAttributesObject
  style: BlockAttributesObject
  textAlign: String
  textColor: String
}

"""
core/video block
"""
type CoreVideoBlock implements Block {
  attributes: CoreVideoBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreVideoBlockAttributes {
  align: String
  anchor: String
  autoplay: Boolean
  caption: String
  className: String
  controls: Boolean!
  id: Float
  lock: BlockAttributesObject
  loop: Boolean
  muted: Boolean
  playsInline: Boolean
  poster: String
  preload: String!
  src: String
  style: BlockAttributesObject
  tracks: [BlockAttributesObject]!
}

union CoreVideoBlockAttributesUnion =
  | CoreVideoBlockAttributes
  | CoreVideoBlockDeprecatedV1Attributes

type CoreVideoBlockDeprecatedV1Attributes {
  align: String
  anchor: String
  autoplay: Boolean
  caption: String
  className: String
  controls: Boolean!
  id: Float
  lock: BlockAttributesObject
  loop: Boolean
  muted: Boolean
  playsInline: Boolean
  poster: String
  preload: String!
  src: String
  style: BlockAttributesObject
  tracks: [BlockAttributesObject]!
}

"""
core/widget-group block
"""
type CoreWidgetGroupBlock implements Block {
  attributes: CoreWidgetGroupBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type CoreWidgetGroupBlockAttributes {
  className: String
  lock: BlockAttributesObject
  title: String
}

union CoreWidgetGroupBlockAttributesUnion =
  | CoreWidgetGroupBlockAttributes
  | CoreWidgetGroupBlockDeprecatedV1Attributes

type CoreWidgetGroupBlockDeprecatedV1Attributes {
  className: String
  lock: BlockAttributesObject
  title: String
}

"""
Input for the createBerlinerWord mutation.
"""
input CreateBerlinerWordInput {
  """
  Set connections between the berlinerWord and berlinerischWordTypes
  """
  berlinerischWordTypes: BerlinerWordBerlinerischWordTypesInput
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17
  """
  date: String
  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
  """
  The ID of the parent object
  """
  parentId: ID
  """
  The password used to protect the content of the object
  """
  password: String
  """
  The slug of the object
  """
  slug: String
  """
  The status of the object
  """
  status: PostStatusEnum
  """
  The title of the object
  """
  title: String
}

"""
The payload for the createBerlinerWord mutation.
"""
type CreateBerlinerWordPayload {
  """
  The Post object mutation type.
  """
  berlinerWord: BerlinerWord
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
}

"""
Input for the createBerlinerischWordType mutation.
"""
input CreateBerlinerischWordTypeInput {
  """
  The slug that the berlinerisch_word_type will be an alias of
  """
  aliasOf: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The description of the berlinerisch_word_type object
  """
  description: String
  """
  The name of the berlinerisch_word_type object to mutate
  """
  name: String!
  """
  The database ID of the berlinerisch_word_type that should be set as the parent. This field cannot be used in conjunction with parentId
  """
  parentDatabaseId: Int
  """
  The ID of the berlinerisch_word_type that should be set as the parent. This field cannot be used in conjunction with parentDatabaseId
  """
  parentId: ID
  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the createBerlinerischWordType mutation.
"""
type CreateBerlinerischWordTypePayload {
  """
  The created berlinerisch_word_type
  """
  berlinerischWordType: BerlinerischWordType
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
}

"""
Input for the createBlockEditorPreview mutation.
"""
input CreateBlockEditorPreviewInput {
  """
  The userId to assign as the author of the object
  """
  authorId: ID
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The content of the object
  """
  content: String
  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17
  """
  date: String
  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
  """
  The password used to protect the content of the object
  """
  password: String
  """
  The slug of the object
  """
  slug: String
  """
  The status of the object
  """
  status: PostStatusEnum
  """
  The title of the object
  """
  title: String
}

"""
The payload for the createBlockEditorPreview mutation.
"""
type CreateBlockEditorPreviewPayload {
  """
  The Post object mutation type.
  """
  blockEditorPreview: BlockEditorPreview
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
}

"""
Input for the createCategory mutation.
"""
input CreateCategoryInput {
  """
  The slug that the category will be an alias of
  """
  aliasOf: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The description of the category object
  """
  description: String
  """
  The name of the category object to mutate
  """
  name: String!
  """
  The database ID of the category that should be set as the parent. This field cannot be used in conjunction with parentId
  """
  parentDatabaseId: Int
  """
  The ID of the category that should be set as the parent. This field cannot be used in conjunction with parentDatabaseId
  """
  parentId: ID
  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the createCategory mutation.
"""
type CreateCategoryPayload {
  """
  The created category
  """
  category: Category
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
}

"""
Input for the createComment mutation.
"""
input CreateCommentInput {
  """
  The name of the comment's author.
  """
  author: String
  """
  The email of the comment's author.
  """
  authorEmail: String
  """
  The url of the comment's author.
  """
  authorUrl: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The database ID of the post object the comment belongs to.
  """
  commentOn: Int
  """
  Content of the comment.
  """
  content: String
  """
  The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17
  """
  date: String
  """
  Parent comment ID of current comment.
  """
  parent: ID
  """
  The approval status of the comment
  """
  status: CommentStatusEnum
  """
  Type of comment.
  """
  type: String
}

"""
The payload for the createComment mutation.
"""
type CreateCommentPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The comment that was created
  """
  comment: Comment
  """
  Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache
  """
  success: Boolean
}

"""
Input for the createMediaItem mutation.
"""
input CreateMediaItemInput {
  """
  Alternative text to display when mediaItem is not displayed
  """
  altText: String
  """
  The userId to assign as the author of the mediaItem
  """
  authorId: ID
  """
  The caption for the mediaItem
  """
  caption: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The comment status for the mediaItem
  """
  commentStatus: String
  """
  The date of the mediaItem
  """
  date: String
  """
  The date (in GMT zone) of the mediaItem
  """
  dateGmt: String
  """
  Description of the mediaItem
  """
  description: String
  """
  The file name of the mediaItem
  """
  filePath: String
  """
  The file type of the mediaItem
  """
  fileType: MimeTypeEnum
  """
  The ID of the parent object
  """
  parentId: ID
  """
  The ping status for the mediaItem
  """
  pingStatus: String
  """
  The slug of the mediaItem
  """
  slug: String
  """
  The status of the mediaItem
  """
  status: MediaItemStatusEnum
  """
  The title of the mediaItem
  """
  title: String
}

"""
The payload for the createMediaItem mutation.
"""
type CreateMediaItemPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The MediaItem object mutation type.
  """
  mediaItem: MediaItem
}

"""
Input for the createPage mutation.
"""
input CreatePageInput {
  """
  The userId to assign as the author of the object
  """
  authorId: ID
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The comment status for the object
  """
  commentStatus: String
  """
  The content of the object
  """
  content: String
  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17
  """
  date: String
  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
  """
  The ID of the parent object
  """
  parentId: ID
  """
  The password used to protect the content of the object
  """
  password: String
  """
  The slug of the object
  """
  slug: String
  """
  The status of the object
  """
  status: PostStatusEnum
  """
  The title of the object
  """
  title: String
}

"""
The payload for the createPage mutation.
"""
type CreatePagePayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The Post object mutation type.
  """
  page: Page
}

"""
Input for the createPostFormat mutation.
"""
input CreatePostFormatInput {
  """
  The slug that the post_format will be an alias of
  """
  aliasOf: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The description of the post_format object
  """
  description: String
  """
  The name of the post_format object to mutate
  """
  name: String!
  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the createPostFormat mutation.
"""
type CreatePostFormatPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The created post_format
  """
  postFormat: PostFormat
}

"""
Input for the createPost mutation.
"""
input CreatePostInput {
  """
  The userId to assign as the author of the object
  """
  authorId: ID
  """
  Set connections between the post and categories
  """
  categories: PostCategoriesInput
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The comment status for the object
  """
  commentStatus: String
  """
  The content of the object
  """
  content: String
  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17
  """
  date: String
  """
  The excerpt of the object
  """
  excerpt: String
  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
  """
  The password used to protect the content of the object
  """
  password: String
  """
  The ping status for the object
  """
  pingStatus: String
  """
  URLs that have been pinged.
  """
  pinged: [String]
  """
  Set connections between the post and postFormats
  """
  postFormats: PostPostFormatsInput
  """
  The slug of the object
  """
  slug: String
  """
  The status of the object
  """
  status: PostStatusEnum
  """
  Set connections between the post and tags
  """
  tags: PostTagsInput
  """
  The title of the object
  """
  title: String
  """
  URLs queued to be pinged.
  """
  toPing: [String]
}

"""
The payload for the createPost mutation.
"""
type CreatePostPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The Post object mutation type.
  """
  post: Post
}

"""
Input for the createReusableBlock mutation.
"""
input CreateReusableBlockInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The content of the object
  """
  content: String
  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17
  """
  date: String
  """
  The excerpt of the object
  """
  excerpt: String
  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
  """
  The password used to protect the content of the object
  """
  password: String
  """
  The slug of the object
  """
  slug: String
  """
  The status of the object
  """
  status: PostStatusEnum
  """
  The title of the object
  """
  title: String
}

"""
The payload for the createReusableBlock mutation.
"""
type CreateReusableBlockPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The Post object mutation type.
  """
  reusableBlock: ReusableBlock
}

"""
Input for the createTag mutation.
"""
input CreateTagInput {
  """
  The slug that the post_tag will be an alias of
  """
  aliasOf: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The description of the post_tag object
  """
  description: String
  """
  The name of the post_tag object to mutate
  """
  name: String!
  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the createTag mutation.
"""
type CreateTagPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The created post_tag
  """
  tag: Tag
}

"""
Input for the createUser mutation.
"""
input CreateUserInput {
  """
  User's AOL IM account.
  """
  aim: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  A string containing content about the user.
  """
  description: String
  """
  A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String
  """
  A string containing the user's email address.
  """
  email: String
  """
  The user's first name.
  """
  firstName: String
  """
  User's Jabber account.
  """
  jabber: String
  """
  The user's last name.
  """
  lastName: String
  """
  User's locale.
  """
  locale: String
  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String
  """
  The user's nickname, defaults to the user's username.
  """
  nickname: String
  """
  A string that contains the plain text password for the user.
  """
  password: String
  """
  If true, this will refresh the users JWT secret.
  """
  refreshJwtUserSecret: Boolean
  """
  The date the user registered. Format is Y-m-d H:i:s.
  """
  registered: String
  """
  If true, this will revoke the users JWT secret. If false, this will unrevoke the JWT secret AND issue a new one. To revoke, the user must have proper capabilities to edit users JWT secrets.
  """
  revokeJwtUserSecret: Boolean
  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String
  """
  An array of roles to be assigned to the user.
  """
  roles: [String]
  """
  A string that contains the user's username for logging in.
  """
  username: String!
  """
  A string containing the user's URL for the user's web site.
  """
  websiteUrl: String
  """
  User's Yahoo IM account.
  """
  yim: String
}

"""
The payload for the createUser mutation.
"""
type CreateUserPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The User object mutation type.
  """
  user: User
}

"""
An object that has a unique numeric identifier in the database. Provides consistent access to the database ID across different object types.
"""
interface DatabaseIdentifier {
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
}

"""
Date values
"""
input DateInput {
  """
  Day of the month (from 1 to 31)
  """
  day: Int
  """
  Month number (from 1 to 12)
  """
  month: Int
  """
  4 digit year (e.g. 2017)
  """
  year: Int
}

"""
Filter the connection based on input
"""
input DateQueryInput {
  """
  Nodes should be returned after this date
  """
  after: DateInput
  """
  Nodes should be returned before this date
  """
  before: DateInput
  """
  Column to query against
  """
  column: PostObjectsConnectionDateColumnEnum
  """
  For after/before, whether exact value should be matched or not
  """
  compare: String
  """
  Day of the month (from 1 to 31)
  """
  day: Int
  """
  Hour (from 0 to 23)
  """
  hour: Int
  """
  For after/before, whether exact value should be matched or not
  """
  inclusive: Boolean
  """
  Minute (from 0 to 59)
  """
  minute: Int
  """
  Month number (from 1 to 12)
  """
  month: Int
  """
  OR or AND, how the sub-arrays should be compared
  """
  relation: RelationEnum
  """
  Second (0 to 59)
  """
  second: Int
  """
  Week of the year (from 0 to 53)
  """
  week: Int
  """
  4 digit year (e.g. 2017)
  """
  year: Int
}

"""
The template assigned to the node
"""
type DefaultTemplate implements ContentTemplate {
  """
  The name of the template
  """
  templateName: String
}

"""
Input for the deleteBerlinerWord mutation.
"""
input DeleteBerlinerWordInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean
  """
  The ID of the berlinerWord to delete
  """
  id: ID!
  """
  Override the edit lock when another user is editing the post
  """
  ignoreEditLock: Boolean
}

"""
The payload for the deleteBerlinerWord mutation.
"""
type DeleteBerlinerWordPayload {
  """
  The object before it was deleted
  """
  berlinerWord: BerlinerWord
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the deleted object
  """
  deletedId: ID
}

"""
Input for the deleteBerlinerischWordType mutation.
"""
input DeleteBerlinerischWordTypeInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the berlinerischWordType to delete
  """
  id: ID!
}

"""
The payload for the deleteBerlinerischWordType mutation.
"""
type DeleteBerlinerischWordTypePayload {
  """
  The deleted term object
  """
  berlinerischWordType: BerlinerischWordType
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the deleted object
  """
  deletedId: ID
}

"""
Input for the deleteBlockEditorPreview mutation.
"""
input DeleteBlockEditorPreviewInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean
  """
  The ID of the BlockEditorPreview to delete
  """
  id: ID!
  """
  Override the edit lock when another user is editing the post
  """
  ignoreEditLock: Boolean
}

"""
The payload for the deleteBlockEditorPreview mutation.
"""
type DeleteBlockEditorPreviewPayload {
  """
  The object before it was deleted
  """
  blockEditorPreview: BlockEditorPreview
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the deleted object
  """
  deletedId: ID
}

"""
Input for the deleteCategory mutation.
"""
input DeleteCategoryInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the category to delete
  """
  id: ID!
}

"""
The payload for the deleteCategory mutation.
"""
type DeleteCategoryPayload {
  """
  The deleted term object
  """
  category: Category
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the deleted object
  """
  deletedId: ID
}

"""
Input for the deleteComment mutation.
"""
input DeleteCommentInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  Whether the comment should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean
  """
  The deleted comment ID
  """
  id: ID!
}

"""
The payload for the deleteComment mutation.
"""
type DeleteCommentPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The deleted comment object
  """
  comment: Comment
  """
  The deleted comment ID
  """
  deletedId: ID
}

"""
Input for the deleteMediaItem mutation.
"""
input DeleteMediaItemInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  Whether the mediaItem should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean
  """
  The ID of the mediaItem to delete
  """
  id: ID!
}

"""
The payload for the deleteMediaItem mutation.
"""
type DeleteMediaItemPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the deleted mediaItem
  """
  deletedId: ID
  """
  The mediaItem before it was deleted
  """
  mediaItem: MediaItem
}

"""
Input for the deletePage mutation.
"""
input DeletePageInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean
  """
  The ID of the page to delete
  """
  id: ID!
  """
  Override the edit lock when another user is editing the post
  """
  ignoreEditLock: Boolean
}

"""
The payload for the deletePage mutation.
"""
type DeletePagePayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the deleted object
  """
  deletedId: ID
  """
  The object before it was deleted
  """
  page: Page
}

"""
Input for the deletePostFormat mutation.
"""
input DeletePostFormatInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the postFormat to delete
  """
  id: ID!
}

"""
The payload for the deletePostFormat mutation.
"""
type DeletePostFormatPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the deleted object
  """
  deletedId: ID
  """
  The deleted term object
  """
  postFormat: PostFormat
}

"""
Input for the deletePost mutation.
"""
input DeletePostInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean
  """
  The ID of the post to delete
  """
  id: ID!
  """
  Override the edit lock when another user is editing the post
  """
  ignoreEditLock: Boolean
}

"""
The payload for the deletePost mutation.
"""
type DeletePostPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the deleted object
  """
  deletedId: ID
  """
  The object before it was deleted
  """
  post: Post
}

"""
Input for the deleteReusableBlock mutation.
"""
input DeleteReusableBlockInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean
  """
  The ID of the ReusableBlock to delete
  """
  id: ID!
  """
  Override the edit lock when another user is editing the post
  """
  ignoreEditLock: Boolean
}

"""
The payload for the deleteReusableBlock mutation.
"""
type DeleteReusableBlockPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the deleted object
  """
  deletedId: ID
  """
  The object before it was deleted
  """
  reusableBlock: ReusableBlock
}

"""
Input for the deleteTag mutation.
"""
input DeleteTagInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the tag to delete
  """
  id: ID!
}

"""
The payload for the deleteTag mutation.
"""
type DeleteTagPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the deleted object
  """
  deletedId: ID
  """
  The deleted term object
  """
  tag: Tag
}

"""
Input for the deleteUser mutation.
"""
input DeleteUserInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the user you want to delete
  """
  id: ID!
  """
  Reassign posts and links to new User ID.
  """
  reassignId: ID
}

"""
The payload for the deleteUser mutation.
"""
type DeleteUserPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the user that you just deleted
  """
  deletedId: ID
  """
  The deleted user object
  """
  user: User
}

"""
The discussion setting type
"""
type DiscussionSettings {
  """
  Erlaube Besuchern, neue BeitrÃ¤ge zu kommentieren.
  """
  defaultCommentStatus: String
  """
  Link-Benachrichtigungen von anderen Blogs (Pingbacks und Trackbacks) zu neuen BeitrÃ¤gen erlauben.
  """
  defaultPingStatus: String
}

"""
Represents a connection between two objects. Contains both the related object (node) and metadata about the relationship (cursor).
"""
interface Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected node
  """
  node: Node!
}

"""
A script or stylesheet resource that should be loaded by the client. Contains information about the resource&#039;s location, dependencies, and loading behavior.
"""
interface EnqueuedAsset {
  """
  The inline code to be run after the asset is loaded.
  """
  after: [String]
  """
  Deprecated
  """
  args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")
  """
  The inline code to be run before the asset is loaded.
  """
  before: [String]
  """
  The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc
  """
  conditional: String
  """
  Dependencies needed to use this asset
  """
  dependencies: [EnqueuedAsset]
  """
  Extra information needed for the script
  """
  extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")
  """
  The loading group to which this asset belongs.
  """
  group: Int
  """
  The handle of the enqueued asset
  """
  handle: String
  """
  The ID of the enqueued asset
  """
  id: ID!
  """
  The source of the asset
  """
  src: String
  """
  The version of the enqueued asset
  """
  version: String
}

"""
Script enqueued by the CMS
"""
type EnqueuedScript implements EnqueuedAsset & Node {
  """
  The inline code to be run after the asset is loaded.
  """
  after: [String]
  """
  Deprecated
  """
  args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")
  """
  The inline code to be run before the asset is loaded.
  """
  before: [String]
  """
  The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc
  """
  conditional: String
  """
  Dependencies needed to use this asset
  """
  dependencies: [EnqueuedScript]
  """
  Extra information needed for the script
  """
  extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")
  """
  Extra data supplied to the enqueued script
  """
  extraData: String
  """
  The loading group to which this asset belongs.
  """
  group: Int
  """
  The location where this script should be loaded
  """
  groupLocation: ScriptLoadingGroupLocationEnum
  """
  The handle of the enqueued asset
  """
  handle: String
  """
  The global ID of the enqueued script
  """
  id: ID!
  """
  The source of the asset
  """
  src: String
  """
  The loading strategy to use on the script tag
  """
  strategy: ScriptLoadingStrategyEnum
  """
  The version of the enqueued script
  """
  version: String
}

"""
A paginated collection of EnqueuedScript Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of EnqueuedScript Nodes
"""
interface EnqueuedScriptConnection implements Connection {
  """
  A list of edges (relational context) between ContentNode and connected EnqueuedScript Nodes
  """
  edges: [EnqueuedScriptConnectionEdge!]!
  """
  A list of connected EnqueuedScript Nodes
  """
  nodes: [EnqueuedScript!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: EnqueuedScriptConnectionPageInfo!
}

"""
Represents a connection to a EnqueuedScript. Contains both the EnqueuedScript Node and metadata about the relationship.
"""
interface EnqueuedScriptConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected EnqueuedScript Node
  """
  node: EnqueuedScript!
}

"""
Pagination metadata specific to &quot;EnqueuedScriptConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;EnqueuedScriptConnectionEdge&quot; Nodes.
"""
interface EnqueuedScriptConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Stylesheet enqueued by the CMS
"""
type EnqueuedStylesheet implements EnqueuedAsset & Node {
  """
  The inline code to be run after the asset is loaded.
  """
  after: [String]
  """
  Deprecated
  """
  args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")
  """
  The inline code to be run before the asset is loaded.
  """
  before: [String]
  """
  The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc
  """
  conditional: String
  """
  Dependencies needed to use this asset
  """
  dependencies: [EnqueuedStylesheet]
  """
  Extra information needed for the script
  """
  extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")
  """
  The loading group to which this asset belongs.
  """
  group: Int
  """
  The handle of the enqueued asset
  """
  handle: String
  """
  The global ID of the enqueued stylesheet
  """
  id: ID!
  """
  Whether the enqueued style is RTL or not
  """
  isRtl: Boolean
  """
  The media attribute to use for the link
  """
  media: String
  """
  The absolute path to the enqueued style. Set when the stylesheet is meant to load inline.
  """
  path: String
  """
  The `rel` attribute to use for the link
  """
  rel: String
  """
  The source of the asset
  """
  src: String
  """
  Optional suffix, used in combination with RTL
  """
  suffix: String
  """
  The title of the enqueued style. Used for preferred/alternate stylesheets.
  """
  title: String
  """
  The version of the enqueued style
  """
  version: String
}

"""
A paginated collection of EnqueuedStylesheet Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of EnqueuedStylesheet Nodes
"""
interface EnqueuedStylesheetConnection implements Connection {
  """
  A list of edges (relational context) between ContentNode and connected EnqueuedStylesheet Nodes
  """
  edges: [EnqueuedStylesheetConnectionEdge!]!
  """
  A list of connected EnqueuedStylesheet Nodes
  """
  nodes: [EnqueuedStylesheet!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: EnqueuedStylesheetConnectionPageInfo!
}

"""
Represents a connection to a EnqueuedStylesheet. Contains both the EnqueuedStylesheet Node and metadata about the relationship.
"""
interface EnqueuedStylesheetConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected EnqueuedStylesheet Node
  """
  node: EnqueuedStylesheet!
}

"""
Pagination metadata specific to &quot;EnqueuedStylesheetConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;EnqueuedStylesheetConnectionEdge&quot; Nodes.
"""
interface EnqueuedStylesheetConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
The general setting type
"""
type GeneralSettings {
  """
  Ein Zeitformat fÃ¼r alle datumsbasierten Zeichenfolgen.
  """
  dateFormat: String
  """
  Website-Untertitel.
  """
  description: String
  """
  Diese Adresse wird fÃ¼r administrative Zwecke verwendet, wie Benachrichtigungen Ã¼ber neue Benutzer.
  """
  email: String
  """
  WordPress-LÃ¤ndercode.
  """
  language: String
  """
  Die Zahl eines Wochentages, mit dem die Woche beginnen sollte.
  """
  startOfWeek: Int
  """
  Ein Zeitformat fÃ¼r alle zeitbasierten Zeichenfolgen.
  """
  timeFormat: String
  """
  Eine Stadt in deiner Zeitzone.
  """
  timezone: String
  """
  Website-Titel.
  """
  title: String
  """
  Website-URL.
  """
  url: String
}

"""
The &quot;GithubRawData&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;.
"""
type GithubRawData implements AcfFieldGroup & AcfFieldGroupFields & GithubRawData_Fields {
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GithubRawData&quot; Field Group
  """
  codeLanguage: String
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;url&quot; Field Type added to the schema as part of the &quot;GithubRawData&quot; Field Group
  """
  githubRawUrl: String
}

"""
Interface representing fields of the ACF &quot;GithubRawData&quot; Field Group
"""
interface GithubRawData_Fields implements AcfFieldGroup & AcfFieldGroupFields {
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;GithubRawData&quot; Field Group
  """
  codeLanguage: String
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;url&quot; Field Type added to the schema as part of the &quot;GithubRawData&quot; Field Group
  """
  githubRawUrl: String
}

"""
Content that can be organized in a parent-child structure. Provides fields for navigating up and down the hierarchy and maintaining structured relationships.
"""
interface HierarchicalContentNode implements ContentNode & DatabaseIdentifier & HierarchicalNode & Node & UniformResourceIdentifiable {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection
  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  children(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection
  """
  Connection between the ContentNode type and the ContentType type
  """
  contentType: ContentNodeToContentTypeConnectionEdge
  """
  The name of the Content Type the node belongs to
  """
  contentTypeName: String!
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  Post publishing date.
  """
  date: String
  """
  The publishing date set in GMT.
  """
  dateGmt: String
  """
  The desired slug of the post
  """
  desiredSlug: String
  """
  If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  """
  The RSS enclosure for the object
  """
  enclosure: String
  """
  Connection between the ContentNode type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is a node in the preview state
  """
  isPreview: Boolean
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The user that most recently edited the node
  """
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  """
  The permalink of the post
  """
  link: String
  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String
  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String
  """
  The parent of the node. The parent object can be of various types
  """
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  """
  Database id of the parent node
  """
  parentDatabaseId: Int
  """
  The globally unique identifier of the parent node.
  """
  parentId: ID
  """
  The database id of the preview node
  """
  previewRevisionDatabaseId: Int
  """
  Whether the object is a node in the preview state
  """
  previewRevisionId: ID
  """
  The Yoast SEO data of the ContentNode
  """
  seo: PostTypeSEO
  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String
  """
  The current status of the object
  """
  status: String
  """
  The template assigned to a node of content
  """
  template: ContentTemplate
  """
  The unique resource identifier path
  """
  uri: String
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type HierarchicalContentNodeToContentNodeAncestorsConnection implements Connection & ContentNodeConnection {
  """
  Edges for the HierarchicalContentNodeToContentNodeAncestorsConnection connection
  """
  edges: [HierarchicalContentNodeToContentNodeAncestorsConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ContentNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo!
}

"""
An edge in a connection
"""
type HierarchicalContentNodeToContentNodeAncestorsConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ContentNode!
}

"""
Pagination metadata specific to &quot;HierarchicalContentNodeToContentNodeAncestorsConnection&quot; collections. Provides cursors and flags for navigating through sets of HierarchicalContentNodeToContentNodeAncestorsConnection Nodes.
"""
type HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection
"""
input HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs {
  """
  The Types of content to filter
  """
  contentTypes: [ContentTypeEnum]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type HierarchicalContentNodeToContentNodeChildrenConnection implements Connection & ContentNodeConnection {
  """
  Edges for the HierarchicalContentNodeToContentNodeChildrenConnection connection
  """
  edges: [HierarchicalContentNodeToContentNodeChildrenConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ContentNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo!
}

"""
An edge in a connection
"""
type HierarchicalContentNodeToContentNodeChildrenConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ContentNode!
}

"""
Pagination metadata specific to &quot;HierarchicalContentNodeToContentNodeChildrenConnection&quot; collections. Provides cursors and flags for navigating through sets of HierarchicalContentNodeToContentNodeChildrenConnection Nodes.
"""
type HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection
"""
input HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs {
  """
  The Types of content to filter
  """
  contentTypes: [ContentTypeEnum]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the HierarchicalContentNode type and the ContentNode type
"""
type HierarchicalContentNodeToParentContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: ContentNode!
}

"""
Content that can exist in a parent-child structure. Provides fields for navigating up (parent) and down (children) through the hierarchy.
"""
interface HierarchicalNode implements DatabaseIdentifier & Node {
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  Database id of the parent node
  """
  parentDatabaseId: Int
  """
  The globally unique identifier of the parent node.
  """
  parentId: ID
}

"""
Term node with hierarchical (parent/child) relationships
"""
interface HierarchicalTermNode implements DatabaseIdentifier & HierarchicalNode & Node & TermNode & UniformResourceIdentifiable {
  """
  The number of objects connected to the object
  """
  count: Int
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  The description of the object
  """
  description: String
  """
  Connection between the TermNode type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  """
  Connection between the TermNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The link to the term
  """
  link: String
  """
  The human friendly name of the object.
  """
  name: String
  """
  Database id of the parent node
  """
  parentDatabaseId: Int
  """
  The globally unique identifier of the parent node.
  """
  parentId: ID
  """
  An alphanumeric identifier for the object unique to its type.
  """
  slug: String
  """
  The name of the taxonomy that the object is associated with
  """
  taxonomyName: String
  """
  The ID of the term group that this term object belongs to
  """
  termGroupId: Int
  """
  The taxonomy ID that the object is associated with
  """
  termTaxonomyId: Int
  """
  The unique resource identifier path
  """
  uri: String
}

"""
Input for the login mutation.
"""
input LoginInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The plain-text password for the user logging in.
  """
  password: String!
  """
  The username used for login. Typically a unique or email address depending on specific configuration
  """
  username: String!
}

"""
The payload for the login mutation.
"""
type LoginPayload {
  """
  JWT Token that can be used in future requests for Authentication
  """
  authToken: String
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  A JWT token that can be used in future requests to get a refreshed jwtAuthToken. If the refresh token used in a request is revoked or otherwise invalid, a valid Auth token will NOT be issued in the response headers.
  """
  refreshToken: String
  """
  The user that was logged in
  """
  user: User
}

"""
File details for a Media Item
"""
type MediaDetails {
  """
  The filename of the mediaItem
  """
  file: String
  """
  The path to the mediaItem relative to the uploads directory
  """
  filePath: String
  """
  The height of the mediaItem
  """
  height: Int
  """
  Meta information associated with the mediaItem
  """
  meta: MediaItemMeta
  """
  The available sizes of the mediaItem
  """
  sizes(
    """
    The sizes to exclude. Will take precedence over `include`.
    """
    exclude: [MediaItemSizeEnum]
    """
    The sizes to include. Can be overridden by `exclude`.
    """
    include: [MediaItemSizeEnum]
  ): [MediaSize]
  """
  The width of the mediaItem
  """
  width: Int
}

"""
Represents uploaded media, including images, videos, documents, and audio files.
"""
type MediaItem implements ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & Node & NodeWithAuthor & NodeWithComments & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  """
  Alternative text to display when resource is not displayed
  """
  altText: String
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection
  """
  Connection between the NodeWithAuthor type and the User type
  """
  author: NodeWithAuthorToUserConnectionEdge
  """
  The database identifier of the author of the node
  """
  authorDatabaseId: Int
  """
  The globally unique identifier of the author of the node
  """
  authorId: ID
  """
  The caption for the resource
  """
  caption(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  children(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection
  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int
  """
  Whether the comments are open or closed for this particular post.
  """
  commentStatus: String
  """
  Connection between the MediaItem type and the Comment type
  """
  comments(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: MediaItemToCommentConnectionWhereArgs
  ): MediaItemToCommentConnection
  """
  Connection between the ContentNode type and the ContentType type
  """
  contentType: ContentNodeToContentTypeConnectionEdge
  """
  The name of the Content Type the node belongs to
  """
  contentTypeName: String!
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  Post publishing date.
  """
  date: String
  """
  The publishing date set in GMT.
  """
  dateGmt: String
  """
  Description of the image (stored as post_content)
  """
  description(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  The desired slug of the post
  """
  desiredSlug: String
  """
  If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  """
  The RSS enclosure for the object
  """
  enclosure: String
  """
  Connection between the ContentNode type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  """
  The filename of the mediaItem for the specified size (default size is full)
  """
  file(
    """
    Size of the MediaItem to return
    """
    size: MediaItemSizeEnum
  ): String
  """
  The path to the original file relative to the uploads directory
  """
  filePath(
    """
    Size of the MediaItem to return
    """
    size: MediaItemSizeEnum
  ): String
  """
  The filesize in bytes of the resource
  """
  fileSize(
    """
    Size of the MediaItem to return
    """
    size: MediaItemSizeEnum
  ): Int
  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String
  """
  Whether the attachment object is password protected.
  """
  hasPassword: Boolean
  """
  The globally unique identifier of the attachment object.
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is a node in the preview state
  """
  isPreview: Boolean
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The user that most recently edited the node
  """
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  """
  The permalink of the post
  """
  link: String
  """
  Details about the mediaItem
  """
  mediaDetails: MediaDetails
  """
  The id field matches the WP_Post-&gt;ID field.
  """
  mediaItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  """
  Url of the mediaItem
  """
  mediaItemUrl: String
  """
  Type of resource
  """
  mediaType: String
  """
  The mime type of the mediaItem
  """
  mimeType: String
  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String
  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String
  """
  The parent of the node. The parent object can be of various types
  """
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  """
  Database id of the parent node
  """
  parentDatabaseId: Int
  """
  The globally unique identifier of the parent node.
  """
  parentId: ID
  """
  The password for the attachment object.
  """
  password: String
  """
  The database id of the preview node
  """
  previewRevisionDatabaseId: Int
  """
  Whether the object is a node in the preview state
  """
  previewRevisionId: ID
  """
  The Yoast SEO data of the ContentNode
  """
  seo: PostTypeSEO
  """
  The sizes attribute value for an image.
  """
  sizes(
    """
    Size of the MediaItem to calculate sizes with
    """
    size: MediaItemSizeEnum
  ): String
  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String
  """
  Url of the mediaItem
  """
  sourceUrl(
    """
    Size of the MediaItem to return
    """
    size: MediaItemSizeEnum
  ): String
  """
  The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths.
  """
  srcSet(
    """
    Size of the MediaItem to calculate srcSet with
    """
    size: MediaItemSizeEnum
  ): String
  """
  The current status of the object
  """
  status: String
  """
  The template assigned to a node of content
  """
  template: ContentTemplate
  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  The unique resource identifier path
  """
  uri: String
}

"""
A paginated collection of mediaItem Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of mediaItem Nodes
"""
interface MediaItemConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected mediaItem Nodes
  """
  edges: [MediaItemConnectionEdge!]!
  """
  A list of connected mediaItem Nodes
  """
  nodes: [MediaItem!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: MediaItemConnectionPageInfo!
}

"""
Represents a connection to a mediaItem. Contains both the mediaItem Node and metadata about the relationship.
"""
interface MediaItemConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected mediaItem Node
  """
  node: MediaItem!
}

"""
Pagination metadata specific to &quot;MediaItemConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;MediaItemConnectionEdge&quot; Nodes.
"""
interface MediaItemConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Identifier types for retrieving a specific MediaItem. Specifies which unique attribute is used to find an exact MediaItem.
"""
enum MediaItemIdType {
  """
  Identify a resource by the Database ID.
  """
  DATABASE_ID
  """
  Identify a resource by the (hashed) Global ID.
  """
  ID
  """
  Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier.
  """
  SLUG
  """
  Identify a media item by its source url
  """
  SOURCE_URL
  """
  Identify a resource by the URI.
  """
  URI
}

"""
Meta connected to a MediaItem
"""
type MediaItemMeta {
  """
  Aperture measurement of the media item.
  """
  aperture: Float
  """
  Information about the camera used to create the media item.
  """
  camera: String
  """
  The text string description associated with the media item.
  """
  caption: String
  """
  Copyright information associated with the media item.
  """
  copyright: String
  """
  The date/time when the media was created.
  """
  createdTimestamp: Int
  """
  The original creator of the media item.
  """
  credit: String
  """
  The focal length value of the media item.
  """
  focalLength: Float
  """
  The ISO (International Organization for Standardization) value of the media item.
  """
  iso: Int
  """
  List of keywords used to describe or identfy the media item.
  """
  keywords: [String]
  """
  The vertical or horizontal aspect of the media item.
  """
  orientation: String
  """
  The shutter speed information of the media item.
  """
  shutterSpeed: Float
  """
  A useful title for the media item.
  """
  title: String
}

"""
Predefined image size variations. Represents the standard image dimensions available for media assets.
"""
enum MediaItemSizeEnum {
  """
  Large image preview suitable for detail views. (1024x1024)
  """
  LARGE
  """
  Medium image preview typically suitable for listings and detail views. (300x300)
  """
  MEDIUM
  """
  Medium-to-large image preview suitable for listings and detail views. (768x0)
  """
  MEDIUM_LARGE
  """
  Small image preview suitable for thumbnails and listings. (150x150)
  """
  THUMBNAIL
  """
  Custom Image Size. (1536x1536)
  """
  _1536X1536
  """
  Custom Image Size. (2048x2048)
  """
  _2048X2048
}

"""
Publication status for media items. Controls whether media is publicly accessible, private, or in another state.
"""
enum MediaItemStatusEnum {
  """
  Automatically created media that has not been finalized
  """
  AUTO_DRAFT
  """
  Media that inherits its publication status from the parent content
  """
  INHERIT
  """
  Media visible only to users with appropriate permissions
  """
  PRIVATE
  """
  Media marked for deletion but still recoverable
  """
  TRASH
}

"""
Connection between the MediaItem type and the Comment type
"""
type MediaItemToCommentConnection implements CommentConnection & Connection {
  """
  Edges for the MediaItemToCommentConnection connection
  """
  edges: [MediaItemToCommentConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Comment!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: MediaItemToCommentConnectionPageInfo!
}

"""
An edge in a connection
"""
type MediaItemToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Comment!
}

"""
Pagination metadata specific to &quot;MediaItemToCommentConnection&quot; collections. Provides cursors and flags for navigating through sets of MediaItemToCommentConnection Nodes.
"""
type MediaItemToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the MediaItemToCommentConnection connection
"""
input MediaItemToCommentConnectionWhereArgs {
  """
  Comment author email address.
  """
  authorEmail: String
  """
  Array of author IDs to include comments for.
  """
  authorIn: [ID]
  """
  Array of author IDs to exclude comments for.
  """
  authorNotIn: [ID]
  """
  Comment author URL.
  """
  authorUrl: String
  """
  Array of comment IDs to include.
  """
  commentIn: [ID]
  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]
  """
  Include comments of a given type.
  """
  commentType: String
  """
  Include comments from a given array of comment types.
  """
  commentTypeIn: [String]
  """
  Exclude comments from a given array of comment types.
  """
  commentTypeNotIn: String
  """
  Content object author ID to limit results by.
  """
  contentAuthor: [ID]
  """
  Array of author IDs to retrieve comments for.
  """
  contentAuthorIn: [ID]
  """
  Array of author IDs *not* to retrieve comments for.
  """
  contentAuthorNotIn: [ID]
  """
  Limit results to those affiliated with a given content object ID.
  """
  contentId: ID
  """
  Array of content object IDs to include affiliated comments for.
  """
  contentIdIn: [ID]
  """
  Array of content object IDs to exclude affiliated comments for.
  """
  contentIdNotIn: [ID]
  """
  Content object name (i.e. slug ) to retrieve affiliated comments for.
  """
  contentName: String
  """
  Content Object parent ID to retrieve affiliated comments for.
  """
  contentParent: Int
  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]
  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]
  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]
  """
  Karma score to retrieve matching comments for.
  """
  karma: Int
  """
  The cardinality of the order of the connection
  """
  order: OrderEnum
  """
  Field to order the comments by.
  """
  orderby: CommentsConnectionOrderbyEnum
  """
  Parent ID of comment to retrieve children of.
  """
  parent: Int
  """
  Array of parent IDs of comments to retrieve children for.
  """
  parentIn: [ID]
  """
  Array of parent IDs of comments *not* to retrieve children for.
  """
  parentNotIn: [ID]
  """
  Search term(s) to retrieve matching comments for.
  """
  search: String
  """
  One or more Comment Statuses to limit results by
  """
  statusIn: [CommentStatusEnum]
  """
  Include comments for a specific user ID.
  """
  userId: ID
}

"""
Details of an available size for a media item
"""
type MediaSize {
  """
  The filename of the referenced size
  """
  file: String
  """
  The path of the file for the referenced size (default size is full)
  """
  filePath: String
  """
  The filesize of the resource
  """
  fileSize: Int
  """
  The height of the referenced size
  """
  height: String
  """
  The mime type of the referenced size
  """
  mimeType: String
  """
  The referenced size name
  """
  name: String
  """
  The url of the referenced size
  """
  sourceUrl: String
  """
  The width of the referenced size
  """
  width: String
}

"""
Collections of navigation links. Menus can be assigned to designated locations and used to build site navigation structures.
"""
type Menu implements DatabaseIdentifier & Node {
  """
  The number of items in the menu
  """
  count: Int
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  The globally unique identifier of the nav menu object.
  """
  id: ID!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  The locations a menu is assigned to
  """
  locations: [MenuLocationEnum]
  """
  WP ID of the nav menu.
  """
  menuId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
  """
  Connection between the Menu type and the MenuItem type
  """
  menuItems(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: MenuToMenuItemConnectionWhereArgs
  ): MenuToMenuItemConnection
  """
  Display name of the menu. Equivalent to WP_Term-&gt;name.
  """
  name: String
  """
  The url friendly name of the menu. Equivalent to WP_Term-&gt;slug
  """
  slug: String
}

"""
A paginated collection of Menu Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of Menu Nodes
"""
interface MenuConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected Menu Nodes
  """
  edges: [MenuConnectionEdge!]!
  """
  A list of connected Menu Nodes
  """
  nodes: [Menu!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: MenuConnectionPageInfo!
}

"""
Represents a connection to a Menu. Contains both the Menu Node and metadata about the relationship.
"""
interface MenuConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected Menu Node
  """
  node: Menu!
}

"""
Pagination metadata specific to &quot;MenuConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;MenuConnectionEdge&quot; Nodes.
"""
interface MenuConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu.
"""
type MenuItem implements DatabaseIdentifier & Node {
  """
  Connection between the MenuItem type and the MenuItem type
  """
  childItems(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: MenuItemToMenuItemConnectionWhereArgs
  ): MenuItemToMenuItemConnection
  """
  Connection from MenuItem to it&#039;s connected node
  """
  connectedNode: MenuItemToMenuItemLinkableConnectionEdge
  """
  The object connected to this menu item.
  """
  connectedObject: MenuItemObjectUnion
    @deprecated(reason: "Deprecated in favor of the connectedNode field")
  """
  Class attribute for the menu item link
  """
  cssClasses: [String]
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  Description of the menu item.
  """
  description: String
  """
  The globally unique identifier of the nav menu item object.
  """
  id: ID!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Label or title of the menu item.
  """
  label: String
  """
  Link relationship (XFN) of the menu item.
  """
  linkRelationship: String
  """
  The locations the menu item&#039;s Menu is assigned to
  """
  locations: [MenuLocationEnum]
  """
  The Menu a MenuItem is part of
  """
  menu: MenuItemToMenuConnectionEdge
  """
  WP ID of the menu item.
  """
  menuItemId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
  """
  Menu item order
  """
  order: Int
  """
  The database id of the parent menu item or null if it is the root
  """
  parentDatabaseId: Int
  """
  The globally unique identifier of the parent nav menu item object.
  """
  parentId: ID
  """
  Path for the resource. Relative path for internal resources. Absolute path for external resources.
  """
  path: String
  """
  Target attribute for the menu item link.
  """
  target: String
  """
  Title attribute for the menu item link
  """
  title: String
  """
  The uri of the resource the menu item links to
  """
  uri: String
  """
  URL or destination of the menu item.
  """
  url: String
}

"""
A paginated collection of MenuItem Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of MenuItem Nodes
"""
interface MenuItemConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected MenuItem Nodes
  """
  edges: [MenuItemConnectionEdge!]!
  """
  A list of connected MenuItem Nodes
  """
  nodes: [MenuItem!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: MenuItemConnectionPageInfo!
}

"""
Represents a connection to a MenuItem. Contains both the MenuItem Node and metadata about the relationship.
"""
interface MenuItemConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected MenuItem Node
  """
  node: MenuItem!
}

"""
Pagination metadata specific to &quot;MenuItemConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;MenuItemConnectionEdge&quot; Nodes.
"""
interface MenuItemConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Content that can be referenced by navigation menu items. Provides the essential fields needed to create links within navigation structures.
"""
interface MenuItemLinkable implements DatabaseIdentifier & Node & UniformResourceIdentifiable {
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The unique resource identifier path
  """
  uri: String
}

"""
Represents a connection to a MenuItemLinkable. Contains both the MenuItemLinkable Node and metadata about the relationship.
"""
interface MenuItemLinkableConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected MenuItemLinkable Node
  """
  node: MenuItemLinkable!
}

"""
Identifier types for retrieving a specific menu item. Determines whether to look up menu items by global ID or database ID.
"""
enum MenuItemNodeIdTypeEnum {
  """
  Identify a resource by the Database ID.
  """
  DATABASE_ID
  """
  Identify a resource by the (hashed) Global ID.
  """
  ID
}

"""
Deprecated in favor of MenuItemLinkeable Interface
"""
union MenuItemObjectUnion = BerlinerWord | BerlinerischWordType | Category | Page | Post | Tag

"""
Connection between the MenuItem type and the Menu type
"""
type MenuItemToMenuConnectionEdge implements Edge & MenuConnectionEdge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: Menu!
}

"""
Connection between the MenuItem type and the MenuItem type
"""
type MenuItemToMenuItemConnection implements Connection & MenuItemConnection {
  """
  Edges for the MenuItemToMenuItemConnection connection
  """
  edges: [MenuItemToMenuItemConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [MenuItem!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: MenuItemToMenuItemConnectionPageInfo!
}

"""
An edge in a connection
"""
type MenuItemToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: MenuItem!
}

"""
Pagination metadata specific to &quot;MenuItemToMenuItemConnection&quot; collections. Provides cursors and flags for navigating through sets of MenuItemToMenuItemConnection Nodes.
"""
type MenuItemToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the MenuItemToMenuItemConnection connection
"""
input MenuItemToMenuItemConnectionWhereArgs {
  """
  The database ID of the object
  """
  id: Int
  """
  The menu location for the menu being queried
  """
  location: MenuLocationEnum
  """
  The database ID of the parent menu object
  """
  parentDatabaseId: Int
  """
  The ID of the parent menu object
  """
  parentId: ID
}

"""
Connection between the MenuItem type and the MenuItemLinkable type
"""
type MenuItemToMenuItemLinkableConnectionEdge implements Edge & MenuItemLinkableConnectionEdge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: MenuItemLinkable!
}

"""
Designated areas where navigation menus can be displayed. Represents the named regions in the interface where menus can be assigned.
"""
enum MenuLocationEnum {
  """
  Put the menu in the primary-menu location
  """
  PRIMARY_MENU
  """
  Put the menu in the secondary-menu location
  """
  SECONDARY_MENU
}

"""
Identifier types for retrieving a specific navigation menu. Specifies which property (ID, name, location) is used to locate a particular menu.
"""
enum MenuNodeIdTypeEnum {
  """
  Identify a menu node by the Database ID.
  """
  DATABASE_ID
  """
  Identify a menu node by the (hashed) Global ID.
  """
  ID
  """
  Identify a menu node by the slug of menu location to which it is assigned
  """
  LOCATION
  """
  Identify a menu node by its name
  """
  NAME
  """
  Identify a menu node by its slug
  """
  SLUG
}

"""
Connection between the Menu type and the MenuItem type
"""
type MenuToMenuItemConnection implements Connection & MenuItemConnection {
  """
  Edges for the MenuToMenuItemConnection connection
  """
  edges: [MenuToMenuItemConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [MenuItem!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: MenuToMenuItemConnectionPageInfo!
}

"""
An edge in a connection
"""
type MenuToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: MenuItem!
}

"""
Pagination metadata specific to &quot;MenuToMenuItemConnection&quot; collections. Provides cursors and flags for navigating through sets of MenuToMenuItemConnection Nodes.
"""
type MenuToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the MenuToMenuItemConnection connection
"""
input MenuToMenuItemConnectionWhereArgs {
  """
  The database ID of the object
  """
  id: Int
  """
  The menu location for the menu being queried
  """
  location: MenuLocationEnum
  """
  The database ID of the parent menu object
  """
  parentDatabaseId: Int
  """
  The ID of the parent menu object
  """
  parentId: ID
}

"""
Media file type classification based on MIME standards. Used to identify and filter media items by their format and content type.
"""
enum MimeTypeEnum {
  """
  application/java mime type.
  """
  APPLICATION_JAVA
  """
  application/javascript mime type.
  """
  APPLICATION_JAVASCRIPT
  """
  application/msword mime type.
  """
  APPLICATION_MSWORD
  """
  application/octet-stream mime type.
  """
  APPLICATION_OCTET_STREAM
  """
  application/onenote mime type.
  """
  APPLICATION_ONENOTE
  """
  application/oxps mime type.
  """
  APPLICATION_OXPS
  """
  application/pdf mime type.
  """
  APPLICATION_PDF
  """
  application/rar mime type.
  """
  APPLICATION_RAR
  """
  application/rtf mime type.
  """
  APPLICATION_RTF
  """
  application/ttaf+xml mime type.
  """
  APPLICATION_TTAF_XML
  """
  application/vnd.apple.keynote mime type.
  """
  APPLICATION_VND_APPLE_KEYNOTE
  """
  application/vnd.apple.numbers mime type.
  """
  APPLICATION_VND_APPLE_NUMBERS
  """
  application/vnd.apple.pages mime type.
  """
  APPLICATION_VND_APPLE_PAGES
  """
  application/vnd.ms-access mime type.
  """
  APPLICATION_VND_MS_ACCESS
  """
  application/vnd.ms-excel mime type.
  """
  APPLICATION_VND_MS_EXCEL
  """
  application/vnd.ms-excel.addin.macroEnabled.12 mime type.
  """
  APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12
  """
  application/vnd.ms-excel.sheet.binary.macroEnabled.12 mime type.
  """
  APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12
  """
  application/vnd.ms-excel.sheet.macroEnabled.12 mime type.
  """
  APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12
  """
  application/vnd.ms-excel.template.macroEnabled.12 mime type.
  """
  APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12
  """
  application/vnd.ms-powerpoint mime type.
  """
  APPLICATION_VND_MS_POWERPOINT
  """
  application/vnd.ms-powerpoint.addin.macroEnabled.12 mime type.
  """
  APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12
  """
  application/vnd.ms-powerpoint.presentation.macroEnabled.12 mime type.
  """
  APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12
  """
  application/vnd.ms-powerpoint.slideshow.macroEnabled.12 mime type.
  """
  APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12
  """
  application/vnd.ms-powerpoint.slide.macroEnabled.12 mime type.
  """
  APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12
  """
  application/vnd.ms-powerpoint.template.macroEnabled.12 mime type.
  """
  APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12
  """
  application/vnd.ms-project mime type.
  """
  APPLICATION_VND_MS_PROJECT
  """
  application/vnd.ms-word.document.macroEnabled.12 mime type.
  """
  APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12
  """
  application/vnd.ms-word.template.macroEnabled.12 mime type.
  """
  APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12
  """
  application/vnd.ms-write mime type.
  """
  APPLICATION_VND_MS_WRITE
  """
  application/vnd.ms-xpsdocument mime type.
  """
  APPLICATION_VND_MS_XPSDOCUMENT
  """
  application/vnd.oasis.opendocument.chart mime type.
  """
  APPLICATION_VND_OASIS_OPENDOCUMENT_CHART
  """
  application/vnd.oasis.opendocument.database mime type.
  """
  APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE
  """
  application/vnd.oasis.opendocument.formula mime type.
  """
  APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA
  """
  application/vnd.oasis.opendocument.graphics mime type.
  """
  APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS
  """
  application/vnd.oasis.opendocument.presentation mime type.
  """
  APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION
  """
  application/vnd.oasis.opendocument.spreadsheet mime type.
  """
  APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET
  """
  application/vnd.oasis.opendocument.text mime type.
  """
  APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT
  """
  application/vnd.openxmlformats-officedocument.presentationml.presentation mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION
  """
  application/vnd.openxmlformats-officedocument.presentationml.slide mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE
  """
  application/vnd.openxmlformats-officedocument.presentationml.slideshow mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW
  """
  application/vnd.openxmlformats-officedocument.presentationml.template mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE
  """
  application/vnd.openxmlformats-officedocument.spreadsheetml.sheet mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET
  """
  application/vnd.openxmlformats-officedocument.spreadsheetml.template mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE
  """
  application/vnd.openxmlformats-officedocument.wordprocessingml.document mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT
  """
  application/vnd.openxmlformats-officedocument.wordprocessingml.template mime type.
  """
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE
  """
  application/wordperfect mime type.
  """
  APPLICATION_WORDPERFECT
  """
  application/x-7z-compressed mime type.
  """
  APPLICATION_X_7Z_COMPRESSED
  """
  application/x-gzip mime type.
  """
  APPLICATION_X_GZIP
  """
  application/x-tar mime type.
  """
  APPLICATION_X_TAR
  """
  application/zip mime type.
  """
  APPLICATION_ZIP
  """
  audio/aac mime type.
  """
  AUDIO_AAC
  """
  audio/flac mime type.
  """
  AUDIO_FLAC
  """
  audio/midi mime type.
  """
  AUDIO_MIDI
  """
  audio/mpeg mime type.
  """
  AUDIO_MPEG
  """
  audio/ogg mime type.
  """
  AUDIO_OGG
  """
  audio/wav mime type.
  """
  AUDIO_WAV
  """
  audio/x-matroska mime type.
  """
  AUDIO_X_MATROSKA
  """
  audio/x-ms-wax mime type.
  """
  AUDIO_X_MS_WAX
  """
  audio/x-ms-wma mime type.
  """
  AUDIO_X_MS_WMA
  """
  audio/x-realaudio mime type.
  """
  AUDIO_X_REALAUDIO
  """
  image/avif mime type.
  """
  IMAGE_AVIF
  """
  image/bmp mime type.
  """
  IMAGE_BMP
  """
  image/gif mime type.
  """
  IMAGE_GIF
  """
  image/heic mime type.
  """
  IMAGE_HEIC
  """
  image/heic-sequence mime type.
  """
  IMAGE_HEIC_SEQUENCE
  """
  image/heif mime type.
  """
  IMAGE_HEIF
  """
  image/heif-sequence mime type.
  """
  IMAGE_HEIF_SEQUENCE
  """
  image/jpeg mime type.
  """
  IMAGE_JPEG
  """
  image/png mime type.
  """
  IMAGE_PNG
  """
  image/tiff mime type.
  """
  IMAGE_TIFF
  """
  image/webp mime type.
  """
  IMAGE_WEBP
  """
  image/x-icon mime type.
  """
  IMAGE_X_ICON
  """
  text/calendar mime type.
  """
  TEXT_CALENDAR
  """
  text/css mime type.
  """
  TEXT_CSS
  """
  text/csv mime type.
  """
  TEXT_CSV
  """
  text/html mime type.
  """
  TEXT_HTML
  """
  text/plain mime type.
  """
  TEXT_PLAIN
  """
  text/richtext mime type.
  """
  TEXT_RICHTEXT
  """
  text/tab-separated-values mime type.
  """
  TEXT_TAB_SEPARATED_VALUES
  """
  text/vtt mime type.
  """
  TEXT_VTT
  """
  video/3gpp mime type.
  """
  VIDEO_3GPP
  """
  video/3gpp2 mime type.
  """
  VIDEO_3GPP2
  """
  video/avi mime type.
  """
  VIDEO_AVI
  """
  video/divx mime type.
  """
  VIDEO_DIVX
  """
  video/mp4 mime type.
  """
  VIDEO_MP4
  """
  video/mpeg mime type.
  """
  VIDEO_MPEG
  """
  video/ogg mime type.
  """
  VIDEO_OGG
  """
  video/quicktime mime type.
  """
  VIDEO_QUICKTIME
  """
  video/webm mime type.
  """
  VIDEO_WEBM
  """
  video/x-flv mime type.
  """
  VIDEO_X_FLV
  """
  video/x-matroska mime type.
  """
  VIDEO_X_MATROSKA
  """
  video/x-ms-asf mime type.
  """
  VIDEO_X_MS_ASF
  """
  video/x-ms-wm mime type.
  """
  VIDEO_X_MS_WM
  """
  video/x-ms-wmv mime type.
  """
  VIDEO_X_MS_WMV
  """
  video/x-ms-wmx mime type.
  """
  VIDEO_X_MS_WMX
}

"""
An object with a globally unique identifier. All objects that can be identified by a unique ID implement this interface.
"""
interface Node {
  """
  The globally unique ID for the object
  """
  id: ID!
}

"""
Content that can be attributed to a specific user. Provides fields for accessing the author&#039;s information and establishing content ownership.
"""
interface NodeWithAuthor implements Node {
  """
  Connection between the NodeWithAuthor type and the User type
  """
  author: NodeWithAuthorToUserConnectionEdge
  """
  The database identifier of the author of the node
  """
  authorDatabaseId: Int
  """
  The globally unique identifier of the author of the node
  """
  authorId: ID
  """
  The globally unique ID for the object
  """
  id: ID!
}

"""
Connection between the NodeWithAuthor type and the User type
"""
type NodeWithAuthorToUserConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: User!
}

"""
Content that can receive and display user-submitted comments. Provides fields for accessing comment counts and managing comment status.
"""
interface NodeWithComments implements Node {
  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int
  """
  Whether the comments are open or closed for this particular post.
  """
  commentStatus: String
  """
  The globally unique ID for the object
  """
  id: ID!
}

"""
Content that has a main body field which can contain formatted text and media. Provides access to both raw (with appropriate permissions) and rendered versions of the content.
"""
interface NodeWithContentEditor implements Node {
  """
  The content of the post.
  """
  content(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  The globally unique ID for the object
  """
  id: ID!
}

"""
A node which provides an excerpt field, which is a condensed summary of the main content. Excerpts can be manually created or automatically generated and are often used in content listings and search results.
"""
interface NodeWithExcerpt implements Node {
  """
  The excerpt of the post.
  """
  excerpt(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  The globally unique ID for the object
  """
  id: ID!
}

"""
Content that can have a primary image attached. This image is typically used for thumbnails, social sharing, and prominent display in the presentation layer.
"""
interface NodeWithFeaturedImage implements Node {
  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int
  """
  Globally unique ID of the featured image assigned to the node
  """
  featuredImageId: ID
  """
  The globally unique ID for the object
  """
  id: ID!
}

"""
Connection between the NodeWithFeaturedImage type and the MediaItem type
"""
type NodeWithFeaturedImageToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: MediaItem!
}

"""
Content that supports ordering metadata. Includes a menu order field which can be used for custom sorting in navigation menus and other ordered collections.
"""
interface NodeWithPageAttributes implements Node {
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
}

"""
Content that maintains a history of changes. Provides access to previous versions of the content and the ability to restore earlier revisions.
"""
interface NodeWithRevisions implements Node {
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  True if the node is a revision of another node
  """
  isRevision: Boolean
  """
  If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
}

"""
Connection between the NodeWithRevisions type and the ContentNode type
"""
type NodeWithRevisionsToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: ContentNode!
}

"""
Content that provides template metadata. The template can help inform how the content is might be structured, styled, and presented to the user.
"""
interface NodeWithTemplate implements Node {
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  The template assigned to the node
  """
  template: ContentTemplate
}

"""
Content with a dedicated title field. The title typically serves as the main heading and identifier for the content.
"""
interface NodeWithTitle implements Node {
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  The Yoast SEO data of the ContentNode
  """
  seo: PostTypeSEO
  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
}

"""
Content that supports cross-site notifications when linked to by other sites. Includes fields for pingback status and linked URLs.
"""
interface NodeWithTrackbacks implements Node {
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  Whether the pings are open or closed for this particular post.
  """
  pingStatus: String
  """
  URLs that have been pinged.
  """
  pinged: [String]
  """
  URLs queued to be pinged.
  """
  toPing: [String]
}

"""
A direct one-to-one relationship between objects. Unlike plural connections, this represents a single related object rather than a collection.
"""
interface OneToOneConnection implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected node
  """
  node: Node!
}

"""
The &quot;OptionsCompanyInformations&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;.
"""
type OptionsCompanyInformations implements AcfFieldGroup & AcfFieldGroupFields & OptionsCompanyInformations_Fields {
  """
  Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  address: String
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  companyName: String
  """
  Field of the &quot;email&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  email: String
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  fax: String
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Bitte geben Sie hier die Seite mit dem Impressum an.
  Die DatenschutzerklÃ¤rung definieren Sie Ã¼ber Einstellungen &gt; PrivatsphÃ¤re.
  """
  imprint: AcfLink
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  legalForm: String
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  location: String
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  phone: String
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  proprietor: String
  """
  Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  socialMedia: [OptionsCompanyInformationsSocialMedia]
}

"""
The &quot;OptionsCompanyInformationsSocialMedia&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;.
"""
type OptionsCompanyInformationsSocialMedia implements AcfFieldGroup & AcfFieldGroupFields & OptionsCompanyInformationsSocialMedia_Fields {
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;select&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformationsSocialMedia&quot; Field Group
  """
  networkname: [String]
  """
  Field of the &quot;url&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformationsSocialMedia&quot; Field Group
  """
  networkprofile: String
}

"""
Interface representing fields of the ACF &quot;OptionsCompanyInformationsSocialMedia&quot; Field Group
"""
interface OptionsCompanyInformationsSocialMedia_Fields implements AcfFieldGroup & AcfFieldGroupFields {
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;select&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformationsSocialMedia&quot; Field Group
  """
  networkname: [String]
  """
  Field of the &quot;url&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformationsSocialMedia&quot; Field Group
  """
  networkprofile: String
}

"""
Interface representing fields of the ACF &quot;OptionsCompanyInformations&quot; Field Group
"""
interface OptionsCompanyInformations_Fields implements AcfFieldGroup & AcfFieldGroupFields {
  """
  Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  address: String
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  companyName: String
  """
  Field of the &quot;email&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  email: String
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  fax: String
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Bitte geben Sie hier die Seite mit dem Impressum an.
  Die DatenschutzerklÃ¤rung definieren Sie Ã¼ber Einstellungen &gt; PrivatsphÃ¤re.
  """
  imprint: AcfLink
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  legalForm: String
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  location: String
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  phone: String
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  proprietor: String
  """
  Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;OptionsCompanyInformations&quot; Field Group
  """
  socialMedia: [OptionsCompanyInformationsSocialMedia]
}

"""
Sort direction for ordered results. Determines whether items are returned in ascending or descending order.
"""
enum OrderEnum {
  """
  Results ordered from lowest to highest values (i.e. A-Z, oldest-newest)
  """
  ASC
  """
  Results ordered from highest to lowest values (i.e. Z-A, newest-oldest)
  """
  DESC
}

"""
A standalone content entry generally used for static, non-chronological content such as &quot;About Us&quot; or &quot;Contact&quot; pages.
"""
type Page implements BlockEditorContentNode & ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithPageAttributes & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable {
  """
  Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
  """
  ancestors(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection
  """
  Connection between the NodeWithAuthor type and the User type
  """
  author: NodeWithAuthorToUserConnectionEdge
  """
  The database identifier of the author of the node
  """
  authorDatabaseId: Int
  """
  The globally unique identifier of the author of the node
  """
  authorId: ID
  """
  Gutenberg blocks
  """
  blocks: [Block!]
  """
  Gutenberg blocks as json string
  """
  blocksJSON: String
  """
  Connection between the HierarchicalContentNode type and the ContentNode type
  """
  children(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection
  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int
  """
  Whether the comments are open or closed for this particular post.
  """
  commentStatus: String
  """
  Connection between the Page type and the Comment type
  """
  comments(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: PageToCommentConnectionWhereArgs
  ): PageToCommentConnection
  """
  The content of the post.
  """
  content(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  Connection between the ContentNode type and the ContentType type
  """
  contentType: ContentNodeToContentTypeConnectionEdge
  """
  The name of the Content Type the node belongs to
  """
  contentTypeName: String!
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  Post publishing date.
  """
  date: String
  """
  The publishing date set in GMT.
  """
  dateGmt: String
  """
  The desired slug of the post
  """
  desiredSlug: String
  """
  If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  """
  The RSS enclosure for the object
  """
  enclosure: String
  """
  Connection between the ContentNode type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int
  """
  Globally unique ID of the featured image assigned to the node
  """
  featuredImageId: ID
  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String
  """
  Whether the page object is password protected.
  """
  hasPassword: Boolean
  """
  The globally unique identifier of the page object.
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether this page is set to the static front page.
  """
  isFrontPage: Boolean!
  """
  Whether this page is set to the blog posts page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is a node in the preview state
  """
  isPreview: Boolean
  """
  Whether this page is set to the privacy page.
  """
  isPrivacyPage: Boolean!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  True if the node is a revision of another node
  """
  isRevision: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The user that most recently edited the node
  """
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  """
  The permalink of the post
  """
  link: String
  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String
  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String
  """
  The id field matches the WP_Post-&gt;ID field.
  """
  pageId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  """
  The parent of the node. The parent object can be of various types
  """
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  """
  Database id of the parent node
  """
  parentDatabaseId: Int
  """
  The globally unique identifier of the parent node.
  """
  parentId: ID
  """
  The password for the page object.
  """
  password: String
  """
  Connection between the Page type and the page type
  """
  preview: PageToPreviewConnectionEdge
  """
  Previewed gutenberg blocks
  """
  previewBlocks: [Block!]
  """
  Previewed Gutenberg blocks as json string
  """
  previewBlocksJSON: String
  """
  The database id of the preview node
  """
  previewRevisionDatabaseId: Int
  """
  Whether the object is a node in the preview state
  """
  previewRevisionId: ID
  """
  If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
  """
  Connection between the Page type and the page type
  """
  revisions(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: PageToRevisionConnectionWhereArgs
  ): PageToRevisionConnection
  """
  The Yoast SEO data of the ContentNode
  """
  seo: PostTypeSEO
  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String
  """
  The current status of the object
  """
  status: String
  """
  The template assigned to a node of content
  """
  template: ContentTemplate
  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  The unique resource identifier path
  """
  uri: String
}

"""
A paginated collection of page Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of page Nodes
"""
interface PageConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected page Nodes
  """
  edges: [PageConnectionEdge!]!
  """
  A list of connected page Nodes
  """
  nodes: [Page!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PageConnectionPageInfo!
}

"""
Represents a connection to a page. Contains both the page Node and metadata about the relationship.
"""
interface PageConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected page Node
  """
  node: Page!
}

"""
Pagination metadata specific to &quot;PageConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;PageConnectionEdge&quot; Nodes.
"""
interface PageConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Identifier types for retrieving a specific Page. Specifies which unique attribute is used to find an exact Page.
"""
enum PageIdType {
  """
  Identify a resource by the Database ID.
  """
  DATABASE_ID
  """
  Identify a resource by the (hashed) Global ID.
  """
  ID
  """
  Identify a resource by the URI.
  """
  URI
}

"""
Metadata for cursor-based pagination. Provides cursors for continuing pagination and boolean flags indicating if more items exist in either direction.
"""
interface PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
Connection between the Page type and the Comment type
"""
type PageToCommentConnection implements CommentConnection & Connection {
  """
  Edges for the PageToCommentConnection connection
  """
  edges: [PageToCommentConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Comment!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PageToCommentConnectionPageInfo!
}

"""
An edge in a connection
"""
type PageToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Comment!
}

"""
Pagination metadata specific to &quot;PageToCommentConnection&quot; collections. Provides cursors and flags for navigating through sets of PageToCommentConnection Nodes.
"""
type PageToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the PageToCommentConnection connection
"""
input PageToCommentConnectionWhereArgs {
  """
  Comment author email address.
  """
  authorEmail: String
  """
  Array of author IDs to include comments for.
  """
  authorIn: [ID]
  """
  Array of author IDs to exclude comments for.
  """
  authorNotIn: [ID]
  """
  Comment author URL.
  """
  authorUrl: String
  """
  Array of comment IDs to include.
  """
  commentIn: [ID]
  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]
  """
  Include comments of a given type.
  """
  commentType: String
  """
  Include comments from a given array of comment types.
  """
  commentTypeIn: [String]
  """
  Exclude comments from a given array of comment types.
  """
  commentTypeNotIn: String
  """
  Content object author ID to limit results by.
  """
  contentAuthor: [ID]
  """
  Array of author IDs to retrieve comments for.
  """
  contentAuthorIn: [ID]
  """
  Array of author IDs *not* to retrieve comments for.
  """
  contentAuthorNotIn: [ID]
  """
  Limit results to those affiliated with a given content object ID.
  """
  contentId: ID
  """
  Array of content object IDs to include affiliated comments for.
  """
  contentIdIn: [ID]
  """
  Array of content object IDs to exclude affiliated comments for.
  """
  contentIdNotIn: [ID]
  """
  Content object name (i.e. slug ) to retrieve affiliated comments for.
  """
  contentName: String
  """
  Content Object parent ID to retrieve affiliated comments for.
  """
  contentParent: Int
  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]
  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]
  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]
  """
  Karma score to retrieve matching comments for.
  """
  karma: Int
  """
  The cardinality of the order of the connection
  """
  order: OrderEnum
  """
  Field to order the comments by.
  """
  orderby: CommentsConnectionOrderbyEnum
  """
  Parent ID of comment to retrieve children of.
  """
  parent: Int
  """
  Array of parent IDs of comments to retrieve children for.
  """
  parentIn: [ID]
  """
  Array of parent IDs of comments *not* to retrieve children for.
  """
  parentNotIn: [ID]
  """
  Search term(s) to retrieve matching comments for.
  """
  search: String
  """
  One or more Comment Statuses to limit results by
  """
  statusIn: [CommentStatusEnum]
  """
  Include comments for a specific user ID.
  """
  userId: ID
}

"""
Connection between the Page type and the page type
"""
type PageToPreviewConnectionEdge implements Edge & OneToOneConnection & PageConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: Page!
}

"""
Connection between the Page type and the page type
"""
type PageToRevisionConnection implements Connection & PageConnection {
  """
  Edges for the PageToRevisionConnection connection
  """
  edges: [PageToRevisionConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Page!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PageToRevisionConnectionPageInfo!
}

"""
An edge in a connection
"""
type PageToRevisionConnectionEdge implements Edge & PageConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Page!
}

"""
Pagination metadata specific to &quot;PageToRevisionConnection&quot; collections. Provides cursors and flags for navigating through sets of PageToRevisionConnection Nodes.
"""
type PageToRevisionConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the PageToRevisionConnection connection
"""
input PageToRevisionConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int
  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]
  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String
  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
An plugin object
"""
type Plugin implements Node {
  """
  Name of the plugin author(s), may also be a company name.
  """
  author: String
  """
  URI for the related author(s)/company website.
  """
  authorUri: String
  """
  Description of the plugin.
  """
  description: String
  """
  The globally unique identifier of the plugin object.
  """
  id: ID!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Display name of the plugin.
  """
  name: String
  """
  Plugin path.
  """
  path: String
  """
  URI for the plugin website. This is useful for directing users for support requests etc.
  """
  pluginUri: String
  """
  Current version of the plugin.
  """
  version: String
}

"""
A paginated collection of Plugin Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of Plugin Nodes
"""
interface PluginConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected Plugin Nodes
  """
  edges: [PluginConnectionEdge!]!
  """
  A list of connected Plugin Nodes
  """
  nodes: [Plugin!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PluginConnectionPageInfo!
}

"""
Represents a connection to a Plugin. Contains both the Plugin Node and metadata about the relationship.
"""
interface PluginConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected Plugin Node
  """
  node: Plugin!
}

"""
Pagination metadata specific to &quot;PluginConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;PluginConnectionEdge&quot; Nodes.
"""
interface PluginConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Operational status of a plugin. Indicates whether a plugin is active, inactive, or in another state that affects its functionality.
"""
enum PluginStatusEnum {
  """
  The plugin is currently active.
  """
  ACTIVE
  """
  The plugin is a drop-in plugin.
  """
  DROP_IN
  """
  The plugin is currently inactive.
  """
  INACTIVE
  """
  The plugin is a must-use plugin.
  """
  MUST_USE
  """
  The plugin is technically active but was paused while loading.
  """
  PAUSED
  """
  The plugin was active recently.
  """
  RECENTLY_ACTIVE
  """
  The plugin has an upgrade available.
  """
  UPGRADE
}

"""
A chronological content entry typically used for blog posts, news articles, or similar date-based content.
"""
type Post implements BlockEditorContentNode & ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & NodeWithTrackbacks & Previewable & UniformResourceIdentifiable {
  """
  The ancestors of the content node.
  """
  ancestors(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): PostToPostConnection
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have ancestors"
    )
  """
  Connection between the NodeWithAuthor type and the User type
  """
  author: NodeWithAuthorToUserConnectionEdge
  """
  The database identifier of the author of the node
  """
  authorDatabaseId: Int
  """
  The globally unique identifier of the author of the node
  """
  authorId: ID
  """
  Gutenberg blocks
  """
  blocks: [Block!]
  """
  Gutenberg blocks as json string
  """
  blocksJSON: String
  """
  Connection between the Post type and the category type
  """
  categories(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: PostToCategoryConnectionWhereArgs
  ): PostToCategoryConnection
  """
  The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int
  """
  Whether the comments are open or closed for this particular post.
  """
  commentStatus: String
  """
  Connection between the Post type and the Comment type
  """
  comments(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: PostToCommentConnectionWhereArgs
  ): PostToCommentConnection
  """
  The content of the post.
  """
  content(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  Connection between the ContentNode type and the ContentType type
  """
  contentType: ContentNodeToContentTypeConnectionEdge
  """
  The name of the Content Type the node belongs to
  """
  contentTypeName: String!
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  Post publishing date.
  """
  date: String
  """
  The publishing date set in GMT.
  """
  dateGmt: String
  """
  The desired slug of the post
  """
  desiredSlug: String
  """
  If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  """
  The RSS enclosure for the object
  """
  enclosure: String
  """
  Connection between the ContentNode type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  """
  The excerpt of the post.
  """
  excerpt(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  Connection between the NodeWithFeaturedImage type and the MediaItem type
  """
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  """
  The database identifier for the featured image node assigned to the content node
  """
  featuredImageDatabaseId: Int
  """
  Globally unique ID of the featured image assigned to the node
  """
  featuredImageId: ID
  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String
  """
  Whether the post object is password protected.
  """
  hasPassword: Boolean
  """
  The globally unique identifier of the post object.
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is a node in the preview state
  """
  isPreview: Boolean
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  True if the node is a revision of another node
  """
  isRevision: Boolean
  """
  Whether this page is sticky
  """
  isSticky: Boolean!
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The user that most recently edited the node
  """
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  """
  The permalink of the post
  """
  link: String
  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String
  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String
  """
  The parent of the content node.
  """
  parent: PostToParentConnectionEdge
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have a parent"
    )
  """
  The password for the post object.
  """
  password: String
  """
  Whether the pings are open or closed for this particular post.
  """
  pingStatus: String
  """
  URLs that have been pinged.
  """
  pinged: [String]
  """
  Connection between the Post type and the postFormat type
  """
  postFormats(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: PostToPostFormatConnectionWhereArgs
  ): PostToPostFormatConnection
  """
  The id field matches the WP_Post-&gt;ID field.
  """
  postId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  """
  Connection between the Post type and the post type
  """
  preview: PostToPreviewConnectionEdge
  """
  Previewed gutenberg blocks
  """
  previewBlocks: [Block!]
  """
  Previewed Gutenberg blocks as json string
  """
  previewBlocksJSON: String
  """
  The database id of the preview node
  """
  previewRevisionDatabaseId: Int
  """
  Whether the object is a node in the preview state
  """
  previewRevisionId: ID
  """
  If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
  """
  Connection between the Post type and the post type
  """
  revisions(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: PostToRevisionConnectionWhereArgs
  ): PostToRevisionConnection
  """
  The Yoast SEO data of the ContentNode
  """
  seo: PostTypeSEO
  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String
  """
  The current status of the object
  """
  status: String
  """
  Connection between the Post type and the tag type
  """
  tags(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: PostToTagConnectionWhereArgs
  ): PostToTagConnection
  """
  The template assigned to the node
  """
  template: ContentTemplate
  """
  Connection between the Post type and the TermNode type
  """
  terms(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: PostToTermNodeConnectionWhereArgs
  ): PostToTermNodeConnection
  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  URLs queued to be pinged.
  """
  toPing: [String]
  """
  The unique resource identifier path
  """
  uri: String
}

"""
Set relationships between the post to categories
"""
input PostCategoriesInput {
  """
  If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true.
  """
  append: Boolean
  """
  The input list of items to set.
  """
  nodes: [PostCategoriesNodeInput]
}

"""
List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists.
"""
input PostCategoriesNodeInput {
  """
  The description of the category. This field is used to set a description of the category if a new one is created during the mutation.
  """
  description: String
  """
  The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made.
  """
  id: ID
  """
  The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field.
  """
  name: String
  """
  The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""
A paginated collection of post Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of post Nodes
"""
interface PostConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected post Nodes
  """
  edges: [PostConnectionEdge!]!
  """
  A list of connected post Nodes
  """
  nodes: [Post!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PostConnectionPageInfo!
}

"""
Represents a connection to a post. Contains both the post Node and metadata about the relationship.
"""
interface PostConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected post Node
  """
  node: Post!
}

"""
Pagination metadata specific to &quot;PostConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;PostConnectionEdge&quot; Nodes.
"""
interface PostConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
A standardized classification system for content presentation styles. These formats can be used to display content differently based on type, such as &quot;standard&quot;, &quot;gallery&quot;, &quot;video&quot;, etc.
"""
type PostFormat implements DatabaseIdentifier & Node & TermNode & UniformResourceIdentifiable {
  """
  Connection between the PostFormat type and the ContentNode type
  """
  contentNodes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: PostFormatToContentNodeConnectionWhereArgs
  ): PostFormatToContentNodeConnection
  """
  The number of objects connected to the object
  """
  count: Int
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  The description of the object
  """
  description: String
  """
  Connection between the TermNode type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  """
  Connection between the TermNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The link to the term
  """
  link: String
  """
  The human friendly name of the object.
  """
  name: String
  """
  The id field matches the WP_Post-&gt;ID field.
  """
  postFormatId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  """
  Connection between the PostFormat type and the post type
  """
  posts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: PostFormatToPostConnectionWhereArgs
  ): PostFormatToPostConnection
  """
  The Yoast SEO data of the Formate taxonomy.
  """
  seo: TaxonomySEO
  """
  An alphanumeric identifier for the object unique to its type.
  """
  slug: String
  """
  Connection between the PostFormat type and the Taxonomy type
  """
  taxonomy: PostFormatToTaxonomyConnectionEdge
  """
  The name of the taxonomy that the object is associated with
  """
  taxonomyName: String
  """
  The ID of the term group that this term object belongs to
  """
  termGroupId: Int
  """
  The taxonomy ID that the object is associated with
  """
  termTaxonomyId: Int
  """
  The unique resource identifier path
  """
  uri: String
}

"""
A paginated collection of postFormat Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of postFormat Nodes
"""
interface PostFormatConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected postFormat Nodes
  """
  edges: [PostFormatConnectionEdge!]!
  """
  A list of connected postFormat Nodes
  """
  nodes: [PostFormat!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PostFormatConnectionPageInfo!
}

"""
Represents a connection to a postFormat. Contains both the postFormat Node and metadata about the relationship.
"""
interface PostFormatConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected postFormat Node
  """
  node: PostFormat!
}

"""
Pagination metadata specific to &quot;PostFormatConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;PostFormatConnectionEdge&quot; Nodes.
"""
interface PostFormatConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Identifier types for retrieving a specific PostFormat. Determines which unique property (global ID, database ID, slug, etc.) is used to locate the PostFormat.
"""
enum PostFormatIdType {
  """
  The Database ID for the node
  """
  DATABASE_ID
  """
  The hashed Global ID
  """
  ID
  """
  The name of the node
  """
  NAME
  """
  Url friendly name of the node
  """
  SLUG
  """
  The URI for the node
  """
  URI
}

"""
Connection between the PostFormat type and the ContentNode type
"""
type PostFormatToContentNodeConnection implements Connection & ContentNodeConnection {
  """
  Edges for the PostFormatToContentNodeConnection connection
  """
  edges: [PostFormatToContentNodeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ContentNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PostFormatToContentNodeConnectionPageInfo!
}

"""
An edge in a connection
"""
type PostFormatToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ContentNode!
}

"""
Pagination metadata specific to &quot;PostFormatToContentNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of PostFormatToContentNodeConnection Nodes.
"""
type PostFormatToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the PostFormatToContentNodeConnection connection
"""
input PostFormatToContentNodeConnectionWhereArgs {
  """
  The Types of content to filter
  """
  contentTypes: [ContentTypesOfPostFormatEnum]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the PostFormat type and the post type
"""
type PostFormatToPostConnection implements Connection & PostConnection {
  """
  Edges for the PostFormatToPostConnection connection
  """
  edges: [PostFormatToPostConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Post!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PostFormatToPostConnectionPageInfo!
}

"""
An edge in a connection
"""
type PostFormatToPostConnectionEdge implements Edge & PostConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Post!
}

"""
Pagination metadata specific to &quot;PostFormatToPostConnection&quot; collections. Provides cursors and flags for navigating through sets of PostFormatToPostConnection Nodes.
"""
type PostFormatToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the PostFormatToPostConnection connection
"""
input PostFormatToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int
  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]
  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String
  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]
  """
  Category ID
  """
  categoryId: Int
  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]
  """
  Use Category Slug
  """
  categoryName: String
  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Tag Slug
  """
  tag: String
  """
  Use Tag ID
  """
  tagId: String
  """
  Array of tag IDs, used to display objects from one tag OR another
  """
  tagIn: [ID]
  """
  Array of tag IDs, used to display objects from one tag OR another
  """
  tagNotIn: [ID]
  """
  Array of tag slugs, used to display objects from one tag AND another
  """
  tagSlugAnd: [String]
  """
  Array of tag slugs, used to include objects in ANY specified tags
  """
  tagSlugIn: [String]
  """
  Title of the object
  """
  title: String
}

"""
Connection between the PostFormat type and the Taxonomy type
"""
type PostFormatToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: Taxonomy!
}

"""
Identifier types for retrieving a specific Post. Specifies which unique attribute is used to find an exact Post.
"""
enum PostIdType {
  """
  Identify a resource by the Database ID.
  """
  DATABASE_ID
  """
  Identify a resource by the (hashed) Global ID.
  """
  ID
  """
  Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier.
  """
  SLUG
  """
  Identify a resource by the URI.
  """
  URI
}

"""
Content field rendering options. Determines whether content fields are returned as raw data or with applied formatting and transformations. Default is RENDERED.
"""
enum PostObjectFieldFormatEnum {
  """
  Unprocessed content exactly as stored in the database, requires appropriate permissions.
  """
  RAW
  """
  Content with all formatting and transformations applied, ready for display.
  """
  RENDERED
}

"""
Date field selectors for content filtering. Specifies which date attribute (creation date, modification date) should be used for date-based queries.
"""
enum PostObjectsConnectionDateColumnEnum {
  """
  The date the comment was created in local time.
  """
  DATE
  """
  The most recent modification date of the comment.
  """
  MODIFIED
}

"""
Content sorting attributes for post-type objects. Identifies which content property should be used to determine result order.
"""
enum PostObjectsConnectionOrderbyEnum {
  """
  Ordering by content author (typically by author name).
  """
  AUTHOR
  """
  Ordering by popularity based on number of comments.
  """
  COMMENT_COUNT
  """
  Chronological ordering by publication date.
  """
  DATE
  """
  Maintain custom order of IDs exactly as specified in the query with the IN field.
  """
  IN
  """
  Ordering by manually defined sort position.
  """
  MENU_ORDER
  """
  Chronological ordering by modified date.
  """
  MODIFIED
  """
  Maintain custom order of IDs exactly as specified in the query with the NAME_IN field.
  """
  NAME_IN
  """
  Ordering by parent-child relationship in hierarchical content.
  """
  PARENT
  """
  Alphabetical ordering by URL-friendly name.
  """
  SLUG
  """
  Alphabetical ordering by content title
  """
  TITLE
}

"""
Options for ordering the connection
"""
input PostObjectsConnectionOrderbyInput {
  """
  The field to order the connection by
  """
  field: PostObjectsConnectionOrderbyEnum!
  """
  Possible directions in which to order a list of items
  """
  order: OrderEnum!
}

"""
Set relationships between the post to postFormats
"""
input PostPostFormatsInput {
  """
  If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true.
  """
  append: Boolean
  """
  The input list of items to set.
  """
  nodes: [PostPostFormatsNodeInput]
}

"""
List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists.
"""
input PostPostFormatsNodeInput {
  """
  The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation.
  """
  description: String
  """
  The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made.
  """
  id: ID
  """
  The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field.
  """
  name: String
  """
  The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""
Publishing status that controls the visibility and editorial state of content. Determines whether content is published, pending review, in draft state, or private.
"""
enum PostStatusEnum {
  """
  Objects with the acf-disabled status
  """
  ACF_DISABLED
  """
  Automatically saved content that has not been manually saved
  """
  AUTO_DRAFT
  """
  Objects with the dp-rewrite-republish status
  """
  DP_REWRITE_REPUBLISH
  """
  Content that is saved but not yet published or visible to the public
  """
  DRAFT
  """
  Objects with the flamingo-spam status
  """
  FLAMINGO_SPAM
  """
  Objects with the future status
  """
  FUTURE
  """
  Content that inherits its status from a parent object
  """
  INHERIT
  """
  Content awaiting review before publication
  """
  PENDING
  """
  Content only visible to authorized users with appropriate permissions
  """
  PRIVATE
  """
  Content that is publicly visible to all visitors
  """
  PUBLISH
  """
  Objects with the request-completed status
  """
  REQUEST_COMPLETED
  """
  Objects with the request-confirmed status
  """
  REQUEST_CONFIRMED
  """
  Objects with the request-failed status
  """
  REQUEST_FAILED
  """
  Objects with the request-pending status
  """
  REQUEST_PENDING
  """
  Content marked for deletion but still recoverable
  """
  TRASH
}

"""
Set relationships between the post to tags
"""
input PostTagsInput {
  """
  If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true.
  """
  append: Boolean
  """
  The input list of items to set.
  """
  nodes: [PostTagsNodeInput]
}

"""
List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists.
"""
input PostTagsNodeInput {
  """
  The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation.
  """
  description: String
  """
  The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made.
  """
  id: ID
  """
  The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field.
  """
  name: String
  """
  The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""
Connection between the Post type and the category type
"""
type PostToCategoryConnection implements CategoryConnection & Connection {
  """
  Edges for the PostToCategoryConnection connection
  """
  edges: [PostToCategoryConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Category!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PostToCategoryConnectionPageInfo!
}

"""
An edge in a connection
"""
type PostToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The Yoast SEO Primary category
  """
  isPrimary: Boolean
  """
  The item at the end of the edge
  """
  node: Category!
}

"""
Pagination metadata specific to &quot;PostToCategoryConnection&quot; collections. Provides cursors and flags for navigating through sets of PostToCategoryConnection Nodes.
"""
type PostToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the PostToCategoryConnection connection
"""
input PostToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String
  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int
  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean
  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String
  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]
  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]
  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean
  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean
  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]
  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]
  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String
  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]
  """
  Direction the connection should be ordered in
  """
  order: OrderEnum
  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum
  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean
  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int
  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String
  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]
  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomyId: [ID]
  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the Post type and the Comment type
"""
type PostToCommentConnection implements CommentConnection & Connection {
  """
  Edges for the PostToCommentConnection connection
  """
  edges: [PostToCommentConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Comment!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PostToCommentConnectionPageInfo!
}

"""
An edge in a connection
"""
type PostToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Comment!
}

"""
Pagination metadata specific to &quot;PostToCommentConnection&quot; collections. Provides cursors and flags for navigating through sets of PostToCommentConnection Nodes.
"""
type PostToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the PostToCommentConnection connection
"""
input PostToCommentConnectionWhereArgs {
  """
  Comment author email address.
  """
  authorEmail: String
  """
  Array of author IDs to include comments for.
  """
  authorIn: [ID]
  """
  Array of author IDs to exclude comments for.
  """
  authorNotIn: [ID]
  """
  Comment author URL.
  """
  authorUrl: String
  """
  Array of comment IDs to include.
  """
  commentIn: [ID]
  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]
  """
  Include comments of a given type.
  """
  commentType: String
  """
  Include comments from a given array of comment types.
  """
  commentTypeIn: [String]
  """
  Exclude comments from a given array of comment types.
  """
  commentTypeNotIn: String
  """
  Content object author ID to limit results by.
  """
  contentAuthor: [ID]
  """
  Array of author IDs to retrieve comments for.
  """
  contentAuthorIn: [ID]
  """
  Array of author IDs *not* to retrieve comments for.
  """
  contentAuthorNotIn: [ID]
  """
  Limit results to those affiliated with a given content object ID.
  """
  contentId: ID
  """
  Array of content object IDs to include affiliated comments for.
  """
  contentIdIn: [ID]
  """
  Array of content object IDs to exclude affiliated comments for.
  """
  contentIdNotIn: [ID]
  """
  Content object name (i.e. slug ) to retrieve affiliated comments for.
  """
  contentName: String
  """
  Content Object parent ID to retrieve affiliated comments for.
  """
  contentParent: Int
  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]
  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]
  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]
  """
  Karma score to retrieve matching comments for.
  """
  karma: Int
  """
  The cardinality of the order of the connection
  """
  order: OrderEnum
  """
  Field to order the comments by.
  """
  orderby: CommentsConnectionOrderbyEnum
  """
  Parent ID of comment to retrieve children of.
  """
  parent: Int
  """
  Array of parent IDs of comments to retrieve children for.
  """
  parentIn: [ID]
  """
  Array of parent IDs of comments *not* to retrieve children for.
  """
  parentNotIn: [ID]
  """
  Search term(s) to retrieve matching comments for.
  """
  search: String
  """
  One or more Comment Statuses to limit results by
  """
  statusIn: [CommentStatusEnum]
  """
  Include comments for a specific user ID.
  """
  userId: ID
}

"""
Connection between the Post type and the post type
"""
type PostToParentConnectionEdge implements Edge & OneToOneConnection & PostConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: Post!
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have a parent"
    )
}

"""
Connection between the Post type and the post type
"""
type PostToPostConnection implements Connection & PostConnection {
  """
  Edges for the PostToPostConnection connection
  """
  edges: [PostToPostConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Post!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PostToPostConnectionPageInfo!
}

"""
An edge in a connection
"""
type PostToPostConnectionEdge implements Edge & PostConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have ancestors"
    )
  """
  The item at the end of the edge
  """
  node: Post!
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have ancestors"
    )
}

"""
Pagination metadata specific to &quot;PostToPostConnection&quot; collections. Provides cursors and flags for navigating through sets of PostToPostConnection Nodes.
"""
type PostToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the Post type and the postFormat type
"""
type PostToPostFormatConnection implements Connection & PostFormatConnection {
  """
  Edges for the PostToPostFormatConnection connection
  """
  edges: [PostToPostFormatConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [PostFormat!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PostToPostFormatConnectionPageInfo!
}

"""
An edge in a connection
"""
type PostToPostFormatConnectionEdge implements Edge & PostFormatConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The Yoast SEO Primary post_format
  """
  isPrimary: Boolean
  """
  The item at the end of the edge
  """
  node: PostFormat!
}

"""
Pagination metadata specific to &quot;PostToPostFormatConnection&quot; collections. Provides cursors and flags for navigating through sets of PostToPostFormatConnection Nodes.
"""
type PostToPostFormatConnectionPageInfo implements PageInfo & PostFormatConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the PostToPostFormatConnection connection
"""
input PostToPostFormatConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String
  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int
  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean
  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String
  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]
  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]
  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean
  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean
  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]
  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]
  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String
  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]
  """
  Direction the connection should be ordered in
  """
  order: OrderEnum
  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum
  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean
  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int
  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String
  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]
  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomyId: [ID]
  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the Post type and the post type
"""
type PostToPreviewConnectionEdge implements Edge & OneToOneConnection & PostConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: Post!
}

"""
Connection between the Post type and the post type
"""
type PostToRevisionConnection implements Connection & PostConnection {
  """
  Edges for the PostToRevisionConnection connection
  """
  edges: [PostToRevisionConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Post!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PostToRevisionConnectionPageInfo!
}

"""
An edge in a connection
"""
type PostToRevisionConnectionEdge implements Edge & PostConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Post!
}

"""
Pagination metadata specific to &quot;PostToRevisionConnection&quot; collections. Provides cursors and flags for navigating through sets of PostToRevisionConnection Nodes.
"""
type PostToRevisionConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the PostToRevisionConnection connection
"""
input PostToRevisionConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int
  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]
  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String
  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]
  """
  Category ID
  """
  categoryId: Int
  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]
  """
  Use Category Slug
  """
  categoryName: String
  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Tag Slug
  """
  tag: String
  """
  Use Tag ID
  """
  tagId: String
  """
  Array of tag IDs, used to display objects from one tag OR another
  """
  tagIn: [ID]
  """
  Array of tag IDs, used to display objects from one tag OR another
  """
  tagNotIn: [ID]
  """
  Array of tag slugs, used to display objects from one tag AND another
  """
  tagSlugAnd: [String]
  """
  Array of tag slugs, used to include objects in ANY specified tags
  """
  tagSlugIn: [String]
  """
  Title of the object
  """
  title: String
}

"""
Connection between the Post type and the tag type
"""
type PostToTagConnection implements Connection & TagConnection {
  """
  Edges for the PostToTagConnection connection
  """
  edges: [PostToTagConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Tag!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PostToTagConnectionPageInfo!
}

"""
An edge in a connection
"""
type PostToTagConnectionEdge implements Edge & TagConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The Yoast SEO Primary post_tag
  """
  isPrimary: Boolean
  """
  The item at the end of the edge
  """
  node: Tag!
}

"""
Pagination metadata specific to &quot;PostToTagConnection&quot; collections. Provides cursors and flags for navigating through sets of PostToTagConnection Nodes.
"""
type PostToTagConnectionPageInfo implements PageInfo & TagConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the PostToTagConnection connection
"""
input PostToTagConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String
  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int
  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean
  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String
  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]
  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]
  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean
  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean
  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]
  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]
  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String
  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]
  """
  Direction the connection should be ordered in
  """
  order: OrderEnum
  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum
  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean
  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int
  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String
  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]
  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomyId: [ID]
  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the Post type and the TermNode type
"""
type PostToTermNodeConnection implements Connection & TermNodeConnection {
  """
  Edges for the PostToTermNodeConnection connection
  """
  edges: [PostToTermNodeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [TermNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: PostToTermNodeConnectionPageInfo!
}

"""
An edge in a connection
"""
type PostToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: TermNode!
}

"""
Pagination metadata specific to &quot;PostToTermNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of PostToTermNodeConnection Nodes.
"""
type PostToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the PostToTermNodeConnection connection
"""
input PostToTermNodeConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String
  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int
  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean
  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String
  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]
  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]
  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean
  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean
  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]
  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]
  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String
  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]
  """
  Direction the connection should be ordered in
  """
  order: OrderEnum
  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum
  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean
  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int
  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String
  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]
  """
  The Taxonomy to filter terms by
  """
  taxonomies: [TaxonomyEnum]
  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomyId: [ID]
  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Details for labels of the PostType
"""
type PostTypeLabelDetails {
  """
  Default is âAdd Newâ for both hierarchical and non-hierarchical types.
  """
  addNew: String
  """
  Label for adding a new singular item.
  """
  addNewItem: String
  """
  Label to signify all items in a submenu link.
  """
  allItems: String
  """
  Label for archives in nav menus
  """
  archives: String
  """
  Label for the attributes meta box.
  """
  attributes: String
  """
  Label for editing a singular item.
  """
  editItem: String
  """
  Label for the Featured Image meta box title.
  """
  featuredImage: String
  """
  Label for the table views hidden heading.
  """
  filterItemsList: String
  """
  Label for the media frame button.
  """
  insertIntoItem: String
  """
  Label for the table hidden heading.
  """
  itemsList: String
  """
  Label for the table pagination hidden heading.
  """
  itemsListNavigation: String
  """
  Label for the menu name.
  """
  menuName: String
  """
  General name for the post type, usually plural.
  """
  name: String
  """
  Label for the new item page title.
  """
  newItem: String
  """
  Label used when no items are found.
  """
  notFound: String
  """
  Label used when no items are in the trash.
  """
  notFoundInTrash: String
  """
  Label used to prefix parents of hierarchical items.
  """
  parentItemColon: String
  """
  Label for removing the featured image.
  """
  removeFeaturedImage: String
  """
  Label for searching plural items.
  """
  searchItems: String
  """
  Label for setting the featured image.
  """
  setFeaturedImage: String
  """
  Name for one object of this post type.
  """
  singularName: String
  """
  Label for the media frame filter.
  """
  uploadedToThisItem: String
  """
  Label in the media frame for using a featured image.
  """
  useFeaturedImage: String
  """
  Label for viewing a singular item.
  """
  viewItem: String
  """
  Label for viewing post type archives.
  """
  viewItems: String
}

type PostTypeSEO {
  breadcrumbs: [SEOPostTypeBreadcrumbs]
  canonical: String
  cornerstone: Boolean
  focuskw: String
  fullHead: String
  metaDesc: String
  metaKeywords: String
  metaRobotsNofollow: String
  metaRobotsNoindex: String
  opengraphAuthor: String
  opengraphDescription: String
  opengraphImage: MediaItem
  opengraphModifiedTime: String
  opengraphPublishedTime: String
  opengraphPublisher: String
  opengraphSiteName: String
  opengraphTitle: String
  opengraphType: String
  opengraphUrl: String
  readingTime: Float
  schema: SEOPostTypeSchema
  title: String
  twitterDescription: String
  twitterImage: MediaItem
  twitterTitle: String
}

"""
Content that supports a draft preview mode. Allows viewing unpublished changes before they are made publicly available. Previewing unpublished changes requires appropriate permissions.
"""
interface Previewable {
  """
  Whether the object is a node in the preview state
  """
  isPreview: Boolean
  """
  The database id of the preview node
  """
  previewRevisionDatabaseId: Int
  """
  Whether the object is a node in the preview state
  """
  previewRevisionId: ID
}

"""
The reading setting type
"""
type ReadingSettings {
  """
  Die ID der Seite, auf der die neuesten BeitrÃ¤ge angezeigt werden sollen
  """
  pageForPosts: Int
  """
  Die ID der Seite, die auf der Startseite angezeigt werden soll
  """
  pageOnFront: Int
  """
  Maximal angezeigte BeitrÃ¤ge.
  """
  postsPerPage: Int
  """
  Was auf der Startseite angezeigt werden soll
  """
  showOnFront: String
}

"""
Input for the refreshJwtAuthToken mutation.
"""
input RefreshJwtAuthTokenInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  A valid, previously issued JWT refresh token. If valid a new Auth token will be provided. If invalid, expired, revoked or otherwise invalid, a new AuthToken will not be provided.
  """
  jwtRefreshToken: String!
}

"""
The payload for the refreshJwtAuthToken mutation.
"""
type RefreshJwtAuthTokenPayload {
  """
  JWT Token that can be used in future requests for Authentication
  """
  authToken: String
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
}

"""
Input for the registerUser mutation.
"""
input RegisterUserInput {
  """
  User's AOL IM account.
  """
  aim: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  A string containing content about the user.
  """
  description: String
  """
  A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String
  """
  A string containing the user's email address.
  """
  email: String
  """
  The user's first name.
  """
  firstName: String
  """
  User's Jabber account.
  """
  jabber: String
  """
  The user's last name.
  """
  lastName: String
  """
  User's locale.
  """
  locale: String
  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String
  """
  The user's nickname, defaults to the user's username.
  """
  nickname: String
  """
  A string that contains the plain text password for the user.
  """
  password: String
  """
  If true, this will refresh the users JWT secret.
  """
  refreshJwtUserSecret: Boolean
  """
  The date the user registered. Format is Y-m-d H:i:s.
  """
  registered: String
  """
  If true, this will revoke the users JWT secret. If false, this will unrevoke the JWT secret AND issue a new one. To revoke, the user must have proper capabilities to edit users JWT secrets.
  """
  revokeJwtUserSecret: Boolean
  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String
  """
  A string that contains the user's username.
  """
  username: String!
  """
  A string containing the user's URL for the user's web site.
  """
  websiteUrl: String
  """
  User's Yahoo IM account.
  """
  yim: String
}

"""
The payload for the registerUser mutation.
"""
type RegisterUserPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The User object mutation type.
  """
  user: User
}

"""
Logical operators for filter conditions. Determines whether multiple filtering criteria should be combined with AND (all must match) or OR (any can match).
"""
enum RelationEnum {
  """
  All conditions must match (more restrictive filtering)
  """
  AND
  """
  Any condition can match (more inclusive filtering)
  """
  OR
}

"""
Input for the resetUserPassword mutation.
"""
input ResetUserPasswordInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  Password reset key
  """
  key: String
  """
  The user's login (username).
  """
  login: String
  """
  The new password.
  """
  password: String
}

"""
The payload for the resetUserPassword mutation.
"""
type ResetUserPasswordPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The User object mutation type.
  """
  user: User
}

"""
Input for the restoreComment mutation.
"""
input RestoreCommentInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The ID of the comment to be restored
  """
  id: ID!
}

"""
The payload for the restoreComment mutation.
"""
type RestoreCommentPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The restored comment object
  """
  comment: Comment
  """
  The ID of the restored comment
  """
  restoredId: ID
}

"""
The ReusableBlock type
"""
type ReusableBlock implements BlockEditorContentNode & ContentNode & DatabaseIdentifier & Node & NodeWithContentEditor & NodeWithExcerpt & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  """
  The ancestors of the content node.
  """
  ancestors(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ReusableBlockToReusableBlockConnection
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have ancestors"
    )
  """
  Gutenberg blocks
  """
  blocks: [Block!]
  """
  Gutenberg blocks as json string
  """
  blocksJSON: String
  """
  The content of the post.
  """
  content(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  Connection between the ContentNode type and the ContentType type
  """
  contentType: ContentNodeToContentTypeConnectionEdge
  """
  The name of the Content Type the node belongs to
  """
  contentTypeName: String!
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  Post publishing date.
  """
  date: String
  """
  The publishing date set in GMT.
  """
  dateGmt: String
  """
  The desired slug of the post
  """
  desiredSlug: String
  """
  If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
  """
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  """
  The RSS enclosure for the object
  """
  enclosure: String
  """
  Connection between the ContentNode type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  """
  Connection between the ContentNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  """
  The excerpt of the post.
  """
  excerpt(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
  """
  guid: String
  """
  Whether the wp_block object is password protected.
  """
  hasPassword: Boolean
  """
  The globally unique identifier of the wp_block object.
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is a node in the preview state
  """
  isPreview: Boolean
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  True if the node is a revision of another node
  """
  isRevision: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The user that most recently edited the node
  """
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  """
  The permalink of the post
  """
  link: String
  """
  The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
  """
  modified: String
  """
  The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String
  """
  The parent of the content node.
  """
  parent: ReusableBlockToParentConnectionEdge
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have a parent"
    )
  """
  The password for the wp_block object.
  """
  password: String
  """
  Connection between the ReusableBlock type and the ReusableBlock type
  """
  preview: ReusableBlockToPreviewConnectionEdge
    @deprecated(
      reason: "The &quot;ReusableBlock&quot; Type is not publicly queryable and does not support previews. This field will be removed in the future."
    )
  """
  Previewed gutenberg blocks
  """
  previewBlocks: [Block!]
  """
  Previewed gutenberg blocks
  """
  previewBlocksFrom(databaseId: Int!): [Block!]
  """
  Previewed gutenberg blocks as json string
  """
  previewBlocksFromJSON(databaseId: Int!): String
  """
  Previewed Gutenberg blocks as json string
  """
  previewBlocksJSON: String
  """
  The database id of the preview node
  """
  previewRevisionDatabaseId: Int
  """
  Whether the object is a node in the preview state
  """
  previewRevisionId: ID
  """
  The id field matches the WP_Post-&gt;ID field.
  """
  reusableBlockId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  """
  If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
  """
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
  """
  Connection between the ReusableBlock type and the ReusableBlock type
  """
  revisions(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: ReusableBlockToRevisionConnectionWhereArgs
  ): ReusableBlockToRevisionConnection
  """
  The Yoast SEO data of the ContentNode
  """
  seo: PostTypeSEO
  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
  """
  slug: String
  """
  The current status of the object
  """
  status: String
  """
  The template assigned to the node
  """
  template: ContentTemplate
  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String
  """
  The unique resource identifier path
  """
  uri: String
}

"""
A paginated collection of ReusableBlock Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of ReusableBlock Nodes
"""
interface ReusableBlockConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected ReusableBlock Nodes
  """
  edges: [ReusableBlockConnectionEdge!]!
  """
  A list of connected ReusableBlock Nodes
  """
  nodes: [ReusableBlock!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: ReusableBlockConnectionPageInfo!
}

"""
Represents a connection to a ReusableBlock. Contains both the ReusableBlock Node and metadata about the relationship.
"""
interface ReusableBlockConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected ReusableBlock Node
  """
  node: ReusableBlock!
}

"""
Pagination metadata specific to &quot;ReusableBlockConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;ReusableBlockConnectionEdge&quot; Nodes.
"""
interface ReusableBlockConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Identifier types for retrieving a specific ReusableBlock. Specifies which unique attribute is used to find an exact ReusableBlock.
"""
enum ReusableBlockIdType {
  """
  Identify a resource by the Database ID.
  """
  DATABASE_ID
  """
  Identify a resource by the (hashed) Global ID.
  """
  ID
  """
  Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier.
  """
  SLUG
  """
  Identify a resource by the URI.
  """
  URI
}

"""
Connection between the ReusableBlock type and the ReusableBlock type
"""
type ReusableBlockToParentConnectionEdge implements Edge & OneToOneConnection & ReusableBlockConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: ReusableBlock!
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have a parent"
    )
}

"""
Connection between the ReusableBlock type and the ReusableBlock type
"""
type ReusableBlockToPreviewConnectionEdge implements Edge & OneToOneConnection & ReusableBlockConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: ReusableBlock!
    @deprecated(
      reason: "The &quot;ReusableBlock&quot; Type is not publicly queryable and does not support previews. This field will be removed in the future."
    )
}

"""
Connection between the ReusableBlock type and the ReusableBlock type
"""
type ReusableBlockToReusableBlockConnection implements Connection & ReusableBlockConnection {
  """
  Edges for the ReusableBlockToReusableBlockConnection connection
  """
  edges: [ReusableBlockToReusableBlockConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ReusableBlock!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: ReusableBlockToReusableBlockConnectionPageInfo!
}

"""
An edge in a connection
"""
type ReusableBlockToReusableBlockConnectionEdge implements Edge & ReusableBlockConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have ancestors"
    )
  """
  The item at the end of the edge
  """
  node: ReusableBlock!
    @deprecated(
      reason: "This content type is not hierarchical and typically will not have ancestors"
    )
}

"""
Pagination metadata specific to &quot;ReusableBlockToReusableBlockConnection&quot; collections. Provides cursors and flags for navigating through sets of ReusableBlockToReusableBlockConnection Nodes.
"""
type ReusableBlockToReusableBlockConnectionPageInfo implements PageInfo & ReusableBlockConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the ReusableBlock type and the ReusableBlock type
"""
type ReusableBlockToRevisionConnection implements Connection & ReusableBlockConnection {
  """
  Edges for the ReusableBlockToRevisionConnection connection
  """
  edges: [ReusableBlockToRevisionConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ReusableBlock!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: ReusableBlockToRevisionConnectionPageInfo!
}

"""
An edge in a connection
"""
type ReusableBlockToRevisionConnectionEdge implements Edge & ReusableBlockConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ReusableBlock!
}

"""
Pagination metadata specific to &quot;ReusableBlockToRevisionConnection&quot; collections. Provides cursors and flags for navigating through sets of ReusableBlockToRevisionConnection Nodes.
"""
type ReusableBlockToRevisionConnectionPageInfo implements PageInfo & ReusableBlockConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the ReusableBlockToRevisionConnection connection
"""
input ReusableBlockToRevisionConnectionWhereArgs {
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
The root mutation
"""
type RootMutation {
  """
  The createBerlinerWord mutation
  """
  createBerlinerWord(
    """
    Input for the createBerlinerWord mutation
    """
    input: CreateBerlinerWordInput!
  ): CreateBerlinerWordPayload
  """
  The createBerlinerischWordType mutation
  """
  createBerlinerischWordType(
    """
    Input for the createBerlinerischWordType mutation
    """
    input: CreateBerlinerischWordTypeInput!
  ): CreateBerlinerischWordTypePayload
  """
  The createBlockEditorPreview mutation
  """
  createBlockEditorPreview(
    """
    Input for the createBlockEditorPreview mutation
    """
    input: CreateBlockEditorPreviewInput!
  ): CreateBlockEditorPreviewPayload
  """
  The createCategory mutation
  """
  createCategory(
    """
    Input for the createCategory mutation
    """
    input: CreateCategoryInput!
  ): CreateCategoryPayload
  """
  The createComment mutation
  """
  createComment(
    """
    Input for the createComment mutation
    """
    input: CreateCommentInput!
  ): CreateCommentPayload
  """
  The createMediaItem mutation
  """
  createMediaItem(
    """
    Input for the createMediaItem mutation
    """
    input: CreateMediaItemInput!
  ): CreateMediaItemPayload
  """
  The createPage mutation
  """
  createPage(
    """
    Input for the createPage mutation
    """
    input: CreatePageInput!
  ): CreatePagePayload
  """
  The createPost mutation
  """
  createPost(
    """
    Input for the createPost mutation
    """
    input: CreatePostInput!
  ): CreatePostPayload
  """
  The createPostFormat mutation
  """
  createPostFormat(
    """
    Input for the createPostFormat mutation
    """
    input: CreatePostFormatInput!
  ): CreatePostFormatPayload
  """
  The createReusableBlock mutation
  """
  createReusableBlock(
    """
    Input for the createReusableBlock mutation
    """
    input: CreateReusableBlockInput!
  ): CreateReusableBlockPayload
  """
  The createTag mutation
  """
  createTag(
    """
    Input for the createTag mutation
    """
    input: CreateTagInput!
  ): CreateTagPayload
  """
  The createUser mutation
  """
  createUser(
    """
    Input for the createUser mutation
    """
    input: CreateUserInput!
  ): CreateUserPayload
  """
  The deleteBerlinerWord mutation
  """
  deleteBerlinerWord(
    """
    Input for the deleteBerlinerWord mutation
    """
    input: DeleteBerlinerWordInput!
  ): DeleteBerlinerWordPayload
  """
  The deleteBerlinerischWordType mutation
  """
  deleteBerlinerischWordType(
    """
    Input for the deleteBerlinerischWordType mutation
    """
    input: DeleteBerlinerischWordTypeInput!
  ): DeleteBerlinerischWordTypePayload
  """
  The deleteBlockEditorPreview mutation
  """
  deleteBlockEditorPreview(
    """
    Input for the deleteBlockEditorPreview mutation
    """
    input: DeleteBlockEditorPreviewInput!
  ): DeleteBlockEditorPreviewPayload
  """
  The deleteCategory mutation
  """
  deleteCategory(
    """
    Input for the deleteCategory mutation
    """
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload
  """
  The deleteComment mutation
  """
  deleteComment(
    """
    Input for the deleteComment mutation
    """
    input: DeleteCommentInput!
  ): DeleteCommentPayload
  """
  The deleteMediaItem mutation
  """
  deleteMediaItem(
    """
    Input for the deleteMediaItem mutation
    """
    input: DeleteMediaItemInput!
  ): DeleteMediaItemPayload
  """
  The deletePage mutation
  """
  deletePage(
    """
    Input for the deletePage mutation
    """
    input: DeletePageInput!
  ): DeletePagePayload
  """
  The deletePost mutation
  """
  deletePost(
    """
    Input for the deletePost mutation
    """
    input: DeletePostInput!
  ): DeletePostPayload
  """
  The deletePostFormat mutation
  """
  deletePostFormat(
    """
    Input for the deletePostFormat mutation
    """
    input: DeletePostFormatInput!
  ): DeletePostFormatPayload
  """
  The deleteReusableBlock mutation
  """
  deleteReusableBlock(
    """
    Input for the deleteReusableBlock mutation
    """
    input: DeleteReusableBlockInput!
  ): DeleteReusableBlockPayload
  """
  The deleteTag mutation
  """
  deleteTag(
    """
    Input for the deleteTag mutation
    """
    input: DeleteTagInput!
  ): DeleteTagPayload
  """
  The deleteUser mutation
  """
  deleteUser(
    """
    Input for the deleteUser mutation
    """
    input: DeleteUserInput!
  ): DeleteUserPayload
  """
  Increase the count.
  """
  increaseCount(
    """
    The count to increase
    """
    count: Int
  ): Int
  """
  Login a user. Request for an authToken and User details in response
  """
  login(
    """
    Input for the login mutation
    """
    input: LoginInput!
  ): LoginPayload
  """
  Use a valid JWT Refresh token to retrieve a new JWT Auth Token
  """
  refreshJwtAuthToken(
    """
    Input for the refreshJwtAuthToken mutation
    """
    input: RefreshJwtAuthTokenInput!
  ): RefreshJwtAuthTokenPayload
  """
  The registerUser mutation
  """
  registerUser(
    """
    Input for the registerUser mutation
    """
    input: RegisterUserInput!
  ): RegisterUserPayload
  """
  The resetUserPassword mutation
  """
  resetUserPassword(
    """
    Input for the resetUserPassword mutation
    """
    input: ResetUserPasswordInput!
  ): ResetUserPasswordPayload
  """
  The restoreComment mutation
  """
  restoreComment(
    """
    Input for the restoreComment mutation
    """
    input: RestoreCommentInput!
  ): RestoreCommentPayload
  """
  The sendEmail mutation
  """
  sendEmail(
    """
    Input for the sendEmail mutation
    """
    input: SendEmailInput!
  ): SendEmailPayload
  """
  Send password reset email to user
  """
  sendPasswordResetEmail(
    """
    Input for the sendPasswordResetEmail mutation
    """
    input: SendPasswordResetEmailInput!
  ): SendPasswordResetEmailPayload
  """
  The updateBerlinerWord mutation
  """
  updateBerlinerWord(
    """
    Input for the updateBerlinerWord mutation
    """
    input: UpdateBerlinerWordInput!
  ): UpdateBerlinerWordPayload
  """
  The updateBerlinerischWordType mutation
  """
  updateBerlinerischWordType(
    """
    Input for the updateBerlinerischWordType mutation
    """
    input: UpdateBerlinerischWordTypeInput!
  ): UpdateBerlinerischWordTypePayload
  """
  The updateBlockEditorPreview mutation
  """
  updateBlockEditorPreview(
    """
    Input for the updateBlockEditorPreview mutation
    """
    input: UpdateBlockEditorPreviewInput!
  ): UpdateBlockEditorPreviewPayload
  """
  The updateCategory mutation
  """
  updateCategory(
    """
    Input for the updateCategory mutation
    """
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload
  """
  The updateComment mutation
  """
  updateComment(
    """
    Input for the updateComment mutation
    """
    input: UpdateCommentInput!
  ): UpdateCommentPayload
  """
  The updateMediaItem mutation
  """
  updateMediaItem(
    """
    Input for the updateMediaItem mutation
    """
    input: UpdateMediaItemInput!
  ): UpdateMediaItemPayload
  """
  The updatePage mutation
  """
  updatePage(
    """
    Input for the updatePage mutation
    """
    input: UpdatePageInput!
  ): UpdatePagePayload
  """
  The updatePost mutation
  """
  updatePost(
    """
    Input for the updatePost mutation
    """
    input: UpdatePostInput!
  ): UpdatePostPayload
  """
  The updatePostFormat mutation
  """
  updatePostFormat(
    """
    Input for the updatePostFormat mutation
    """
    input: UpdatePostFormatInput!
  ): UpdatePostFormatPayload
  """
  The updateReusableBlock mutation
  """
  updateReusableBlock(
    """
    Input for the updateReusableBlock mutation
    """
    input: UpdateReusableBlockInput!
  ): UpdateReusableBlockPayload
  """
  The updateSettings mutation
  """
  updateSettings(
    """
    Input for the updateSettings mutation
    """
    input: UpdateSettingsInput!
  ): UpdateSettingsPayload
  """
  The updateTag mutation
  """
  updateTag(
    """
    Input for the updateTag mutation
    """
    input: UpdateTagInput!
  ): UpdateTagPayload
  """
  The updateUser mutation
  """
  updateUser(
    """
    Input for the updateUser mutation
    """
    input: UpdateUserInput!
  ): UpdateUserPayload
}

"""
The root entry point into the Graph
"""
type RootQuery implements WithAcfOptionsPageCompanyInformations & WithAcfOptionsPageThemeGeneralSettings {
  """
  Entry point to get all settings for the site
  """
  allSettings: Settings
  """
  An object of the berlinerWord Type. Berlinerische WÃ¶rter
  """
  berlinerWord(
    """
    Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the "asPreview" argument is not explicitly provided as an argument.
    """
    asPreview: Boolean
    """
    The globally unique identifier of the object.
    """
    id: ID!
    """
    Type of unique identifier to fetch by. Default is Global ID
    """
    idType: BerlinerWordIdType
  ): BerlinerWord
  """
  A berlinerWord object
  """
  berlinerWordBy(
    """
    Get the berlinerWord by its database ID
    """
    berlinerWordId: Int
    """
    Get the berlinerWord object by its global ID
    """
    id: ID
    """
    Get the berlinerWord by its uri
    """
    uri: String
  ): BerlinerWord
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  """
  Connection between the RootQuery type and the berlinerWord type
  """
  berlinerWords(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToBerlinerWordConnectionWhereArgs
  ): RootQueryToBerlinerWordConnection
  """
  A 0bject
  """
  berlinerischWordType(
    """
    The globally unique identifier of the object.
    """
    id: ID!
    """
    Type of unique identifier to fetch by. Default is Global ID
    """
    idType: BerlinerischWordTypeIdType
  ): BerlinerischWordType
  """
  Connection between the RootQuery type and the berlinerischWordType type
  """
  berlinerischWordTypes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToBerlinerischWordTypeConnectionWhereArgs
  ): RootQueryToBerlinerischWordTypeConnection
  """
  Connection between the RootQuery type and the BlockEditorContentNode type
  """
  blockEditorContentNodes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: BlockEditorContentNodeConnectionWhereArgs
  ): BlockEditorContentNodeConnection
  """
  An object of the BlockEditorPreview Type.
  """
  blockEditorPreview(
    """
    Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the "asPreview" argument is not explicitly provided as an argument.
    """
    asPreview: Boolean
    """
    The globally unique identifier of the object.
    """
    id: ID!
    """
    Type of unique identifier to fetch by. Default is Global ID
    """
    idType: BlockEditorPreviewIdType
  ): BlockEditorPreview
  """
  A BlockEditorPreview object
  """
  blockEditorPreviewBy(
    """
    Get the BlockEditorPreview by its database ID
    """
    blockEditorPreviewId: Int
    """
    Get the BlockEditorPreview object by its global ID
    """
    id: ID
    """
    Get the BlockEditorPreview by its slug (only available for non-hierarchical types)
    """
    slug: String
    """
    Get the BlockEditorPreview by its uri
    """
    uri: String
  ): BlockEditorPreview
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  """
  Connection between the RootQuery type and the BlockEditorPreview type
  """
  blockEditorPreviews(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToBlockEditorPreviewConnectionWhereArgs
  ): RootQueryToBlockEditorPreviewConnection
  """
  Connection between the RootQuery type and the category type
  """
  categories(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToCategoryConnectionWhereArgs
  ): RootQueryToCategoryConnection
  """
  A 0bject
  """
  category(
    """
    The globally unique identifier of the object.
    """
    id: ID!
    """
    Type of unique identifier to fetch by. Default is Global ID
    """
    idType: CategoryIdType
  ): Category
  """
  Returns a Comment
  """
  comment(
    """
    Unique identifier for the comment node.
    """
    id: ID!
    """
    Type of unique identifier to fetch a comment by. Default is Global ID
    """
    idType: CommentNodeIdTypeEnum
  ): Comment
  """
  Connection between the RootQuery type and the Comment type
  """
  comments(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToCommentConnectionWhereArgs
  ): RootQueryToCommentConnection
  companyInformations: CompanyInformations
  """
  A node used to manage content
  """
  contentNode(
    """
    Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the "asPreview" argument is not explicitly provided as an argument.
    """
    asPreview: Boolean
    """
    The content type the node is used for. Required when idType is set to "name" or "slug"
    """
    contentType: ContentTypeEnum
    """
    Unique identifier for the content node.
    """
    id: ID!
    """
    Type of unique identifier to fetch a content node by. Default is Global ID
    """
    idType: ContentNodeIdTypeEnum
  ): ContentNode
  """
  Connection between the RootQuery type and the ContentNode type
  """
  contentNodes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToContentNodeConnectionWhereArgs
  ): RootQueryToContentNodeConnection
  """
  Fetch a Content Type node by unique Identifier
  """
  contentType(
    """
    Unique Identifier for the Content Type node.
    """
    id: ID!
    """
    Type of unique identifier to fetch a content type by. Default is Global ID
    """
    idType: ContentTypeIdTypeEnum
  ): ContentType
  """
  Connection between the RootQuery type and the ContentType type
  """
  contentTypes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): RootQueryToContentTypeConnection
  """
  Fields of the &#039;DiscussionSettings&#039; settings group
  """
  discussionSettings: DiscussionSettings
  """
  Fields of the &#039;GeneralSettings&#039; settings group
  """
  generalSettings: GeneralSettings
  """
  An object of the mediaItem Type.
  """
  mediaItem(
    """
    Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the "asPreview" argument is not explicitly provided as an argument.
    """
    asPreview: Boolean
    """
    The globally unique identifier of the object.
    """
    id: ID!
    """
    Type of unique identifier to fetch by. Default is Global ID
    """
    idType: MediaItemIdType
  ): MediaItem
  """
  A mediaItem object
  """
  mediaItemBy(
    """
    Get the mediaItem object by its global ID
    """
    id: ID
    """
    Get the mediaItem by its database ID
    """
    mediaItemId: Int
    """
    Get the mediaItem by its slug (only available for non-hierarchical types)
    """
    slug: String
    """
    Get the mediaItem by its uri
    """
    uri: String
  ): MediaItem
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  """
  Connection between the RootQuery type and the mediaItem type
  """
  mediaItems(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToMediaItemConnectionWhereArgs
  ): RootQueryToMediaItemConnection
  """
  A WordPress navigation menu
  """
  menu(
    """
    The globally unique identifier of the menu.
    """
    id: ID!
    """
    Type of unique identifier to fetch a menu by. Default is Global ID
    """
    idType: MenuNodeIdTypeEnum
  ): Menu
  """
  A WordPress navigation menu item
  """
  menuItem(
    """
    The globally unique identifier of the menu item.
    """
    id: ID!
    """
    Type of unique identifier to fetch a menu item by. Default is Global ID
    """
    idType: MenuItemNodeIdTypeEnum
  ): MenuItem
  """
  Connection between the RootQuery type and the MenuItem type
  """
  menuItems(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToMenuItemConnectionWhereArgs
  ): RootQueryToMenuItemConnection
  """
  Connection between the RootQuery type and the Menu type
  """
  menus(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToMenuConnectionWhereArgs
  ): RootQueryToMenuConnection
  """
  Fetches an object given its ID
  """
  node(
    """
    The unique identifier of the node
    """
    id: ID
  ): Node
  """
  Fetches an object given its Unique Resource Identifier
  """
  nodeByUri(
    """
    Unique Resource Identifier in the form of a path or permalink for a node. Ex: "/hello-world"
    """
    uri: String!
  ): UniformResourceIdentifiable
  """
  An object of the page Type.
  """
  page(
    """
    Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the "asPreview" argument is not explicitly provided as an argument.
    """
    asPreview: Boolean
    """
    The globally unique identifier of the object.
    """
    id: ID!
    """
    Type of unique identifier to fetch by. Default is Global ID
    """
    idType: PageIdType
  ): Page
  """
  A page object
  """
  pageBy(
    """
    Get the page object by its global ID
    """
    id: ID
    """
    Get the page by its database ID
    """
    pageId: Int
    """
    Get the page by its uri
    """
    uri: String
  ): Page
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  """
  Connection between the RootQuery type and the page type
  """
  pages(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToPageConnectionWhereArgs
  ): RootQueryToPageConnection
  """
  A WordPress plugin
  """
  plugin(
    """
    The globally unique identifier of the plugin.
    """
    id: ID!
  ): Plugin
  """
  Connection between the RootQuery type and the Plugin type
  """
  plugins(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToPluginConnectionWhereArgs
  ): RootQueryToPluginConnection
  """
  An object of the post Type.
  """
  post(
    """
    Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the "asPreview" argument is not explicitly provided as an argument.
    """
    asPreview: Boolean
    """
    The globally unique identifier of the object.
    """
    id: ID!
    """
    Type of unique identifier to fetch by. Default is Global ID
    """
    idType: PostIdType
  ): Post
  """
  A post object
  """
  postBy(
    """
    Get the post object by its global ID
    """
    id: ID
    """
    Get the post by its database ID
    """
    postId: Int
    """
    Get the post by its slug (only available for non-hierarchical types)
    """
    slug: String
    """
    Get the post by its uri
    """
    uri: String
  ): Post
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  """
  A 0bject
  """
  postFormat(
    """
    The globally unique identifier of the object.
    """
    id: ID!
    """
    Type of unique identifier to fetch by. Default is Global ID
    """
    idType: PostFormatIdType
  ): PostFormat
  """
  Connection between the RootQuery type and the postFormat type
  """
  postFormats(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToPostFormatConnectionWhereArgs
  ): RootQueryToPostFormatConnection
  """
  Connection between the RootQuery type and the post type
  """
  posts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToPostConnectionWhereArgs
  ): RootQueryToPostConnection
  """
  Fields of the &#039;ReadingSettings&#039; settings group
  """
  readingSettings: ReadingSettings
  """
  Connection between the RootQuery type and the EnqueuedScript type
  """
  registeredScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): RootQueryToEnqueuedScriptConnection
  """
  Connection between the RootQuery type and the EnqueuedStylesheet type
  """
  registeredStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): RootQueryToEnqueuedStylesheetConnection
  """
  An object of the ReusableBlock Type.
  """
  reusableBlock(
    """
    Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the "asPreview" argument is not explicitly provided as an argument.
    """
    asPreview: Boolean
    """
    The globally unique identifier of the object.
    """
    id: ID!
    """
    Type of unique identifier to fetch by. Default is Global ID
    """
    idType: ReusableBlockIdType
  ): ReusableBlock
  """
  A ReusableBlock object
  """
  reusableBlockBy(
    """
    Get the ReusableBlock object by its global ID
    """
    id: ID
    """
    Get the ReusableBlock by its database ID
    """
    reusableBlockId: Int
    """
    Get the ReusableBlock by its slug (only available for non-hierarchical types)
    """
    slug: String
    """
    Get the ReusableBlock by its uri
    """
    uri: String
  ): ReusableBlock
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  """
  Connection between the RootQuery type and the ReusableBlock type
  """
  reusableBlocks(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToReusableBlockConnectionWhereArgs
  ): RootQueryToReusableBlockConnection
  """
  Connection between the RootQuery type and the ContentNode type
  """
  revisions(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToRevisionsConnectionWhereArgs
  ): RootQueryToRevisionsConnection
  """
  Returns seo site data
  """
  seo: SEOConfig
  """
  A 0bject
  """
  tag(
    """
    The globally unique identifier of the object.
    """
    id: ID!
    """
    Type of unique identifier to fetch by. Default is Global ID
    """
    idType: TagIdType
  ): Tag
  """
  Connection between the RootQuery type and the tag type
  """
  tags(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToTagConnectionWhereArgs
  ): RootQueryToTagConnection
  """
  Connection between the RootQuery type and the Taxonomy type
  """
  taxonomies(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): RootQueryToTaxonomyConnection
  """
  Fetch a Taxonomy node by unique Identifier
  """
  taxonomy(
    """
    Unique Identifier for the Taxonomy node.
    """
    id: ID!
    """
    Type of unique identifier to fetch a taxonomy by. Default is Global ID
    """
    idType: TaxonomyIdTypeEnum
  ): Taxonomy
  """
  A node in a taxonomy used to group and relate content nodes
  """
  termNode(
    """
    Unique identifier for the term node.
    """
    id: ID!
    """
    Type of unique identifier to fetch a term node by. Default is Global ID
    """
    idType: TermNodeIdTypeEnum
    """
    The taxonomy of the tern node. Required when idType is set to "name" or "slug"
    """
    taxonomy: TaxonomyEnum
  ): TermNode
  """
  Connection between the RootQuery type and the TermNode type
  """
  terms(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToTermNodeConnectionWhereArgs
  ): RootQueryToTermNodeConnection
  """
  A Theme object
  """
  theme(
    """
    The globally unique identifier of the theme.
    """
    id: ID!
  ): Theme
  themeGeneralSettings: ThemeGeneralSettings
  """
  Connection between the RootQuery type and the Theme type
  """
  themes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): RootQueryToThemeConnection
  """
  Returns a user
  """
  user(
    """
    The globally unique identifier of the user.
    """
    id: ID!
    """
    Type of unique identifier to fetch a user by. Default is Global ID
    """
    idType: UserNodeIdTypeEnum
  ): User
  """
  Returns a user role
  """
  userRole(
    """
    The globally unique identifier of the user object.
    """
    id: ID!
  ): UserRole
  """
  Connection between the RootQuery type and the UserRole type
  """
  userRoles(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): RootQueryToUserRoleConnection
  """
  Connection between the RootQuery type and the User type
  """
  users(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: RootQueryToUserConnectionWhereArgs
  ): RootQueryToUserConnection
  """
  Returns the current user
  """
  viewer: User
  """
  Fields of the &#039;WritingSettings&#039; settings group
  """
  writingSettings: WritingSettings
}

"""
Connection between the RootQuery type and the berlinerWord type
"""
type RootQueryToBerlinerWordConnection implements BerlinerWordConnection & Connection {
  """
  Edges for the RootQueryToBerlinerWordConnection connection
  """
  edges: [RootQueryToBerlinerWordConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [BerlinerWord!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToBerlinerWordConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToBerlinerWordConnectionEdge implements BerlinerWordConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: BerlinerWord!
}

"""
Pagination metadata specific to &quot;RootQueryToBerlinerWordConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToBerlinerWordConnection Nodes.
"""
type RootQueryToBerlinerWordConnectionPageInfo implements BerlinerWordConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToBerlinerWordConnection connection
"""
input RootQueryToBerlinerWordConnectionWhereArgs {
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the RootQuery type and the berlinerischWordType type
"""
type RootQueryToBerlinerischWordTypeConnection implements BerlinerischWordTypeConnection & Connection {
  """
  Edges for the RootQueryToBerlinerischWordTypeConnection connection
  """
  edges: [RootQueryToBerlinerischWordTypeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [BerlinerischWordType!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToBerlinerischWordTypeConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToBerlinerischWordTypeConnectionEdge implements BerlinerischWordTypeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: BerlinerischWordType!
}

"""
Pagination metadata specific to &quot;RootQueryToBerlinerischWordTypeConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToBerlinerischWordTypeConnection Nodes.
"""
type RootQueryToBerlinerischWordTypeConnectionPageInfo implements BerlinerischWordTypeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToBerlinerischWordTypeConnection connection
"""
input RootQueryToBerlinerischWordTypeConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String
  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int
  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean
  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String
  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]
  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]
  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean
  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean
  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]
  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]
  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String
  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]
  """
  Direction the connection should be ordered in
  """
  order: OrderEnum
  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum
  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean
  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int
  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String
  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]
  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomyId: [ID]
  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the RootQuery type and the BlockEditorPreview type
"""
type RootQueryToBlockEditorPreviewConnection implements BlockEditorPreviewConnection & Connection {
  """
  Edges for the RootQueryToBlockEditorPreviewConnection connection
  """
  edges: [RootQueryToBlockEditorPreviewConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [BlockEditorPreview!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToBlockEditorPreviewConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToBlockEditorPreviewConnectionEdge implements BlockEditorPreviewConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: BlockEditorPreview!
}

"""
Pagination metadata specific to &quot;RootQueryToBlockEditorPreviewConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToBlockEditorPreviewConnection Nodes.
"""
type RootQueryToBlockEditorPreviewConnectionPageInfo implements BlockEditorPreviewConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToBlockEditorPreviewConnection connection
"""
input RootQueryToBlockEditorPreviewConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int
  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]
  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String
  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  previewedDatabaseId: Int
  previewedParentDatabaseId: Int
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the RootQuery type and the category type
"""
type RootQueryToCategoryConnection implements CategoryConnection & Connection {
  """
  Edges for the RootQueryToCategoryConnection connection
  """
  edges: [RootQueryToCategoryConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Category!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToCategoryConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Category!
}

"""
Pagination metadata specific to &quot;RootQueryToCategoryConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToCategoryConnection Nodes.
"""
type RootQueryToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToCategoryConnection connection
"""
input RootQueryToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String
  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int
  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean
  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String
  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]
  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]
  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean
  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean
  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]
  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]
  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String
  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]
  """
  Direction the connection should be ordered in
  """
  order: OrderEnum
  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum
  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean
  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int
  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String
  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]
  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomyId: [ID]
  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the RootQuery type and the Comment type
"""
type RootQueryToCommentConnection implements CommentConnection & Connection {
  """
  Edges for the RootQueryToCommentConnection connection
  """
  edges: [RootQueryToCommentConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Comment!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToCommentConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Comment!
}

"""
Pagination metadata specific to &quot;RootQueryToCommentConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToCommentConnection Nodes.
"""
type RootQueryToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToCommentConnection connection
"""
input RootQueryToCommentConnectionWhereArgs {
  """
  Comment author email address.
  """
  authorEmail: String
  """
  Array of author IDs to include comments for.
  """
  authorIn: [ID]
  """
  Array of author IDs to exclude comments for.
  """
  authorNotIn: [ID]
  """
  Comment author URL.
  """
  authorUrl: String
  """
  Array of comment IDs to include.
  """
  commentIn: [ID]
  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]
  """
  Include comments of a given type.
  """
  commentType: String
  """
  Include comments from a given array of comment types.
  """
  commentTypeIn: [String]
  """
  Exclude comments from a given array of comment types.
  """
  commentTypeNotIn: String
  """
  Content object author ID to limit results by.
  """
  contentAuthor: [ID]
  """
  Array of author IDs to retrieve comments for.
  """
  contentAuthorIn: [ID]
  """
  Array of author IDs *not* to retrieve comments for.
  """
  contentAuthorNotIn: [ID]
  """
  Limit results to those affiliated with a given content object ID.
  """
  contentId: ID
  """
  Array of content object IDs to include affiliated comments for.
  """
  contentIdIn: [ID]
  """
  Array of content object IDs to exclude affiliated comments for.
  """
  contentIdNotIn: [ID]
  """
  Content object name (i.e. slug ) to retrieve affiliated comments for.
  """
  contentName: String
  """
  Content Object parent ID to retrieve affiliated comments for.
  """
  contentParent: Int
  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]
  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]
  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]
  """
  Karma score to retrieve matching comments for.
  """
  karma: Int
  """
  The cardinality of the order of the connection
  """
  order: OrderEnum
  """
  Field to order the comments by.
  """
  orderby: CommentsConnectionOrderbyEnum
  """
  Parent ID of comment to retrieve children of.
  """
  parent: Int
  """
  Array of parent IDs of comments to retrieve children for.
  """
  parentIn: [ID]
  """
  Array of parent IDs of comments *not* to retrieve children for.
  """
  parentNotIn: [ID]
  """
  Search term(s) to retrieve matching comments for.
  """
  search: String
  """
  One or more Comment Statuses to limit results by
  """
  statusIn: [CommentStatusEnum]
  """
  Include comments for a specific user ID.
  """
  userId: ID
}

"""
Connection between the RootQuery type and the ContentNode type
"""
type RootQueryToContentNodeConnection implements Connection & ContentNodeConnection {
  """
  Edges for the RootQueryToContentNodeConnection connection
  """
  edges: [RootQueryToContentNodeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ContentNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToContentNodeConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ContentNode!
}

"""
Pagination metadata specific to &quot;RootQueryToContentNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToContentNodeConnection Nodes.
"""
type RootQueryToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToContentNodeConnection connection
"""
input RootQueryToContentNodeConnectionWhereArgs {
  """
  The Types of content to filter
  """
  contentTypes: [ContentTypeEnum]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the RootQuery type and the ContentType type
"""
type RootQueryToContentTypeConnection implements Connection & ContentTypeConnection {
  """
  Edges for the RootQueryToContentTypeConnection connection
  """
  edges: [RootQueryToContentTypeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ContentType!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToContentTypeConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ContentType!
}

"""
Pagination metadata specific to &quot;RootQueryToContentTypeConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToContentTypeConnection Nodes.
"""
type RootQueryToContentTypeConnectionPageInfo implements ContentTypeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the RootQuery type and the EnqueuedScript type
"""
type RootQueryToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
  """
  Edges for the RootQueryToEnqueuedScriptConnection connection
  """
  edges: [RootQueryToEnqueuedScriptConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [EnqueuedScript!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToEnqueuedScriptConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: EnqueuedScript!
}

"""
Pagination metadata specific to &quot;RootQueryToEnqueuedScriptConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToEnqueuedScriptConnection Nodes.
"""
type RootQueryToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the RootQuery type and the EnqueuedStylesheet type
"""
type RootQueryToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
  """
  Edges for the RootQueryToEnqueuedStylesheetConnection connection
  """
  edges: [RootQueryToEnqueuedStylesheetConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [EnqueuedStylesheet!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToEnqueuedStylesheetConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: EnqueuedStylesheet!
}

"""
Pagination metadata specific to &quot;RootQueryToEnqueuedStylesheetConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToEnqueuedStylesheetConnection Nodes.
"""
type RootQueryToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the RootQuery type and the mediaItem type
"""
type RootQueryToMediaItemConnection implements Connection & MediaItemConnection {
  """
  Edges for the RootQueryToMediaItemConnection connection
  """
  edges: [RootQueryToMediaItemConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [MediaItem!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToMediaItemConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: MediaItem!
}

"""
Pagination metadata specific to &quot;RootQueryToMediaItemConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToMediaItemConnection Nodes.
"""
type RootQueryToMediaItemConnectionPageInfo implements MediaItemConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToMediaItemConnection connection
"""
input RootQueryToMediaItemConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int
  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]
  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String
  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the RootQuery type and the Menu type
"""
type RootQueryToMenuConnection implements Connection & MenuConnection {
  """
  Edges for the RootQueryToMenuConnection connection
  """
  edges: [RootQueryToMenuConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Menu!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToMenuConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToMenuConnectionEdge implements Edge & MenuConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Menu!
}

"""
Pagination metadata specific to &quot;RootQueryToMenuConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToMenuConnection Nodes.
"""
type RootQueryToMenuConnectionPageInfo implements MenuConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToMenuConnection connection
"""
input RootQueryToMenuConnectionWhereArgs {
  """
  The database ID of the object
  """
  id: Int
  """
  The menu location for the menu being queried
  """
  location: MenuLocationEnum
  """
  The slug of the menu to query items for
  """
  slug: String
}

"""
Connection between the RootQuery type and the MenuItem type
"""
type RootQueryToMenuItemConnection implements Connection & MenuItemConnection {
  """
  Edges for the RootQueryToMenuItemConnection connection
  """
  edges: [RootQueryToMenuItemConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [MenuItem!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToMenuItemConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: MenuItem!
}

"""
Pagination metadata specific to &quot;RootQueryToMenuItemConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToMenuItemConnection Nodes.
"""
type RootQueryToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToMenuItemConnection connection
"""
input RootQueryToMenuItemConnectionWhereArgs {
  """
  The database ID of the object
  """
  id: Int
  """
  The menu location for the menu being queried
  """
  location: MenuLocationEnum
  """
  The database ID of the parent menu object
  """
  parentDatabaseId: Int
  """
  The ID of the parent menu object
  """
  parentId: ID
}

"""
Connection between the RootQuery type and the page type
"""
type RootQueryToPageConnection implements Connection & PageConnection {
  """
  Edges for the RootQueryToPageConnection connection
  """
  edges: [RootQueryToPageConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Page!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToPageConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToPageConnectionEdge implements Edge & PageConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Page!
}

"""
Pagination metadata specific to &quot;RootQueryToPageConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToPageConnection Nodes.
"""
type RootQueryToPageConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToPageConnection connection
"""
input RootQueryToPageConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int
  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]
  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String
  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the RootQuery type and the Plugin type
"""
type RootQueryToPluginConnection implements Connection & PluginConnection {
  """
  Edges for the RootQueryToPluginConnection connection
  """
  edges: [RootQueryToPluginConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Plugin!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToPluginConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToPluginConnectionEdge implements Edge & PluginConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Plugin!
}

"""
Pagination metadata specific to &quot;RootQueryToPluginConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToPluginConnection Nodes.
"""
type RootQueryToPluginConnectionPageInfo implements PageInfo & PluginConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToPluginConnection connection
"""
input RootQueryToPluginConnectionWhereArgs {
  """
  Show plugin based on a keyword search.
  """
  search: String
  """
  Retrieve plugins where plugin status is in an array.
  """
  stati: [PluginStatusEnum]
  """
  Show plugins with a specific status.
  """
  status: PluginStatusEnum
}

"""
Connection between the RootQuery type and the post type
"""
type RootQueryToPostConnection implements Connection & PostConnection {
  """
  Edges for the RootQueryToPostConnection connection
  """
  edges: [RootQueryToPostConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Post!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToPostConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToPostConnectionEdge implements Edge & PostConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Post!
}

"""
Pagination metadata specific to &quot;RootQueryToPostConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToPostConnection Nodes.
"""
type RootQueryToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToPostConnection connection
"""
input RootQueryToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int
  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]
  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String
  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]
  """
  Category ID
  """
  categoryId: Int
  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]
  """
  Use Category Slug
  """
  categoryName: String
  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Tag Slug
  """
  tag: String
  """
  Use Tag ID
  """
  tagId: String
  """
  Array of tag IDs, used to display objects from one tag OR another
  """
  tagIn: [ID]
  """
  Array of tag IDs, used to display objects from one tag OR another
  """
  tagNotIn: [ID]
  """
  Array of tag slugs, used to display objects from one tag AND another
  """
  tagSlugAnd: [String]
  """
  Array of tag slugs, used to include objects in ANY specified tags
  """
  tagSlugIn: [String]
  """
  Title of the object
  """
  title: String
}

"""
Connection between the RootQuery type and the postFormat type
"""
type RootQueryToPostFormatConnection implements Connection & PostFormatConnection {
  """
  Edges for the RootQueryToPostFormatConnection connection
  """
  edges: [RootQueryToPostFormatConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [PostFormat!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToPostFormatConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToPostFormatConnectionEdge implements Edge & PostFormatConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: PostFormat!
}

"""
Pagination metadata specific to &quot;RootQueryToPostFormatConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToPostFormatConnection Nodes.
"""
type RootQueryToPostFormatConnectionPageInfo implements PageInfo & PostFormatConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToPostFormatConnection connection
"""
input RootQueryToPostFormatConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String
  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int
  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean
  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String
  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]
  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]
  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean
  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean
  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]
  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]
  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String
  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]
  """
  Direction the connection should be ordered in
  """
  order: OrderEnum
  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum
  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean
  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int
  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String
  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]
  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomyId: [ID]
  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the RootQuery type and the ReusableBlock type
"""
type RootQueryToReusableBlockConnection implements Connection & ReusableBlockConnection {
  """
  Edges for the RootQueryToReusableBlockConnection connection
  """
  edges: [RootQueryToReusableBlockConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ReusableBlock!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToReusableBlockConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToReusableBlockConnectionEdge implements Edge & ReusableBlockConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ReusableBlock!
}

"""
Pagination metadata specific to &quot;RootQueryToReusableBlockConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToReusableBlockConnection Nodes.
"""
type RootQueryToReusableBlockConnectionPageInfo implements PageInfo & ReusableBlockConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToReusableBlockConnection connection
"""
input RootQueryToReusableBlockConnectionWhereArgs {
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the RootQuery type and the ContentNode type
"""
type RootQueryToRevisionsConnection implements Connection & ContentNodeConnection {
  """
  Edges for the RootQueryToRevisionsConnection connection
  """
  edges: [RootQueryToRevisionsConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ContentNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToRevisionsConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToRevisionsConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ContentNode!
}

"""
Pagination metadata specific to &quot;RootQueryToRevisionsConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToRevisionsConnection Nodes.
"""
type RootQueryToRevisionsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToRevisionsConnection connection
"""
input RootQueryToRevisionsConnectionWhereArgs {
  """
  The Types of content to filter
  """
  contentTypes: [ContentTypeEnum]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the RootQuery type and the tag type
"""
type RootQueryToTagConnection implements Connection & TagConnection {
  """
  Edges for the RootQueryToTagConnection connection
  """
  edges: [RootQueryToTagConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Tag!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToTagConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToTagConnectionEdge implements Edge & TagConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Tag!
}

"""
Pagination metadata specific to &quot;RootQueryToTagConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToTagConnection Nodes.
"""
type RootQueryToTagConnectionPageInfo implements PageInfo & TagConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToTagConnection connection
"""
input RootQueryToTagConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String
  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int
  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean
  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String
  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]
  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]
  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean
  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean
  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]
  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]
  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String
  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]
  """
  Direction the connection should be ordered in
  """
  order: OrderEnum
  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum
  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean
  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int
  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String
  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]
  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomyId: [ID]
  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the RootQuery type and the Taxonomy type
"""
type RootQueryToTaxonomyConnection implements Connection & TaxonomyConnection {
  """
  Edges for the RootQueryToTaxonomyConnection connection
  """
  edges: [RootQueryToTaxonomyConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Taxonomy!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToTaxonomyConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToTaxonomyConnectionEdge implements Edge & TaxonomyConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Taxonomy!
}

"""
Pagination metadata specific to &quot;RootQueryToTaxonomyConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToTaxonomyConnection Nodes.
"""
type RootQueryToTaxonomyConnectionPageInfo implements PageInfo & TaxonomyConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the RootQuery type and the TermNode type
"""
type RootQueryToTermNodeConnection implements Connection & TermNodeConnection {
  """
  Edges for the RootQueryToTermNodeConnection connection
  """
  edges: [RootQueryToTermNodeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [TermNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToTermNodeConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: TermNode!
}

"""
Pagination metadata specific to &quot;RootQueryToTermNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToTermNodeConnection Nodes.
"""
type RootQueryToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToTermNodeConnection connection
"""
input RootQueryToTermNodeConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String
  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int
  """
  True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean
  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String
  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]
  """
  Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]
  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean
  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean
  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]
  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]
  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String
  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]
  """
  Direction the connection should be ordered in
  """
  order: OrderEnum
  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum
  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean
  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int
  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String
  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]
  """
  The Taxonomy to filter terms by
  """
  taxonomies: [TaxonomyEnum]
  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomyId: [ID]
  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the RootQuery type and the Theme type
"""
type RootQueryToThemeConnection implements Connection & ThemeConnection {
  """
  Edges for the RootQueryToThemeConnection connection
  """
  edges: [RootQueryToThemeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Theme!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToThemeConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToThemeConnectionEdge implements Edge & ThemeConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Theme!
}

"""
Pagination metadata specific to &quot;RootQueryToThemeConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToThemeConnection Nodes.
"""
type RootQueryToThemeConnectionPageInfo implements PageInfo & ThemeConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the RootQuery type and the User type
"""
type RootQueryToUserConnection implements Connection & UserConnection {
  """
  Edges for the RootQueryToUserConnection connection
  """
  edges: [RootQueryToUserConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [User!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToUserConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToUserConnectionEdge implements Edge & UserConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: User!
}

"""
Pagination metadata specific to &quot;RootQueryToUserConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToUserConnection Nodes.
"""
type RootQueryToUserConnectionPageInfo implements PageInfo & UserConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the RootQueryToUserConnection connection
"""
input RootQueryToUserConnectionWhereArgs {
  """
  Array of userIds to exclude.
  """
  exclude: [Int]
  """
  Pass an array of post types to filter results to users who have published posts in those post types.
  """
  hasPublishedPosts: [ContentTypeEnum]
  """
  Array of userIds to include.
  """
  include: [Int]
  """
  The user login.
  """
  login: String
  """
  An array of logins to include. Users matching one of these logins will be included in results.
  """
  loginIn: [String]
  """
  An array of logins to exclude. Users matching one of these logins will not be included in results.
  """
  loginNotIn: [String]
  """
  The user nicename.
  """
  nicename: String
  """
  An array of nicenames to include. Users matching one of these nicenames will be included in results.
  """
  nicenameIn: [String]
  """
  An array of nicenames to exclude. Users matching one of these nicenames will not be included in results.
  """
  nicenameNotIn: [String]
  """
  What parameter to use to order the objects by.
  """
  orderby: [UsersConnectionOrderbyInput]
  """
  An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role.
  """
  role: UserRoleEnum
  """
  An array of role names. Matched users must have at least one of these roles.
  """
  roleIn: [UserRoleEnum]
  """
  An array of role names to exclude. Users matching one or more of these roles will not be included in results.
  """
  roleNotIn: [UserRoleEnum]
  """
  Search keyword. Searches for possible string matches on columns. When "searchColumns" is left empty, it tries to determine which column to search in based on search string.
  """
  search: String
  """
  Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'.
  """
  searchColumns: [UsersConnectionSearchColumnEnum]
}

"""
Connection between the RootQuery type and the UserRole type
"""
type RootQueryToUserRoleConnection implements Connection & UserRoleConnection {
  """
  Edges for the RootQueryToUserRoleConnection connection
  """
  edges: [RootQueryToUserRoleConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [UserRole!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: RootQueryToUserRoleConnectionPageInfo!
}

"""
An edge in a connection
"""
type RootQueryToUserRoleConnectionEdge implements Edge & UserRoleConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: UserRole!
}

"""
Pagination metadata specific to &quot;RootQueryToUserRoleConnection&quot; collections. Provides cursors and flags for navigating through sets of RootQueryToUserRoleConnection Nodes.
"""
type RootQueryToUserRoleConnectionPageInfo implements PageInfo & UserRoleConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
The Yoast SEO breadcrumb config
"""
type SEOBreadcrumbs {
  archivePrefix: String
  boldLast: Boolean
  enabled: Boolean
  homeText: String
  notFoundText: String
  prefix: String
  searchPrefix: String
  separator: String
  showBlogPage: Boolean
}

"""
Types of cards
"""
enum SEOCardType {
  summary
  summary_large_image
}

"""
The Yoast SEO site level configuration data
"""
type SEOConfig {
  breadcrumbs: SEOBreadcrumbs
  contentTypes: SEOContentTypes
  meta: SEOGlobalMeta
  openGraph: SEOOpenGraph
  redirects: [SEORedirect]
  schema: SEOSchema
  social: SEOSocial
  webmaster: SEOWebmaster
}

"""
The Yoast SEO search appearance content types fields
"""
type SEOContentType {
  archive: SEOContentTypeArchive
  metaDesc: String
  metaRobotsNoindex: Boolean
  schema: SEOPageInfoSchema
  schemaType: String
  title: String
}

"""
The Yoast SEO search appearance content types fields
"""
type SEOContentTypeArchive {
  archiveLink: String
  breadcrumbTitle: String
  fullHead: String
  hasArchive: Boolean
  metaDesc: String
  metaRobotsFollow: String
  metaRobotsIndex: String
  metaRobotsNofollow: Boolean
  metaRobotsNoindex: Boolean
  title: String
}

"""
The Yoast SEO search appearance content types
"""
type SEOContentTypes {
  berlinerWord: SEOContentType
  blockEditorPreview: SEOContentType
  mediaItem: SEOContentType
  page: SEOContentType
  post: SEOContentType
  reusableBlock: SEOContentType
}

"""
The Yoast SEO meta data
"""
type SEOGlobalMeta {
  author: SEOGlobalMetaAuthor
  config: SEOGlobalMetaConfig
  date: SEOGlobalMetaDate
  homepage: SEOGlobalMetaHome
  notFound: SEOGlobalMeta404
}

"""
The Yoast SEO meta 404 data
"""
type SEOGlobalMeta404 {
  breadcrumb: String
  title: String
}

"""
The Yoast SEO Author data
"""
type SEOGlobalMetaAuthor {
  description: String
  title: String
}

"""
The Yoast SEO meta config data
"""
type SEOGlobalMetaConfig {
  separator: String
}

"""
The Yoast SEO Date data
"""
type SEOGlobalMetaDate {
  description: String
  title: String
}

"""
The Yoast SEO homepage data
"""
type SEOGlobalMetaHome {
  description: String
  title: String
}

"""
The Open Graph data
"""
type SEOOpenGraph {
  defaultImage: MediaItem
  frontPage: SEOOpenGraphFrontPage
}

"""
The Open Graph Front page data
"""
type SEOOpenGraphFrontPage {
  description: String
  image: MediaItem
  title: String
}

"""
The Schema for post type
"""
type SEOPageInfoSchema {
  raw: String
}

type SEOPostTypeBreadcrumbs {
  text: String
  url: String
}

"""
The page info SEO details
"""
type SEOPostTypePageInfo {
  schema: SEOPageInfoSchema
}

"""
The Schema types
"""
type SEOPostTypeSchema {
  articleType: [String]
  pageType: [String]
  raw: String
}

"""
The Yoast redirect data  (Yoast Premium only)
"""
type SEORedirect {
  format: String
  origin: String
  target: String
  type: Int
}

"""
The Yoast SEO schema data
"""
type SEOSchema {
  companyLogo: MediaItem
  companyName: String
  companyOrPerson: String
  homeUrl: String
  inLanguage: String
  logo: MediaItem
  personLogo: MediaItem
  personName: String
  siteName: String
  siteUrl: String
  wordpressSiteName: String
}

"""
The Yoast SEO Social media links
"""
type SEOSocial {
  facebook: SEOSocialFacebook
  instagram: SEOSocialInstagram
  linkedIn: SEOSocialLinkedIn
  mySpace: SEOSocialMySpace
  otherSocials: [String]
  pinterest: SEOSocialPinterest
  twitter: SEOSocialTwitter
  wikipedia: SEOSocialWikipedia
  youTube: SEOSocialYoutube
}

type SEOSocialFacebook {
  defaultImage: MediaItem
  url: String
}

type SEOSocialInstagram {
  url: String
}

type SEOSocialLinkedIn {
  url: String
}

type SEOSocialMySpace {
  url: String
}

type SEOSocialPinterest {
  metaTag: String
  url: String
}

type SEOSocialTwitter {
  cardType: SEOCardType
  username: String
}

type SEOSocialWikipedia {
  url: String
}

type SEOSocialYoutube {
  url: String
}

"""
The Schema types for Taxonomy
"""
type SEOTaxonomySchema {
  raw: String
}

type SEOUser {
  breadcrumbTitle: String
  canonical: String
  fullHead: String
  language: String
  metaDesc: String
  metaRobotsNofollow: String
  metaRobotsNoindex: String
  opengraphDescription: String
  opengraphImage: MediaItem
  opengraphTitle: String
  region: String
  schema: SEOUserSchema
  social: SEOUserSocial
  title: String
  twitterDescription: String
  twitterImage: MediaItem
  twitterTitle: String
}

"""
The Schema types for User
"""
type SEOUserSchema {
  articleType: [String]
  pageType: [String]
  raw: String
}

type SEOUserSocial {
  facebook: String
  instagram: String
  linkedIn: String
  mySpace: String
  pinterest: String
  soundCloud: String
  twitter: String
  wikipedia: String
  youTube: String
}

"""
The Yoast SEO  webmaster fields
"""
type SEOWebmaster {
  baiduVerify: String
  googleVerify: String
  msVerify: String
  yandexVerify: String
}

"""
safe-svg/svg-icon block
"""
type SafeSvgSvgIconBlock implements Block {
  attributes: SafeSvgSvgIconBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type SafeSvgSvgIconBlockAttributes {
  alignment: String
  backgroundColor: String
  className: String
  dimensionHeight: Float
  dimensionWidth: Float
  imageHeight: Float
  imageID: Float!
  imageSizes: BlockAttributesObject
  imageWidth: Float
  lock: BlockAttributesObject
  style: BlockAttributesObject
  svgURL: String!
  textColor: String
  type: String!
}

"""
Script insertion positions in the document structure. Determines whether scripts are placed in the document head or before the closing body tag.
"""
enum ScriptLoadingGroupLocationEnum {
  """
  Delayed loading at end of document, right before the closing `<body>` tag. (allows content to render first)
  """
  FOOTER
  """
  Early loading in document `<head>` tag. (executes before page content renders)
  """
  HEADER
}

"""
Script loading optimization attributes. Controls browser behavior for script loading to improve page performance (async or defer).
"""
enum ScriptLoadingStrategyEnum {
  """
  Load script in parallel with page rendering, executing as soon as downloaded
  """
  ASYNC
  """
  Download script in parallel but defer execution until page is fully parsed
  """
  DEFER
}

"""
Input for the sendEmail mutation.
"""
input SendEmailInput {
  """
  Body of email
  """
  body: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  Who to send the email from
  """
  from: String
  """
  Reply to address
  """
  replyTo: String
  """
  Subject of email
  """
  subject: String
  """
  Who to send the email to
  """
  to: String
}

"""
The payload for the sendEmail mutation.
"""
type SendEmailPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  Message
  """
  message: String
  """
  Origin that sent the request
  """
  origin: String
  """
  reply To address used
  """
  replyTo: String
  """
  Was the email sent
  """
  sent: Boolean
  """
  Who the email got sent to
  """
  to: String
}

"""
Input for the sendPasswordResetEmail mutation.
"""
input SendPasswordResetEmailInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  A string that contains the user's username or email address.
  """
  username: String!
}

"""
The payload for the sendPasswordResetEmail mutation.
"""
type SendPasswordResetEmailPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  Whether the mutation completed successfully. This does NOT necessarily mean that an email was sent.
  """
  success: Boolean
  """
  The user that the password reset email was sent to
  """
  user: User @deprecated(reason: "This field will be removed in a future version of WPGraphQL")
}

"""
All of the registered settings
"""
type Settings {
  """
  Settings of the the string Settings Group
  """
  discussionSettingsDefaultCommentStatus: String
  """
  Settings of the the string Settings Group
  """
  discussionSettingsDefaultPingStatus: String
  """
  Settings of the the string Settings Group
  """
  generalSettingsDateFormat: String
  """
  Settings of the the string Settings Group
  """
  generalSettingsDescription: String
  """
  Settings of the the string Settings Group
  """
  generalSettingsEmail: String
  """
  Settings of the the string Settings Group
  """
  generalSettingsLanguage: String
  """
  Settings of the the integer Settings Group
  """
  generalSettingsStartOfWeek: Int
  """
  Settings of the the string Settings Group
  """
  generalSettingsTimeFormat: String
  """
  Settings of the the string Settings Group
  """
  generalSettingsTimezone: String
  """
  Settings of the the string Settings Group
  """
  generalSettingsTitle: String
  """
  Settings of the the string Settings Group
  """
  generalSettingsUrl: String
  """
  Settings of the the integer Settings Group
  """
  readingSettingsPageForPosts: Int
  """
  Settings of the the integer Settings Group
  """
  readingSettingsPageOnFront: Int
  """
  Settings of the the integer Settings Group
  """
  readingSettingsPostsPerPage: Int
  """
  Settings of the the string Settings Group
  """
  readingSettingsShowOnFront: String
  """
  Settings of the the integer Settings Group
  """
  writingSettingsDefaultCategory: Int
  """
  Settings of the the string Settings Group
  """
  writingSettingsDefaultPostFormat: String
  """
  Settings of the the boolean Settings Group
  """
  writingSettingsUseSmilies: Boolean
}

"""
The &quot;SocialAdvanced&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;.
"""
type SocialAdvanced implements AcfFieldGroup & AcfFieldGroupFields & SocialAdvanced_Fields {
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;url&quot; Field Type added to the schema as part of the &quot;SocialAdvanced&quot; Field Group
  """
  github: String
  """
  Field of the &quot;url&quot; Field Type added to the schema as part of the &quot;SocialAdvanced&quot; Field Group
  """
  mastodon: String
}

"""
Interface representing fields of the ACF &quot;SocialAdvanced&quot; Field Group
"""
interface SocialAdvanced_Fields implements AcfFieldGroup & AcfFieldGroupFields {
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;url&quot; Field Type added to the schema as part of the &quot;SocialAdvanced&quot; Field Group
  """
  github: String
  """
  Field of the &quot;url&quot; Field Type added to the schema as part of the &quot;SocialAdvanced&quot; Field Group
  """
  mastodon: String
}

"""
A taxonomy term used to organize and classify content. Tags do not have a hierarchy and are generally used for more specific classifications.
"""
type Tag implements DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
  """
  Connection between the Tag type and the ContentNode type
  """
  contentNodes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: TagToContentNodeConnectionWhereArgs
  ): TagToContentNodeConnection
  """
  The number of objects connected to the object
  """
  count: Int
  """
  The unique identifier stored in the database
  """
  databaseId: Int!
  """
  The description of the object
  """
  description: String
  """
  Connection between the TermNode type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  """
  Connection between the TermNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The link to the term
  """
  link: String
  """
  The human friendly name of the object.
  """
  name: String
  """
  Connection between the Tag type and the post type
  """
  posts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: TagToPostConnectionWhereArgs
  ): TagToPostConnection
  """
  The Yoast SEO data of the SchlagwÃ¶rter taxonomy.
  """
  seo: TaxonomySEO
  """
  An alphanumeric identifier for the object unique to its type.
  """
  slug: String
  """
  The id field matches the WP_Post-&gt;ID field.
  """
  tagId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  """
  Connection between the Tag type and the Taxonomy type
  """
  taxonomy: TagToTaxonomyConnectionEdge
  """
  The name of the taxonomy that the object is associated with
  """
  taxonomyName: String
  """
  The ID of the term group that this term object belongs to
  """
  termGroupId: Int
  """
  The taxonomy ID that the object is associated with
  """
  termTaxonomyId: Int
  """
  The unique resource identifier path
  """
  uri: String
}

"""
A paginated collection of tag Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of tag Nodes
"""
interface TagConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected tag Nodes
  """
  edges: [TagConnectionEdge!]!
  """
  A list of connected tag Nodes
  """
  nodes: [Tag!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: TagConnectionPageInfo!
}

"""
Represents a connection to a tag. Contains both the tag Node and metadata about the relationship.
"""
interface TagConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected tag Node
  """
  node: Tag!
}

"""
Pagination metadata specific to &quot;TagConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;TagConnectionEdge&quot; Nodes.
"""
interface TagConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Identifier types for retrieving a specific Tag. Determines which unique property (global ID, database ID, slug, etc.) is used to locate the Tag.
"""
enum TagIdType {
  """
  The Database ID for the node
  """
  DATABASE_ID
  """
  The hashed Global ID
  """
  ID
  """
  The name of the node
  """
  NAME
  """
  Url friendly name of the node
  """
  SLUG
  """
  The URI for the node
  """
  URI
}

"""
Connection between the Tag type and the ContentNode type
"""
type TagToContentNodeConnection implements Connection & ContentNodeConnection {
  """
  Edges for the TagToContentNodeConnection connection
  """
  edges: [TagToContentNodeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ContentNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: TagToContentNodeConnectionPageInfo!
}

"""
An edge in a connection
"""
type TagToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ContentNode!
}

"""
Pagination metadata specific to &quot;TagToContentNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of TagToContentNodeConnection Nodes.
"""
type TagToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the TagToContentNodeConnection connection
"""
input TagToContentNodeConnectionWhereArgs {
  """
  The Types of content to filter
  """
  contentTypes: [ContentTypesOfTagEnum]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the Tag type and the post type
"""
type TagToPostConnection implements Connection & PostConnection {
  """
  Edges for the TagToPostConnection connection
  """
  edges: [TagToPostConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Post!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: TagToPostConnectionPageInfo!
}

"""
An edge in a connection
"""
type TagToPostConnectionEdge implements Edge & PostConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Post!
}

"""
Pagination metadata specific to &quot;TagToPostConnection&quot; collections. Provides cursors and flags for navigating through sets of TagToPostConnection Nodes.
"""
type TagToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the TagToPostConnection connection
"""
input TagToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int
  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]
  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String
  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]
  """
  Category ID
  """
  categoryId: Int
  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]
  """
  Use Category Slug
  """
  categoryName: String
  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Tag Slug
  """
  tag: String
  """
  Use Tag ID
  """
  tagId: String
  """
  Array of tag IDs, used to display objects from one tag OR another
  """
  tagIn: [ID]
  """
  Array of tag IDs, used to display objects from one tag OR another
  """
  tagNotIn: [ID]
  """
  Array of tag slugs, used to display objects from one tag AND another
  """
  tagSlugAnd: [String]
  """
  Array of tag slugs, used to include objects in ANY specified tags
  """
  tagSlugIn: [String]
  """
  Title of the object
  """
  title: String
}

"""
Connection between the Tag type and the Taxonomy type
"""
type TagToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The node of the connection, without the edges
  """
  node: Taxonomy!
}

"""
A taxonomy object
"""
type Taxonomy implements Node {
  """
  List of Content Types associated with the Taxonomy
  """
  connectedContentTypes(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): TaxonomyToContentTypeConnection
  """
  List of Term Nodes associated with the Taxonomy
  """
  connectedTerms(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): TaxonomyToTermNodeConnection
  """
  Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description
  """
  description: String
  """
  The plural name of the post type within the GraphQL Schema.
  """
  graphqlPluralName: String
  """
  The singular name of the post type within the GraphQL Schema.
  """
  graphqlSingleName: String
  """
  Whether the taxonomy is hierarchical
  """
  hierarchical: Boolean
  """
  The globally unique identifier of the taxonomy object.
  """
  id: ID!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Name of the taxonomy shown in the menu. Usually plural.
  """
  label: String
  """
  The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label
  """
  name: String
  """
  Whether the taxonomy is publicly queryable
  """
  public: Boolean
  """
  Name of content type to display in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String
  """
  The REST Controller class assigned to handling this content type.
  """
  restControllerClass: String
  """
  Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud
  """
  showCloud: Boolean
  """
  Whether to display a column for the taxonomy on its post type listing screens.
  """
  showInAdminColumn: Boolean
  """
  Whether to add the post type to the GraphQL Schema.
  """
  showInGraphql: Boolean
  """
  Whether to show the taxonomy in the admin menu
  """
  showInMenu: Boolean
  """
  Whether the taxonomy is available for selection in navigation menus.
  """
  showInNavMenus: Boolean
  """
  Whether to show the taxonomy in the quick/bulk edit panel.
  """
  showInQuickEdit: Boolean
  """
  Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean
  """
  Whether to generate and allow a UI for managing terms in this taxonomy in the admin
  """
  showUi: Boolean
}

"""
A paginated collection of Taxonomy Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of Taxonomy Nodes
"""
interface TaxonomyConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected Taxonomy Nodes
  """
  edges: [TaxonomyConnectionEdge!]!
  """
  A list of connected Taxonomy Nodes
  """
  nodes: [Taxonomy!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: TaxonomyConnectionPageInfo!
}

"""
Represents a connection to a Taxonomy. Contains both the Taxonomy Node and metadata about the relationship.
"""
interface TaxonomyConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected Taxonomy Node
  """
  node: Taxonomy!
}

"""
Pagination metadata specific to &quot;TaxonomyConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;TaxonomyConnectionEdge&quot; Nodes.
"""
interface TaxonomyConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Available classification systems for organizing content. Identifies the different taxonomy types that can be used for content categorization.
"""
enum TaxonomyEnum {
  """
  Taxonomy enum berlinerisch_word_type
  """
  BERLINERISCHWORDTYPE
  """
  Taxonomy enum category
  """
  CATEGORY
  """
  Taxonomy enum post_format
  """
  POSTFORMAT
  """
  Taxonomy enum post_tag
  """
  TAG
}

"""
Identifier types for retrieving a taxonomy definition. Determines whether to look up taxonomies by ID or name.
"""
enum TaxonomyIdTypeEnum {
  """
  The globally unique ID
  """
  ID
  """
  The name of the taxonomy
  """
  NAME
}

type TaxonomySEO {
  breadcrumbs: [SEOPostTypeBreadcrumbs]
  canonical: String
  cornerstone: Boolean
  focuskw: String
  fullHead: String
  metaDesc: String
  metaKeywords: String
  metaRobotsNofollow: String
  metaRobotsNoindex: String
  opengraphAuthor: String
  opengraphDescription: String
  opengraphImage: MediaItem
  opengraphModifiedTime: String
  opengraphPublishedTime: String
  opengraphPublisher: String
  opengraphSiteName: String
  opengraphTitle: String
  opengraphType: String
  opengraphUrl: String
  schema: SEOTaxonomySchema
  title: String
  twitterDescription: String
  twitterImage: MediaItem
  twitterTitle: String
}

"""
Connection between the Taxonomy type and the ContentType type
"""
type TaxonomyToContentTypeConnection implements Connection & ContentTypeConnection {
  """
  Edges for the TaxonomyToContentTypeConnection connection
  """
  edges: [TaxonomyToContentTypeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ContentType!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: TaxonomyToContentTypeConnectionPageInfo!
}

"""
An edge in a connection
"""
type TaxonomyToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ContentType!
}

"""
Pagination metadata specific to &quot;TaxonomyToContentTypeConnection&quot; collections. Provides cursors and flags for navigating through sets of TaxonomyToContentTypeConnection Nodes.
"""
type TaxonomyToContentTypeConnectionPageInfo implements ContentTypeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the Taxonomy type and the TermNode type
"""
type TaxonomyToTermNodeConnection implements Connection & TermNodeConnection {
  """
  Edges for the TaxonomyToTermNodeConnection connection
  """
  edges: [TaxonomyToTermNodeConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [TermNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: TaxonomyToTermNodeConnectionPageInfo!
}

"""
An edge in a connection
"""
type TaxonomyToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: TermNode!
}

"""
Pagination metadata specific to &quot;TaxonomyToTermNodeConnection&quot; collections. Provides cursors and flags for navigating through sets of TaxonomyToTermNodeConnection Nodes.
"""
type TaxonomyToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Base interface for taxonomy terms such as categories and tags. Terms are used to organize and classify content.
"""
interface TermNode implements Node & UniformResourceIdentifiable {
  """
  The number of objects connected to the object
  """
  count: Int
  """
  Identifies the primary key from the database.
  """
  databaseId: Int!
  """
  The description of the object
  """
  description: String
  """
  Connection between the TermNode type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  """
  Connection between the TermNode type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The link to the term
  """
  link: String
  """
  The human friendly name of the object.
  """
  name: String
  """
  An alphanumeric identifier for the object unique to its type.
  """
  slug: String
  """
  The name of the taxonomy that the object is associated with
  """
  taxonomyName: String
  """
  The ID of the term group that this term object belongs to
  """
  termGroupId: Int
  """
  The taxonomy ID that the object is associated with
  """
  termTaxonomyId: Int
  """
  The unique resource identifier path
  """
  uri: String
}

"""
A paginated collection of TermNode Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of TermNode Nodes
"""
interface TermNodeConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected TermNode Nodes
  """
  edges: [TermNodeConnectionEdge!]!
  """
  A list of connected TermNode Nodes
  """
  nodes: [TermNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: TermNodeConnectionPageInfo!
}

"""
Represents a connection to a TermNode. Contains both the TermNode Node and metadata about the relationship.
"""
interface TermNodeConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected TermNode Node
  """
  node: TermNode!
}

"""
Pagination metadata specific to &quot;TermNodeConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;TermNodeConnectionEdge&quot; Nodes.
"""
interface TermNodeConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
The Type of Identifier used to fetch a single resource. Default is "ID". To be used along with the "id" field.
"""
enum TermNodeIdTypeEnum {
  """
  The Database ID for the node
  """
  DATABASE_ID
  """
  The hashed Global ID
  """
  ID
  """
  The name of the node
  """
  NAME
  """
  Url friendly name of the node
  """
  SLUG
  """
  The URI for the node
  """
  URI
}

"""
Connection between the TermNode type and the EnqueuedScript type
"""
type TermNodeToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
  """
  Edges for the TermNodeToEnqueuedScriptConnection connection
  """
  edges: [TermNodeToEnqueuedScriptConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [EnqueuedScript!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: TermNodeToEnqueuedScriptConnectionPageInfo!
}

"""
An edge in a connection
"""
type TermNodeToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: EnqueuedScript!
}

"""
Pagination metadata specific to &quot;TermNodeToEnqueuedScriptConnection&quot; collections. Provides cursors and flags for navigating through sets of TermNodeToEnqueuedScriptConnection Nodes.
"""
type TermNodeToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the TermNode type and the EnqueuedStylesheet type
"""
type TermNodeToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
  """
  Edges for the TermNodeToEnqueuedStylesheetConnection connection
  """
  edges: [TermNodeToEnqueuedStylesheetConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [EnqueuedStylesheet!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: TermNodeToEnqueuedStylesheetConnectionPageInfo!
}

"""
An edge in a connection
"""
type TermNodeToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: EnqueuedStylesheet!
}

"""
Pagination metadata specific to &quot;TermNodeToEnqueuedStylesheetConnection&quot; collections. Provides cursors and flags for navigating through sets of TermNodeToEnqueuedStylesheetConnection Nodes.
"""
type TermNodeToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Sorting attributes for taxonomy term collections. Determines which property of taxonomy terms is used for ordering results.
"""
enum TermObjectsConnectionOrderbyEnum {
  """
  Ordering by number of associated content items.
  """
  COUNT
  """
  Alphabetical ordering by term description text.
  """
  DESCRIPTION
  """
  Alphabetical ordering by term name.
  """
  NAME
  """
  Alphabetical ordering by URL-friendly name.
  """
  SLUG
  """
  Ordering by assigned term grouping value.
  """
  TERM_GROUP
  """
  Ordering by internal identifier.
  """
  TERM_ID
  """
  Ordering by manually defined sort position.
  """
  TERM_ORDER
}

"""
A theme object
"""
type Theme implements Node {
  """
  Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; ).
  """
  author: String
  """
  URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; ).
  """
  authorUri: String
  """
  The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; ).
  """
  description: String
  """
  The globally unique identifier of the theme object.
  """
  id: ID!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; ).
  """
  name: String
  """
  The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot().
  """
  screenshot: String
  """
  The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet().
  """
  slug: String
  """
  URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; ).
  """
  tags: [String]
  """
  A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; ).
  """
  themeUri: String
  """
  The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; ).
  """
  version: String
}

"""
A paginated collection of Theme Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of Theme Nodes
"""
interface ThemeConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected Theme Nodes
  """
  edges: [ThemeConnectionEdge!]!
  """
  A list of connected Theme Nodes
  """
  nodes: [Theme!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: ThemeConnectionPageInfo!
}

"""
Represents a connection to a Theme. Contains both the Theme Node and metadata about the relationship.
"""
interface ThemeConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected Theme Node
  """
  node: Theme!
}

"""
Pagination metadata specific to &quot;ThemeConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;ThemeConnectionEdge&quot; Nodes.
"""
interface ThemeConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

type ThemeGeneralSettings implements AcfOptionsPage & Node {
  """
  The globally unique ID for the object
  """
  id: ID!
  menuTitle: String
  pageTitle: String
  parentId: String
}

"""
An interface for content that can be accessed via a unique URI/URL path. Implemented by content types that have their own permalinks.
"""
interface UniformResourceIdentifiable implements Node {
  """
  The globally unique ID for the object
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The unique resource identifier path
  """
  uri: String
}

"""
Input for the updateBerlinerWord mutation.
"""
input UpdateBerlinerWordInput {
  """
  Set connections between the berlinerWord and berlinerischWordTypes
  """
  berlinerischWordTypes: BerlinerWordBerlinerischWordTypesInput
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17
  """
  date: String
  """
  The ID of the berlinerWord object
  """
  id: ID!
  """
  Override the edit lock when another user is editing the post
  """
  ignoreEditLock: Boolean
  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
  """
  The ID of the parent object
  """
  parentId: ID
  """
  The password used to protect the content of the object
  """
  password: String
  """
  The slug of the object
  """
  slug: String
  """
  The status of the object
  """
  status: PostStatusEnum
  """
  The title of the object
  """
  title: String
}

"""
The payload for the updateBerlinerWord mutation.
"""
type UpdateBerlinerWordPayload {
  """
  The Post object mutation type.
  """
  berlinerWord: BerlinerWord
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
}

"""
Input for the updateBerlinerischWordType mutation.
"""
input UpdateBerlinerischWordTypeInput {
  """
  The slug that the berlinerisch_word_type will be an alias of
  """
  aliasOf: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The description of the berlinerisch_word_type object
  """
  description: String
  """
  The ID of the berlinerischWordType object to update
  """
  id: ID!
  """
  The name of the berlinerisch_word_type object to mutate
  """
  name: String
  """
  The database ID of the berlinerisch_word_type that should be set as the parent. This field cannot be used in conjunction with parentId
  """
  parentDatabaseId: Int
  """
  The ID of the berlinerisch_word_type that should be set as the parent. This field cannot be used in conjunction with parentDatabaseId
  """
  parentId: ID
  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the updateBerlinerischWordType mutation.
"""
type UpdateBerlinerischWordTypePayload {
  """
  The created berlinerisch_word_type
  """
  berlinerischWordType: BerlinerischWordType
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
}

"""
Input for the updateBlockEditorPreview mutation.
"""
input UpdateBlockEditorPreviewInput {
  """
  The userId to assign as the author of the object
  """
  authorId: ID
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The content of the object
  """
  content: String
  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17
  """
  date: String
  """
  The ID of the BlockEditorPreview object
  """
  id: ID!
  """
  Override the edit lock when another user is editing the post
  """
  ignoreEditLock: Boolean
  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
  """
  The password used to protect the content of the object
  """
  password: String
  """
  The slug of the object
  """
  slug: String
  """
  The status of the object
  """
  status: PostStatusEnum
  """
  The title of the object
  """
  title: String
}

"""
The payload for the updateBlockEditorPreview mutation.
"""
type UpdateBlockEditorPreviewPayload {
  """
  The Post object mutation type.
  """
  blockEditorPreview: BlockEditorPreview
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
}

"""
Input for the updateCategory mutation.
"""
input UpdateCategoryInput {
  """
  The slug that the category will be an alias of
  """
  aliasOf: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The description of the category object
  """
  description: String
  """
  The ID of the category object to update
  """
  id: ID!
  """
  The name of the category object to mutate
  """
  name: String
  """
  The database ID of the category that should be set as the parent. This field cannot be used in conjunction with parentId
  """
  parentDatabaseId: Int
  """
  The ID of the category that should be set as the parent. This field cannot be used in conjunction with parentDatabaseId
  """
  parentId: ID
  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the updateCategory mutation.
"""
type UpdateCategoryPayload {
  """
  The created category
  """
  category: Category
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
}

"""
Input for the updateComment mutation.
"""
input UpdateCommentInput {
  """
  The name of the comment's author.
  """
  author: String
  """
  The email of the comment's author.
  """
  authorEmail: String
  """
  The url of the comment's author.
  """
  authorUrl: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The database ID of the post object the comment belongs to.
  """
  commentOn: Int
  """
  Content of the comment.
  """
  content: String
  """
  The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17
  """
  date: String
  """
  The ID of the comment being updated.
  """
  id: ID!
  """
  Parent comment ID of current comment.
  """
  parent: ID
  """
  The approval status of the comment
  """
  status: CommentStatusEnum
  """
  Type of comment.
  """
  type: String
}

"""
The payload for the updateComment mutation.
"""
type UpdateCommentPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The comment that was created
  """
  comment: Comment
  """
  Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache
  """
  success: Boolean
}

"""
Input for the updateMediaItem mutation.
"""
input UpdateMediaItemInput {
  """
  Alternative text to display when mediaItem is not displayed
  """
  altText: String
  """
  The userId to assign as the author of the mediaItem
  """
  authorId: ID
  """
  The caption for the mediaItem
  """
  caption: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The comment status for the mediaItem
  """
  commentStatus: String
  """
  The date of the mediaItem
  """
  date: String
  """
  The date (in GMT zone) of the mediaItem
  """
  dateGmt: String
  """
  Description of the mediaItem
  """
  description: String
  """
  The file name of the mediaItem
  """
  filePath: String
  """
  The file type of the mediaItem
  """
  fileType: MimeTypeEnum
  """
  The ID of the mediaItem object
  """
  id: ID!
  """
  The ID of the parent object
  """
  parentId: ID
  """
  The ping status for the mediaItem
  """
  pingStatus: String
  """
  The slug of the mediaItem
  """
  slug: String
  """
  The status of the mediaItem
  """
  status: MediaItemStatusEnum
  """
  The title of the mediaItem
  """
  title: String
}

"""
The payload for the updateMediaItem mutation.
"""
type UpdateMediaItemPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The MediaItem object mutation type.
  """
  mediaItem: MediaItem
}

"""
Input for the updatePage mutation.
"""
input UpdatePageInput {
  """
  The userId to assign as the author of the object
  """
  authorId: ID
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The comment status for the object
  """
  commentStatus: String
  """
  The content of the object
  """
  content: String
  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17
  """
  date: String
  """
  The ID of the page object
  """
  id: ID!
  """
  Override the edit lock when another user is editing the post
  """
  ignoreEditLock: Boolean
  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
  """
  The ID of the parent object
  """
  parentId: ID
  """
  The password used to protect the content of the object
  """
  password: String
  """
  The slug of the object
  """
  slug: String
  """
  The status of the object
  """
  status: PostStatusEnum
  """
  The title of the object
  """
  title: String
}

"""
The payload for the updatePage mutation.
"""
type UpdatePagePayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The Post object mutation type.
  """
  page: Page
}

"""
Input for the updatePostFormat mutation.
"""
input UpdatePostFormatInput {
  """
  The slug that the post_format will be an alias of
  """
  aliasOf: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The description of the post_format object
  """
  description: String
  """
  The ID of the postFormat object to update
  """
  id: ID!
  """
  The name of the post_format object to mutate
  """
  name: String
  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the updatePostFormat mutation.
"""
type UpdatePostFormatPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The created post_format
  """
  postFormat: PostFormat
}

"""
Input for the updatePost mutation.
"""
input UpdatePostInput {
  """
  The userId to assign as the author of the object
  """
  authorId: ID
  """
  Set connections between the post and categories
  """
  categories: PostCategoriesInput
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The comment status for the object
  """
  commentStatus: String
  """
  The content of the object
  """
  content: String
  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17
  """
  date: String
  """
  The excerpt of the object
  """
  excerpt: String
  """
  The ID of the post object
  """
  id: ID!
  """
  Override the edit lock when another user is editing the post
  """
  ignoreEditLock: Boolean
  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
  """
  The password used to protect the content of the object
  """
  password: String
  """
  The ping status for the object
  """
  pingStatus: String
  """
  URLs that have been pinged.
  """
  pinged: [String]
  """
  Set connections between the post and postFormats
  """
  postFormats: PostPostFormatsInput
  """
  The slug of the object
  """
  slug: String
  """
  The status of the object
  """
  status: PostStatusEnum
  """
  Set connections between the post and tags
  """
  tags: PostTagsInput
  """
  The title of the object
  """
  title: String
  """
  URLs queued to be pinged.
  """
  toPing: [String]
}

"""
The payload for the updatePost mutation.
"""
type UpdatePostPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The Post object mutation type.
  """
  post: Post
}

"""
Input for the updateReusableBlock mutation.
"""
input UpdateReusableBlockInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The content of the object
  """
  content: String
  """
  The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17
  """
  date: String
  """
  The excerpt of the object
  """
  excerpt: String
  """
  The ID of the ReusableBlock object
  """
  id: ID!
  """
  Override the edit lock when another user is editing the post
  """
  ignoreEditLock: Boolean
  """
  A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
  """
  menuOrder: Int
  """
  The password used to protect the content of the object
  """
  password: String
  """
  The slug of the object
  """
  slug: String
  """
  The status of the object
  """
  status: PostStatusEnum
  """
  The title of the object
  """
  title: String
}

"""
The payload for the updateReusableBlock mutation.
"""
type UpdateReusableBlockPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The Post object mutation type.
  """
  reusableBlock: ReusableBlock
}

"""
Input for the updateSettings mutation.
"""
input UpdateSettingsInput {
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  Erlaube Besuchern, neue BeitrÃ¤ge zu kommentieren.
  """
  discussionSettingsDefaultCommentStatus: String
  """
  Link-Benachrichtigungen von anderen Blogs (Pingbacks und Trackbacks) zu neuen BeitrÃ¤gen erlauben.
  """
  discussionSettingsDefaultPingStatus: String
  """
  Ein Zeitformat fÃ¼r alle datumsbasierten Zeichenfolgen.
  """
  generalSettingsDateFormat: String
  """
  Website-Untertitel.
  """
  generalSettingsDescription: String
  """
  Diese Adresse wird fÃ¼r administrative Zwecke verwendet, wie Benachrichtigungen Ã¼ber neue Benutzer.
  """
  generalSettingsEmail: String
  """
  WordPress-LÃ¤ndercode.
  """
  generalSettingsLanguage: String
  """
  Die Zahl eines Wochentages, mit dem die Woche beginnen sollte.
  """
  generalSettingsStartOfWeek: Int
  """
  Ein Zeitformat fÃ¼r alle zeitbasierten Zeichenfolgen.
  """
  generalSettingsTimeFormat: String
  """
  Eine Stadt in deiner Zeitzone.
  """
  generalSettingsTimezone: String
  """
  Website-Titel.
  """
  generalSettingsTitle: String
  """
  Website-URL.
  """
  generalSettingsUrl: String
  """
  Die ID der Seite, auf der die neuesten BeitrÃ¤ge angezeigt werden sollen
  """
  readingSettingsPageForPosts: Int
  """
  Die ID der Seite, die auf der Startseite angezeigt werden soll
  """
  readingSettingsPageOnFront: Int
  """
  Maximal angezeigte BeitrÃ¤ge.
  """
  readingSettingsPostsPerPage: Int
  """
  Was auf der Startseite angezeigt werden soll
  """
  readingSettingsShowOnFront: String
  """
  Standard-Beitragskategorie.
  """
  writingSettingsDefaultCategory: Int
  """
  Standard-Beitragsformat.
  """
  writingSettingsDefaultPostFormat: String
  """
  Emoticons wie :-) und :-P als Grafiken anzeigen.
  """
  writingSettingsUseSmilies: Boolean
}

"""
The payload for the updateSettings mutation.
"""
type UpdateSettingsPayload {
  """
  Update all settings.
  """
  allSettings: Settings
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  Update the DiscussionSettings setting.
  """
  discussionSettings: DiscussionSettings
  """
  Update the GeneralSettings setting.
  """
  generalSettings: GeneralSettings
  """
  Update the ReadingSettings setting.
  """
  readingSettings: ReadingSettings
  """
  Update the WritingSettings setting.
  """
  writingSettings: WritingSettings
}

"""
Input for the updateTag mutation.
"""
input UpdateTagInput {
  """
  The slug that the post_tag will be an alias of
  """
  aliasOf: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The description of the post_tag object
  """
  description: String
  """
  The ID of the tag object to update
  """
  id: ID!
  """
  The name of the post_tag object to mutate
  """
  name: String
  """
  If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the updateTag mutation.
"""
type UpdateTagPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The created post_tag
  """
  tag: Tag
}

"""
Input for the updateUser mutation.
"""
input UpdateUserInput {
  """
  User's AOL IM account.
  """
  aim: String
  """
  This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  A string containing content about the user.
  """
  description: String
  """
  A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String
  """
  A string containing the user's email address.
  """
  email: String
  """
  The user's first name.
  """
  firstName: String
  """
  The ID of the user
  """
  id: ID!
  """
  User's Jabber account.
  """
  jabber: String
  """
  The user's last name.
  """
  lastName: String
  """
  User's locale.
  """
  locale: String
  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String
  """
  The user's nickname, defaults to the user's username.
  """
  nickname: String
  """
  A string that contains the plain text password for the user.
  """
  password: String
  """
  If true, this will refresh the users JWT secret.
  """
  refreshJwtUserSecret: Boolean
  """
  The date the user registered. Format is Y-m-d H:i:s.
  """
  registered: String
  """
  If true, this will revoke the users JWT secret. If false, this will unrevoke the JWT secret AND issue a new one. To revoke, the user must have proper capabilities to edit users JWT secrets.
  """
  revokeJwtUserSecret: Boolean
  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String
  """
  An array of roles to be assigned to the user.
  """
  roles: [String]
  """
  A string containing the user's URL for the user's web site.
  """
  websiteUrl: String
  """
  User's Yahoo IM account.
  """
  yim: String
}

"""
The payload for the updateUser mutation.
"""
type UpdateUserPayload {
  """
  If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
  """
  clientMutationId: String
  """
  The User object mutation type.
  """
  user: User
}

"""
A registered user account. Users can be assigned roles, author content, and have various capabilities within the site.
"""
type User implements Commenter & DatabaseIdentifier & Node & UniformResourceIdentifiable & WithAcfSocialAdvanced {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar(
    """
    Whether to always show the default image, never the Gravatar. Default false
    """
    forceDefault: Boolean
    """
    The rating level of the avatar.
    """
    rating: AvatarRatingEnum
    """
    The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels.
    """
    size: Int = 96
  ): Avatar
  """
  Connection between the User type and the BlockEditorPreview type
  """
  blockEditorPreviews(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: UserToBlockEditorPreviewConnectionWhereArgs
  ): UserToBlockEditorPreviewConnection
  """
  User metadata option name. Usually it will be &quot;wp_capabilities&quot;.
  """
  capKey: String
  """
  A list of capabilities (permissions) granted to the user
  """
  capabilities: [String]
  """
  Connection between the User type and the Comment type
  """
  comments(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: UserToCommentConnectionWhereArgs
  ): UserToCommentConnection
  """
  Identifies the primary key from the database.
  """
  databaseId: Int!
  """
  Description of the user.
  """
  description: String
  """
  Email address of the user. This is equivalent to the WP_User-&gt;user_email property.
  """
  email: String
  """
  Connection between the User type and the EnqueuedScript type
  """
  enqueuedScripts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): UserToEnqueuedScriptConnection
  """
  Connection between the User type and the EnqueuedStylesheet type
  """
  enqueuedStylesheets(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): UserToEnqueuedStylesheetConnection
  """
  A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps.
  """
  extraCapabilities: [String]
  """
  First name of the user. This is equivalent to the WP_User-&gt;user_first_name property.
  """
  firstName: String
  """
  The globally unique identifier for the user object.
  """
  id: ID!
  """
  Whether the node is a Comment
  """
  isComment: Boolean!
  """
  Whether the node is a Content Node
  """
  isContentNode: Boolean!
  """
  Whether the node represents the front page.
  """
  isFrontPage: Boolean!
  """
  Whether the JWT User secret has been revoked. If the secret has been revoked, auth tokens will not be issued until an admin, or user with proper capabilities re-issues a secret for the user.
  """
  isJwtAuthSecretRevoked: Boolean!
  """
  Whether  the node represents the blog page.
  """
  isPostsPage: Boolean!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  Whether the node is a Term
  """
  isTermNode: Boolean!
  """
  The expiration for the JWT Token for the user. If not set custom for the user, it will use the default sitewide expiration setting
  """
  jwtAuthExpiration: String
  """
  A JWT token that can be used in future requests for authentication/authorization
  """
  jwtAuthToken: String
  """
  A JWT token that can be used in future requests to get a refreshed jwtAuthToken. If the refresh token used in a request is revoked or otherwise invalid, a valid Auth token will NOT be issued in the response headers.
  """
  jwtRefreshToken: String
  """
  A unique secret tied to the users JWT token that can be revoked or refreshed. Revoking the secret prevents JWT tokens from being issued to the user. Refreshing the token invalidates previously issued tokens, but allows new tokens to be issued.
  """
  jwtUserSecret: String
  """
  Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property.
  """
  lastName: String
  """
  The preferred language locale set for the user. Value derived from get_user_locale().
  """
  locale: String
  """
  Connection between the User type and the mediaItem type
  """
  mediaItems(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: UserToMediaItemConnectionWhereArgs
  ): UserToMediaItemConnection
  """
  Display name of the user. This is equivalent to the WP_User-&gt;display_name property.
  """
  name: String
  """
  The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  nicename: String
  """
  Nickname of the user.
  """
  nickname: String
  """
  Connection between the User type and the page type
  """
  pages(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: UserToPageConnectionWhereArgs
  ): UserToPageConnection
  """
  Connection between the User type and the post type
  """
  posts(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: UserToPostConnectionWhereArgs
  ): UserToPostConnection
  """
  The date the user registered or was created. The field follows a full ISO8601 date string format.
  """
  registeredDate: String
  """
  Connection between the User and Revisions authored by the user
  """
  revisions(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
    """
    Arguments for filtering the connection
    """
    where: UserToRevisionsConnectionWhereArgs
  ): UserToRevisionsConnection
  """
  Connection between the User type and the UserRole type
  """
  roles(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): UserToUserRoleConnection
  """
  The Yoast SEO data of a user
  """
  seo: SEOUser
  """
  Whether the Toolbar should be displayed when the user is viewing the site.
  """
  shouldShowAdminToolbar: Boolean
  """
  The slug for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  slug: String
  """
  Fields of the SocialAdvanced ACF Field Group
  """
  socialAdvanced: SocialAdvanced
  """
  The unique resource identifier path
  """
  uri: String
  """
  A website url that is associated with the user.
  """
  url: String
  """
  The Id of the user. Equivalent to WP_User-&gt;ID
  """
  userId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
  """
  Username for the user. This field is equivalent to WP_User-&gt;user_login.
  """
  username: String
}

"""
A paginated collection of User Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of User Nodes
"""
interface UserConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected User Nodes
  """
  edges: [UserConnectionEdge!]!
  """
  A list of connected User Nodes
  """
  nodes: [User!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: UserConnectionPageInfo!
}

"""
Represents a connection to a User. Contains both the User Node and metadata about the relationship.
"""
interface UserConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected User Node
  """
  node: User!
}

"""
Pagination metadata specific to &quot;UserConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;UserConnectionEdge&quot; Nodes.
"""
interface UserConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Identifier types for retrieving a specific user. Determines whether to look up users by ID, email, username, or other unique properties.
"""
enum UserNodeIdTypeEnum {
  """
  The Database ID for the node
  """
  DATABASE_ID
  """
  The Email of the User
  """
  EMAIL
  """
  The hashed Global ID
  """
  ID
  """
  The slug of the User
  """
  SLUG
  """
  The URI for the node
  """
  URI
  """
  The username the User uses to login with
  """
  USERNAME
}

"""
A user role object
"""
type UserRole implements Node {
  """
  The capabilities that belong to this role
  """
  capabilities: [String]
  """
  The display name of the role
  """
  displayName: String
  """
  The globally unique identifier for the user role object.
  """
  id: ID!
  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean
  """
  The registered name of the role
  """
  name: String
}

"""
A paginated collection of UserRole Nodes, Supports cursor-based pagination and filtering to efficiently retrieve sets of UserRole Nodes
"""
interface UserRoleConnection implements Connection {
  """
  A list of edges (relational context) between RootQuery and connected UserRole Nodes
  """
  edges: [UserRoleConnectionEdge!]!
  """
  A list of connected UserRole Nodes
  """
  nodes: [UserRole!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: UserRoleConnectionPageInfo!
}

"""
Represents a connection to a UserRole. Contains both the UserRole Node and metadata about the relationship.
"""
interface UserRoleConnectionEdge implements Edge {
  """
  Opaque reference to the nodes position in the connection. Value can be used with pagination args.
  """
  cursor: String
  """
  The connected UserRole Node
  """
  node: UserRole!
}

"""
Pagination metadata specific to &quot;UserRoleConnectionEdge&quot; collections. Provides cursors and flags for navigating through sets of &quot;UserRoleConnectionEdge&quot; Nodes.
"""
interface UserRoleConnectionPageInfo implements PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Permission levels for user accounts. Defines the standard access levels that control what actions users can perform within the system.
"""
enum UserRoleEnum {
  """
  User role with specific capabilities
  """
  ADMINISTRATOR
  """
  User role with specific capabilities
  """
  AUTHOR
  """
  User role with specific capabilities
  """
  BACKWPUP_ADMIN
  """
  User role with specific capabilities
  """
  BACKWPUP_AUFTRAGSHELFER
  """
  User role with specific capabilities
  """
  BACKWPUP_AUFTRAGSPR__FUNG
  """
  User role with specific capabilities
  """
  CONTRIBUTOR
  """
  User role with specific capabilities
  """
  EDITOR
  """
  User role with specific capabilities
  """
  SEO_EDITOR
  """
  User role with specific capabilities
  """
  SEO_MANAGER
  """
  User role with specific capabilities
  """
  SUBSCRIBER
}

"""
Connection between the User type and the BlockEditorPreview type
"""
type UserToBlockEditorPreviewConnection implements BlockEditorPreviewConnection & Connection {
  """
  Edges for the UserToBlockEditorPreviewConnection connection
  """
  edges: [UserToBlockEditorPreviewConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [BlockEditorPreview!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: UserToBlockEditorPreviewConnectionPageInfo!
}

"""
An edge in a connection
"""
type UserToBlockEditorPreviewConnectionEdge implements BlockEditorPreviewConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: BlockEditorPreview!
}

"""
Pagination metadata specific to &quot;UserToBlockEditorPreviewConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToBlockEditorPreviewConnection Nodes.
"""
type UserToBlockEditorPreviewConnectionPageInfo implements BlockEditorPreviewConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the UserToBlockEditorPreviewConnection connection
"""
input UserToBlockEditorPreviewConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int
  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]
  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String
  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the User type and the Comment type
"""
type UserToCommentConnection implements CommentConnection & Connection {
  """
  Edges for the UserToCommentConnection connection
  """
  edges: [UserToCommentConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Comment!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: UserToCommentConnectionPageInfo!
}

"""
An edge in a connection
"""
type UserToCommentConnectionEdge implements CommentConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Comment!
}

"""
Pagination metadata specific to &quot;UserToCommentConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToCommentConnection Nodes.
"""
type UserToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the UserToCommentConnection connection
"""
input UserToCommentConnectionWhereArgs {
  """
  Comment author email address.
  """
  authorEmail: String
  """
  Array of author IDs to include comments for.
  """
  authorIn: [ID]
  """
  Array of author IDs to exclude comments for.
  """
  authorNotIn: [ID]
  """
  Comment author URL.
  """
  authorUrl: String
  """
  Array of comment IDs to include.
  """
  commentIn: [ID]
  """
  Array of IDs of users whose unapproved comments will be returned by the query regardless of status.
  """
  commentNotIn: [ID]
  """
  Include comments of a given type.
  """
  commentType: String
  """
  Include comments from a given array of comment types.
  """
  commentTypeIn: [String]
  """
  Exclude comments from a given array of comment types.
  """
  commentTypeNotIn: String
  """
  Content object author ID to limit results by.
  """
  contentAuthor: [ID]
  """
  Array of author IDs to retrieve comments for.
  """
  contentAuthorIn: [ID]
  """
  Array of author IDs *not* to retrieve comments for.
  """
  contentAuthorNotIn: [ID]
  """
  Limit results to those affiliated with a given content object ID.
  """
  contentId: ID
  """
  Array of content object IDs to include affiliated comments for.
  """
  contentIdIn: [ID]
  """
  Array of content object IDs to exclude affiliated comments for.
  """
  contentIdNotIn: [ID]
  """
  Content object name (i.e. slug ) to retrieve affiliated comments for.
  """
  contentName: String
  """
  Content Object parent ID to retrieve affiliated comments for.
  """
  contentParent: Int
  """
  Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]
  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [ContentTypeEnum]
  """
  Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]
  """
  Karma score to retrieve matching comments for.
  """
  karma: Int
  """
  The cardinality of the order of the connection
  """
  order: OrderEnum
  """
  Field to order the comments by.
  """
  orderby: CommentsConnectionOrderbyEnum
  """
  Parent ID of comment to retrieve children of.
  """
  parent: Int
  """
  Array of parent IDs of comments to retrieve children for.
  """
  parentIn: [ID]
  """
  Array of parent IDs of comments *not* to retrieve children for.
  """
  parentNotIn: [ID]
  """
  Search term(s) to retrieve matching comments for.
  """
  search: String
  """
  One or more Comment Statuses to limit results by
  """
  statusIn: [CommentStatusEnum]
  """
  Include comments for a specific user ID.
  """
  userId: ID
}

"""
Connection between the User type and the EnqueuedScript type
"""
type UserToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
  """
  Edges for the UserToEnqueuedScriptConnection connection
  """
  edges: [UserToEnqueuedScriptConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [EnqueuedScript!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: UserToEnqueuedScriptConnectionPageInfo!
}

"""
An edge in a connection
"""
type UserToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: EnqueuedScript!
}

"""
Pagination metadata specific to &quot;UserToEnqueuedScriptConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToEnqueuedScriptConnection Nodes.
"""
type UserToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the User type and the EnqueuedStylesheet type
"""
type UserToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
  """
  Edges for the UserToEnqueuedStylesheetConnection connection
  """
  edges: [UserToEnqueuedStylesheetConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [EnqueuedStylesheet!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: UserToEnqueuedStylesheetConnectionPageInfo!
}

"""
An edge in a connection
"""
type UserToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: EnqueuedStylesheet!
}

"""
Pagination metadata specific to &quot;UserToEnqueuedStylesheetConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToEnqueuedStylesheetConnection Nodes.
"""
type UserToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Connection between the User type and the mediaItem type
"""
type UserToMediaItemConnection implements Connection & MediaItemConnection {
  """
  Edges for the UserToMediaItemConnection connection
  """
  edges: [UserToMediaItemConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [MediaItem!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: UserToMediaItemConnectionPageInfo!
}

"""
An edge in a connection
"""
type UserToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: MediaItem!
}

"""
Pagination metadata specific to &quot;UserToMediaItemConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToMediaItemConnection Nodes.
"""
type UserToMediaItemConnectionPageInfo implements MediaItemConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the UserToMediaItemConnection connection
"""
input UserToMediaItemConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int
  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]
  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String
  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the User type and the page type
"""
type UserToPageConnection implements Connection & PageConnection {
  """
  Edges for the UserToPageConnection connection
  """
  edges: [UserToPageConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Page!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: UserToPageConnectionPageInfo!
}

"""
An edge in a connection
"""
type UserToPageConnectionEdge implements Edge & PageConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Page!
}

"""
Pagination metadata specific to &quot;UserToPageConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToPageConnection Nodes.
"""
type UserToPageConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the UserToPageConnection connection
"""
input UserToPageConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int
  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]
  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String
  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the User type and the post type
"""
type UserToPostConnection implements Connection & PostConnection {
  """
  Edges for the UserToPostConnection connection
  """
  edges: [UserToPostConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [Post!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: UserToPostConnectionPageInfo!
}

"""
An edge in a connection
"""
type UserToPostConnectionEdge implements Edge & PostConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: Post!
}

"""
Pagination metadata specific to &quot;UserToPostConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToPostConnection Nodes.
"""
type UserToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the UserToPostConnection connection
"""
input UserToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the userId for the author object.
  """
  author: Int
  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]
  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String
  """
  Find objects NOT connected to author(s) in the array of author's userIds
  """
  authorNotIn: [ID]
  """
  Category ID
  """
  categoryId: Int
  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryIn: [ID]
  """
  Use Category Slug
  """
  categoryName: String
  """
  Array of category IDs, used to display objects from one category OR another
  """
  categoryNotIn: [ID]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Tag Slug
  """
  tag: String
  """
  Use Tag ID
  """
  tagId: String
  """
  Array of tag IDs, used to display objects from one tag OR another
  """
  tagIn: [ID]
  """
  Array of tag IDs, used to display objects from one tag OR another
  """
  tagNotIn: [ID]
  """
  Array of tag slugs, used to display objects from one tag AND another
  """
  tagSlugAnd: [String]
  """
  Array of tag slugs, used to include objects in ANY specified tags
  """
  tagSlugIn: [String]
  """
  Title of the object
  """
  title: String
}

"""
Connection between the User type and the ContentNode type
"""
type UserToRevisionsConnection implements Connection & ContentNodeConnection {
  """
  Edges for the UserToRevisionsConnection connection
  """
  edges: [UserToRevisionsConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [ContentNode!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: UserToRevisionsConnectionPageInfo!
}

"""
An edge in a connection
"""
type UserToRevisionsConnectionEdge implements ContentNodeConnectionEdge & Edge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: ContentNode!
}

"""
Pagination metadata specific to &quot;UserToRevisionsConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToRevisionsConnection Nodes.
"""
type UserToRevisionsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Arguments for filtering the UserToRevisionsConnection connection
"""
input UserToRevisionsConnectionWhereArgs {
  """
  The Types of content to filter
  """
  contentTypes: [ContentTypeEnum]
  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput
  """
  True for objects with passwords; False for objects without passwords; null for all objects with or without passwords
  """
  hasPassword: Boolean
  """
  Specific database ID of the object
  """
  id: Int
  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]
  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum
  """
  Slug / post_name of the object
  """
  name: String
  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]
  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored
  """
  notIn: [ID]
  """
  What parameter to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]
  """
  Use ID to return only children. Use 0 to return only top-level items
  """
  parent: ID
  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]
  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]
  """
  Show posts with a specific password.
  """
  password: String
  """
  Show Posts based on a keyword search
  """
  search: String
  """
  Retrieve posts where post status is in an array.
  """
  stati: [PostStatusEnum]
  """
  Show posts with a specific status.
  """
  status: PostStatusEnum
  """
  Title of the object
  """
  title: String
}

"""
Connection between the User type and the UserRole type
"""
type UserToUserRoleConnection implements Connection & UserRoleConnection {
  """
  Edges for the UserToUserRoleConnection connection
  """
  edges: [UserToUserRoleConnectionEdge!]!
  """
  The nodes of the connection, without the edges
  """
  nodes: [UserRole!]!
  """
  Information about pagination in a connection.
  """
  pageInfo: UserToUserRoleConnectionPageInfo!
}

"""
An edge in a connection
"""
type UserToUserRoleConnectionEdge implements Edge & UserRoleConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String
  """
  The item at the end of the edge
  """
  node: UserRole!
}

"""
Pagination metadata specific to &quot;UserToUserRoleConnection&quot; collections. Provides cursors and flags for navigating through sets of UserToUserRoleConnection Nodes.
"""
type UserToUserRoleConnectionPageInfo implements PageInfo & UserRoleConnectionPageInfo & WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
User attribute sorting options. Determines which property of user accounts is used for ordering user listings.
"""
enum UsersConnectionOrderbyEnum {
  """
  Order by display name
  """
  DISPLAY_NAME
  """
  Order by email address
  """
  EMAIL
  """
  Order by login
  """
  LOGIN
  """
  Preserve the login order given in the LOGIN_IN array
  """
  LOGIN_IN
  """
  Order by nice name
  """
  NICE_NAME
  """
  Preserve the nice name order given in the NICE_NAME_IN array
  """
  NICE_NAME_IN
  """
  Order by registration date
  """
  REGISTERED
  """
  Order by URL
  """
  URL
}

"""
Options for ordering the connection
"""
input UsersConnectionOrderbyInput {
  """
  The field name used to sort the results.
  """
  field: UsersConnectionOrderbyEnum!
  """
  The cardinality of the order of the connection
  """
  order: OrderEnum
}

"""
User properties that can be targeted in search operations. Defines which user attributes can be searched when looking for specific users.
"""
enum UsersConnectionSearchColumnEnum {
  """
  The user's email address.
  """
  EMAIL
  """
  The globally unique ID.
  """
  ID
  """
  The username the User uses to login with.
  """
  LOGIN
  """
  A URL-friendly name for the user. The default is the user's username.
  """
  NICENAME
  """
  The URL of the user's website.
  """
  URL
}

"""
Metadata for cursor-based pagination. Provides cursors for continuing pagination and boolean flags indicating if more items exist in either direction.
"""
interface WPPageInfo implements PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  Raw schema for page
  """
  seo: SEOPostTypePageInfo
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  total: Int
}

"""
Provides access to fields of the &quot;GithubRawData&quot; ACF Field Group via the &quot;githubRawData&quot; field
"""
interface WithAcfGithubRawData {
  """
  Fields of the GithubRawData ACF Field Group
  """
  githubRawData: GithubRawData
}

"""
Access point for the &quot;CompanyInformations&quot; ACF Options Page
"""
interface WithAcfOptionsPageCompanyInformations {
  companyInformations: CompanyInformations
}

"""
Access point for the &quot;ThemeGeneralSettings&quot; ACF Options Page
"""
interface WithAcfOptionsPageThemeGeneralSettings {
  themeGeneralSettings: ThemeGeneralSettings
}

"""
Provides access to fields of the &quot;SocialAdvanced&quot; ACF Field Group via the &quot;socialAdvanced&quot; field
"""
interface WithAcfSocialAdvanced {
  """
  Fields of the SocialAdvanced ACF Field Group
  """
  socialAdvanced: SocialAdvanced
}

"""
Provides access to fields of the &quot;WordProperties&quot; ACF Field Group via the &quot;wordProperties&quot; field
"""
interface WithAcfWordProperties {
  """
  Fields of the WordProperties ACF Field Group
  """
  wordProperties: WordProperties
}

"""
The &quot;WordProperties&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;.
"""
type WordProperties implements AcfFieldGroup & AcfFieldGroupFields & WordProperties_Fields {
  """
  Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  alternativeWords: [WordPropertiesAlternativeWords]
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  article: String
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  berlinerisch: String
  """
  Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  berlinerischAudio: [WordPropertiesBerlinerischAudio]
  """
  Field of the &quot;true_false&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  berolinismus: Boolean
  """
  Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  examples: [WordPropertiesExamples]
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;gallery&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  images(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): AcfMediaItemConnection
  """
  Field of the &quot;wysiwyg&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  infoText: String
  """
  Field of the &quot;url&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  learnMore: String
  """
  Field of the &quot;relationship&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  relatedWords(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): AcfContentNodeConnection
  """
  Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  translations: [WordPropertiesTranslations]
  """
  Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  wikimediaFiles: [WordPropertiesWikimediaFiles]
}

"""
The &quot;WordPropertiesAlternativeWords&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;.
"""
type WordPropertiesAlternativeWords implements AcfFieldGroup & AcfFieldGroupFields & WordPropertiesAlternativeWords_Fields {
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;WordPropertiesAlternativeWords&quot; Field Group
  """
  alternativeWord: String
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"""
Interface representing fields of the ACF &quot;WordPropertiesAlternativeWords&quot; Field Group
"""
interface WordPropertiesAlternativeWords_Fields implements AcfFieldGroup & AcfFieldGroupFields {
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;WordPropertiesAlternativeWords&quot; Field Group
  """
  alternativeWord: String
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"""
The &quot;WordPropertiesBerlinerischAudio&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;.
"""
type WordPropertiesBerlinerischAudio implements AcfFieldGroup & AcfFieldGroupFields & WordPropertiesBerlinerischAudio_Fields {
  """
  Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;WordPropertiesBerlinerischAudio&quot; Field Group
  """
  audio: AcfMediaItemConnectionEdge
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;radio&quot; Field Type added to the schema as part of the &quot;WordPropertiesBerlinerischAudio&quot; Field Group
  """
  gender: String
}

"""
Interface representing fields of the ACF &quot;WordPropertiesBerlinerischAudio&quot; Field Group
"""
interface WordPropertiesBerlinerischAudio_Fields implements AcfFieldGroup & AcfFieldGroupFields {
  """
  Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;WordPropertiesBerlinerischAudio&quot; Field Group
  """
  audio: AcfMediaItemConnectionEdge
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;radio&quot; Field Type added to the schema as part of the &quot;WordPropertiesBerlinerischAudio&quot; Field Group
  """
  gender: String
}

"""
The &quot;WordPropertiesExamples&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;.
"""
type WordPropertiesExamples implements AcfFieldGroup & AcfFieldGroupFields & WordPropertiesExamples_Fields {
  """
  Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;WordPropertiesExamples&quot; Field Group
  """
  example: String
  """
  Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;WordPropertiesExamples&quot; Field Group
  """
  exampleAudio: [WordPropertiesExamplesExampleAudio]
  """
  Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;WordPropertiesExamples&quot; Field Group
  """
  exampleExplanation: String
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"""
The &quot;WordPropertiesExamplesExampleAudio&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;.
"""
type WordPropertiesExamplesExampleAudio implements AcfFieldGroup & AcfFieldGroupFields & WordPropertiesExamplesExampleAudio_Fields {
  """
  Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;WordPropertiesExamplesExampleAudio&quot; Field Group
  """
  audio: AcfMediaItemConnectionEdge
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;radio&quot; Field Type added to the schema as part of the &quot;WordPropertiesExamplesExampleAudio&quot; Field Group
  """
  gender: String
}

"""
Interface representing fields of the ACF &quot;WordPropertiesExamplesExampleAudio&quot; Field Group
"""
interface WordPropertiesExamplesExampleAudio_Fields implements AcfFieldGroup & AcfFieldGroupFields {
  """
  Field of the &quot;file&quot; Field Type added to the schema as part of the &quot;WordPropertiesExamplesExampleAudio&quot; Field Group
  """
  audio: AcfMediaItemConnectionEdge
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;radio&quot; Field Type added to the schema as part of the &quot;WordPropertiesExamplesExampleAudio&quot; Field Group
  """
  gender: String
}

"""
Interface representing fields of the ACF &quot;WordPropertiesExamples&quot; Field Group
"""
interface WordPropertiesExamples_Fields implements AcfFieldGroup & AcfFieldGroupFields {
  """
  Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;WordPropertiesExamples&quot; Field Group
  """
  example: String
  """
  Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;WordPropertiesExamples&quot; Field Group
  """
  exampleAudio: [WordPropertiesExamplesExampleAudio]
  """
  Field of the &quot;textarea&quot; Field Type added to the schema as part of the &quot;WordPropertiesExamples&quot; Field Group
  """
  exampleExplanation: String
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
}

"""
The &quot;WordPropertiesTranslations&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;.
"""
type WordPropertiesTranslations implements AcfFieldGroup & AcfFieldGroupFields & WordPropertiesTranslations_Fields {
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;WordPropertiesTranslations&quot; Field Group
  """
  translation: String
}

"""
Interface representing fields of the ACF &quot;WordPropertiesTranslations&quot; Field Group
"""
interface WordPropertiesTranslations_Fields implements AcfFieldGroup & AcfFieldGroupFields {
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;WordPropertiesTranslations&quot; Field Group
  """
  translation: String
}

"""
The &quot;WordPropertiesWikimediaFiles&quot; Field Group. Added to the Schema by &quot;WPGraphQL for ACF&quot;.
"""
type WordPropertiesWikimediaFiles implements AcfFieldGroup & AcfFieldGroupFields & WordPropertiesWikimediaFiles_Fields {
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;WordPropertiesWikimediaFiles&quot; Field Group
  """
  caption: String
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;WordPropertiesWikimediaFiles&quot; Field Group
  """
  description: String
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;WordPropertiesWikimediaFiles&quot; Field Group
  """
  wikimediaFile: String
}

"""
Interface representing fields of the ACF &quot;WordPropertiesWikimediaFiles&quot; Field Group
"""
interface WordPropertiesWikimediaFiles_Fields implements AcfFieldGroup & AcfFieldGroupFields {
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;WordPropertiesWikimediaFiles&quot; Field Group
  """
  caption: String
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;WordPropertiesWikimediaFiles&quot; Field Group
  """
  description: String
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;WordPropertiesWikimediaFiles&quot; Field Group
  """
  wikimediaFile: String
}

"""
Interface representing fields of the ACF &quot;WordProperties&quot; Field Group
"""
interface WordProperties_Fields implements AcfFieldGroup & AcfFieldGroupFields {
  """
  Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  alternativeWords: [WordPropertiesAlternativeWords]
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  article: String
  """
  Field of the &quot;text&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  berlinerisch: String
  """
  Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  berlinerischAudio: [WordPropertiesBerlinerischAudio]
  """
  Field of the &quot;true_false&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  berolinismus: Boolean
  """
  Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  examples: [WordPropertiesExamples]
  """
  The name of the field group
  """
  fieldGroupName: String @deprecated(reason: "Use __typename instead")
  """
  Field of the &quot;gallery&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  images(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): AcfMediaItemConnection
  """
  Field of the &quot;wysiwyg&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  infoText: String
  """
  Field of the &quot;url&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  learnMore: String
  """
  Field of the &quot;relationship&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  relatedWords(
    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String
    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    """
    The number of items to return before the referenced "before" cursor
    """
    last: Int
  ): AcfContentNodeConnection
  """
  Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  translations: [WordPropertiesTranslations]
  """
  Field of the &quot;repeater&quot; Field Type added to the schema as part of the &quot;WordProperties&quot; Field Group
  """
  wikimediaFiles: [WordPropertiesWikimediaFiles]
}

"""
The writing setting type
"""
type WritingSettings {
  """
  Standard-Beitragskategorie.
  """
  defaultCategory: Int
  """
  Standard-Beitragsformat.
  """
  defaultPostFormat: String
  """
  Emoticons wie :-) und :-P als Grafiken anzeigen.
  """
  useSmilies: Boolean
}

"""
yoast/faq-block block
"""
type YoastFaqBlock implements Block {
  attributes: YoastFaqBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type YoastFaqBlockAttributes {
  additionalListCssClasses: String
  className: String
  lock: BlockAttributesObject
  questions: BlockAttributesArray
}

union YoastFaqBlockAttributesUnion = YoastFaqBlockAttributes | YoastFaqBlockDeprecatedV1Attributes

type YoastFaqBlockDeprecatedV1Attributes {
  additionalListCssClasses: String
  className: String
  lock: BlockAttributesObject
  questions: BlockAttributesArray
}

"""
yoast/how-to-block block
"""
type YoastHowToBlock implements Block {
  attributes: YoastHowToBlockAttributesUnion
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type YoastHowToBlockAttributes {
  additionalListCssClasses: String
  className: String
  days: String
  defaultDurationText: String
  description: String
  durationText: String
  hasDuration: Boolean
  hours: String
  jsonDescription: String
  lock: BlockAttributesObject
  minutes: String
  steps: BlockAttributesArray
  unorderedList: Boolean
}

union YoastHowToBlockAttributesUnion =
  | YoastHowToBlockAttributes
  | YoastHowToBlockDeprecatedV1Attributes
  | YoastHowToBlockDeprecatedV2Attributes

type YoastHowToBlockDeprecatedV1Attributes {
  additionalListCssClasses: String
  className: String
  days: String
  defaultDurationText: String
  description: String
  durationText: String
  hasDuration: Boolean
  hours: String
  jsonDescription: String
  lock: BlockAttributesObject
  minutes: String
  steps: BlockAttributesArray
  unorderedList: Boolean
}

type YoastHowToBlockDeprecatedV2Attributes {
  additionalListCssClasses: String
  className: String
  days: String
  defaultDurationText: String
  description: String
  durationText: String
  hasDuration: Boolean
  hours: String
  jsonDescription: String
  lock: BlockAttributesObject
  minutes: String
  steps: BlockAttributesArray
  unorderedList: Boolean
}

"""
yoast-seo/breadcrumbs block
"""
type YoastSeoBreadcrumbsBlock implements Block {
  attributes: YoastSeoBreadcrumbsBlockAttributes
  """
  Block attributes, JSON encoded
  """
  attributesJSON: String
  """
  Server side rendered content.
  """
  dynamicContent: String
  """
  Gutenberg blocks
  """
  innerBlocks: [Block!]
  """
  Is block rendered server side.
  """
  isDynamic: Boolean!
  """
  Name of the block.
  """
  name: String!
  order: Int!
  """
  Original HTML content.
  """
  originalContent: String
  """
  Parent post.
  """
  parentNode: Node!
  """
  Parent post id.
  """
  parentNodeDatabaseId: Int!
  """
  Original HTML content with inner blocks.
  """
  saveContent: String
}

type YoastSeoBreadcrumbsBlockAttributes {
  className: String
  lock: BlockAttributesObject
}
